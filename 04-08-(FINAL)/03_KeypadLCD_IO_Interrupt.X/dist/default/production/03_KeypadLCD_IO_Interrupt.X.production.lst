

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 09 13:08:30 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1,inline
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70  0000                     
    71                           ; Version 2.05
    72                           ; Generated 20/12/2018 GMT
    73                           ; 
    74                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4620 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	mediumconst
   107  00FDCA                     __pmediumconst:
   108                           	opt callstack 0
   109  00FDCA  00                 	db	0
   110  00FDCB                     _inputTime:
   111                           	opt callstack 0
   112  00FDCB  00                 	db	0
   113  00FDCC  47                 	db	71
   114  00FDCD  01                 	db	1
   115  00FDCE  01                 	db	1
   116  00FDCF  09                 	db	9
   117  00FDD0  04                 	db	4
   118  00FDD1  19                 	db	25
   119  00FDD2                     __end_of_inputTime:
   120                           	opt callstack 0
   121  00FDD2  0F55               	dw	3925
   122  00FDD4                     __end_of_singleTireSteps:
   123                           	opt callstack 0
   124  00FDD4                     _LCD_SIZE_VERT:
   125                           	opt callstack 0
   126  00FDD4  04                 	db	4
   127  00FDD5                     __end_of_LCD_SIZE_VERT:
   128                           	opt callstack 0
   129  00FDD5                     _LCD_SIZE_HORZ:
   130                           	opt callstack 0
   131  00FDD5  10                 	db	16
   132  00FDD6                     __end_of_LCD_SIZE_HORZ:
   133                           	opt callstack 0
   134  00FDD6  0A                 	db	10
   135  00FDD7                     __end_of_maxPoles:
   136                           	opt callstack 0
   137  00FDD7  0514               	dw	1300
   138  00FDD9                     __end_of_magazineStepperDelay:
   139                           	opt callstack 0
   140  00FDD9  40                 	db	64
   141  00FDDA                     __end_of_LCD_LINE2_ADDR:
   142                           	opt callstack 0
   143  00FDDA  00                 	db	0
   144  00FDDB                     __end_of_LCD_LINE1_ADDR:
   145                           	opt callstack 0
   146  00FDDB  50                 	db	80
   147  00FDDC                     __end_of_LCD_LINE4_ADDR:
   148                           	opt callstack 0
   149  00FDDC  10                 	db	16
   150  00FDDD                     __end_of_LCD_LINE3_ADDR:
   151                           	opt callstack 0
   152  0000                     _ADCON1	set	4033
   153  0000                     _TRISEbits	set	3990
   154  0000                     _TRISAbits	set	3986
   155  0000                     _TRISE	set	3990
   156  0000                     _LATE	set	3981
   157  0000                     _TRISC	set	3988
   158  0000                     _LATC	set	3979
   159  0000                     _TRISD	set	3989
   160  0000                     _LATD	set	3980
   161  0000                     _TRISA	set	3986
   162  0000                     _LATA	set	3977
   163  0000                     _EECON2	set	4007
   164  0000                     _INTCONbits	set	4082
   165  0000                     _EECON1bits	set	4006
   166  0000                     _EEDATA	set	4008
   167  0000                     _EEADR	set	4009
   168  0000                     _EEADRH	set	4010
   169  0000                     _PORTEbits	set	3972
   170  0000                     _LATDbits	set	3980
   171  0000                     _LATEbits	set	3981
   172  0000                     _LATAbits	set	3977
   173  0000                     _LATB	set	3978
   174  0000                     _TRISB	set	3987
   175  0000                     _LATBbits	set	3978
   176  0000                     _PORTB	set	3969
   177  0000                     _PORTBbits	set	3969
   178  0000                     _PORTAbits	set	3968
   179  0000                     _LATCbits	set	3979
   180  0000                     _PORTCbits	set	3970
   181  0000                     _SSPBUF	set	4041
   182  0000                     _SSPCON2bits	set	4037
   183  0000                     _SSPCON1	set	4038
   184  0000                     _SSPADD	set	4040
   185  0000                     _TRISCbits	set	3988
   186  0000                     _SSPCON1bits	set	4038
   187  0000                     _SSPCON2	set	4037
   188  0000                     _SSPSTAT	set	4039
   189  00FDDD                     STR_5:
   190  00FDDD  44                 	db	68	;'D'
   191  00FDDE  69                 	db	105	;'i'
   192  00FDDF  73                 	db	115	;'s'
   193  00FDE0  74                 	db	116	;'t'
   194  00FDE1  61                 	db	97	;'a'
   195  00FDE2  6E                 	db	110	;'n'
   196  00FDE3  63                 	db	99	;'c'
   197  00FDE4  65                 	db	101	;'e'
   198  00FDE5  3A                 	db	58	;':'
   199  00FDE6  20                 	db	32
   200  00FDE7  25                 	db	37
   201  00FDE8  68                 	db	104	;'h'
   202  00FDE9  75                 	db	117	;'u'
   203  00FDEA  2E                 	db	46
   204  00FDEB  25                 	db	37
   205  00FDEC  68                 	db	104	;'h'
   206  00FDED  75                 	db	117	;'u'
   207  00FDEE  63                 	db	99	;'c'
   208  00FDEF  6D                 	db	109	;'m'
   209  00FDF0  00                 	db	0
   210  00FDF1                     STR_21:
   211  00FDF1  44                 	db	68	;'D'
   212  00FDF2  69                 	db	105	;'i'
   213  00FDF3  73                 	db	115	;'s'
   214  00FDF4  74                 	db	116	;'t'
   215  00FDF5  61                 	db	97	;'a'
   216  00FDF6  6E                 	db	110	;'n'
   217  00FDF7  63                 	db	99	;'c'
   218  00FDF8  65                 	db	101	;'e'
   219  00FDF9  3A                 	db	58	;':'
   220  00FDFA  25                 	db	37
   221  00FDFB  68                 	db	104	;'h'
   222  00FDFC  75                 	db	117	;'u'
   223  00FDFD  2E                 	db	46
   224  00FDFE  25                 	db	37
   225  00FDFF  68                 	db	104	;'h'
   226  00FE00  75                 	db	117	;'u'
   227  00FE01  63                 	db	99	;'c'
   228  00FE02  6D                 	db	109	;'m'
   229  00FE03  00                 	db	0
   230  00FE04                     STR_20:
   231  00FE04  44                 	db	68	;'D'
   232  00FE05  65                 	db	101	;'e'
   233  00FE06  70                 	db	112	;'p'
   234  00FE07  6C                 	db	108	;'l'
   235  00FE08  6F                 	db	111	;'o'
   236  00FE09  79                 	db	121	;'y'
   237  00FE0A  3A                 	db	58	;':'
   238  00FE0B  25                 	db	37
   239  00FE0C  75                 	db	117	;'u'
   240  00FE0D  20                 	db	32
   241  00FE0E  41                 	db	65	;'A'
   242  00FE0F  66                 	db	102	;'f'
   243  00FE10  74                 	db	116	;'t'
   244  00FE11  65                 	db	101	;'e'
   245  00FE12  72                 	db	114	;'r'
   246  00FE13  3A                 	db	58	;':'
   247  00FE14  25                 	db	37
   248  00FE15  75                 	db	117	;'u'
   249  00FE16  00                 	db	0
   250  00FE17                     STR_37:
   251  00FE17  74                 	db	116	;'t'
   252  00FE18  6F                 	db	111	;'o'
   253  00FE19  70                 	db	112	;'p'
   254  00FE1A  20                 	db	32
   255  00FE1B  6D                 	db	109	;'m'
   256  00FE1C  61                 	db	97	;'a'
   257  00FE1D  67                 	db	103	;'g'
   258  00FE1E  20                 	db	32
   259  00FE1F  28                 	db	40
   260  00FE20  30                 	db	48	;'0'
   261  00FE21  31                 	db	49	;'1'
   262  00FE22  2D                 	db	45
   263  00FE23  31                 	db	49	;'1'
   264  00FE24  33                 	db	51	;'3'
   265  00FE25  29                 	db	41
   266  00FE26  3A                 	db	58	;':'
   267  00FE27  00                 	db	0
   268  00FE28                     STR_50:
   269  00FE28  62                 	db	98	;'b'
   270  00FE29  6F                 	db	111	;'o'
   271  00FE2A  74                 	db	116	;'t'
   272  00FE2B  20                 	db	32
   273  00FE2C  6D                 	db	109	;'m'
   274  00FE2D  61                 	db	97	;'a'
   275  00FE2E  67                 	db	103	;'g'
   276  00FE2F  20                 	db	32
   277  00FE30  28                 	db	40
   278  00FE31  30                 	db	48	;'0'
   279  00FE32  31                 	db	49	;'1'
   280  00FE33  2D                 	db	45
   281  00FE34  31                 	db	49	;'1'
   282  00FE35  33                 	db	51	;'3'
   283  00FE36  29                 	db	41
   284  00FE37  3A                 	db	58	;':'
   285  00FE38  00                 	db	0
   286  00FE39                     STR_22:
   287  00FE39  3C                 	db	60	;'<'
   288  00FE3A  2A                 	db	42
   289  00FE3B  20                 	db	32
   290  00FE3C  20                 	db	32
   291  00FE3D  28                 	db	40
   292  00FE3E  44                 	db	68	;'D'
   293  00FE3F  29                 	db	41
   294  00FE40  42                 	db	66	;'B'
   295  00FE41  61                 	db	97	;'a'
   296  00FE42  63                 	db	99	;'c'
   297  00FE43  6B                 	db	107	;'k'
   298  00FE44  20                 	db	32
   299  00FE45  20                 	db	32
   300  00FE46  20                 	db	32
   301  00FE47  23                 	db	35
   302  00FE48  3E                 	db	62	;'>'
   303  00FE49  00                 	db	0
   304  00FE4A                     STR_2:
   305  00FE4A  28                 	db	40
   306  00FE4B  42                 	db	66	;'B'
   307  00FE4C  29                 	db	41
   308  00FE4D  4C                 	db	76	;'L'
   309  00FE4E  6F                 	db	111	;'o'
   310  00FE4F  67                 	db	103	;'g'
   311  00FE50  73                 	db	115	;'s'
   312  00FE51  20                 	db	32
   313  00FE52  28                 	db	40
   314  00FE53  43                 	db	67	;'C'
   315  00FE54  29                 	db	41
   316  00FE55  53                 	db	83	;'S'
   317  00FE56  65                 	db	101	;'e'
   318  00FE57  74                 	db	116	;'t'
   319  00FE58  75                 	db	117	;'u'
   320  00FE59  70                 	db	112	;'p'
   321  00FE5A  00                 	db	0
   322  00FE5B                     STR_3:
   323  00FE5B  32                 	db	50	;'2'
   324  00FE5C  30                 	db	48	;'0'
   325  00FE5D  25                 	db	37
   326  00FE5E  30                 	db	48	;'0'
   327  00FE5F  32                 	db	50	;'2'
   328  00FE60  78                 	db	120	;'x'
   329  00FE61  2D                 	db	45
   330  00FE62  25                 	db	37
   331  00FE63  30                 	db	48	;'0'
   332  00FE64  32                 	db	50	;'2'
   333  00FE65  78                 	db	120	;'x'
   334  00FE66  2D                 	db	45
   335  00FE67  25                 	db	37
   336  00FE68  30                 	db	48	;'0'
   337  00FE69  32                 	db	50	;'2'
   338  00FE6A  78                 	db	120	;'x'
   339  00FE6B  00                 	db	0
   340  00FE6C                     STR_25:
   341  00FE6C  28                 	db	40
   342  00FE6D  31                 	db	49	;'1'
   343  00FE6E  29                 	db	41
   344  00FE6F  20                 	db	32
   345  00FE70  28                 	db	40
   346  00FE71  32                 	db	50	;'2'
   347  00FE72  29                 	db	41
   348  00FE73  20                 	db	32
   349  00FE74  28                 	db	40
   350  00FE75  33                 	db	51	;'3'
   351  00FE76  29                 	db	41
   352  00FE77  20                 	db	32
   353  00FE78  28                 	db	40
   354  00FE79  34                 	db	52	;'4'
   355  00FE7A  29                 	db	41
   356  00FE7B  00                 	db	0
   357  00FE7C                     STR_31:
   358  00FE7C  54                 	db	84	;'T'
   359  00FE7D  6F                 	db	111	;'o'
   360  00FE7E  70                 	db	112	;'p'
   361  00FE7F  20                 	db	32
   362  00FE80  6D                 	db	109	;'m'
   363  00FE81  61                 	db	97	;'a'
   364  00FE82  67                 	db	103	;'g'
   365  00FE83  20                 	db	32
   366  00FE84  66                 	db	102	;'f'
   367  00FE85  6F                 	db	111	;'o'
   368  00FE86  72                 	db	114	;'r'
   369  00FE87  77                 	db	119	;'w'
   370  00FE88  61                 	db	97	;'a'
   371  00FE89  72                 	db	114	;'r'
   372  00FE8A  64                 	db	100	;'d'
   373  00FE8B  00                 	db	0
   374  00FE8C                     STR_44:
   375  00FE8C  42                 	db	66	;'B'
   376  00FE8D  6F                 	db	111	;'o'
   377  00FE8E  74                 	db	116	;'t'
   378  00FE8F  20                 	db	32
   379  00FE90  6D                 	db	109	;'m'
   380  00FE91  61                 	db	97	;'a'
   381  00FE92  67                 	db	103	;'g'
   382  00FE93  20                 	db	32
   383  00FE94  66                 	db	102	;'f'
   384  00FE95  6F                 	db	111	;'o'
   385  00FE96  72                 	db	114	;'r'
   386  00FE97  77                 	db	119	;'w'
   387  00FE98  61                 	db	97	;'a'
   388  00FE99  72                 	db	114	;'r'
   389  00FE9A  64                 	db	100	;'d'
   390  00FE9B  00                 	db	0
   391  00FE9C                     STR_8:
   392  00FE9C  52                 	db	82	;'R'
   393  00FE9D  75                 	db	117	;'u'
   394  00FE9E  6E                 	db	110	;'n'
   395  00FE9F  20                 	db	32
   396  00FEA0  63                 	db	99	;'c'
   397  00FEA1  6F                 	db	111	;'o'
   398  00FEA2  6D                 	db	109	;'m'
   399  00FEA3  70                 	db	112	;'p'
   400  00FEA4  6C                 	db	108	;'l'
   401  00FEA5  65                 	db	101	;'e'
   402  00FEA6  74                 	db	116	;'t'
   403  00FEA7  65                 	db	101	;'e'
   404  00FEA8  64                 	db	100	;'d'
   405  00FEA9  21                 	db	33
   406  00FEAA  00                 	db	0
   407  00FEAB                     STR_36:
   408  00FEAB  73                 	db	115	;'s'
   409  00FEAC  70                 	db	112	;'p'
   410  00FEAD  61                 	db	97	;'a'
   411  00FEAE  63                 	db	99	;'c'
   412  00FEAF  65                 	db	101	;'e'
   413  00FEB0  73                 	db	115	;'s'
   414  00FEB1  20                 	db	32
   415  00FEB2  74                 	db	116	;'t'
   416  00FEB3  6F                 	db	111	;'o'
   417  00FEB4  20                 	db	32
   418  00FEB5  6D                 	db	109	;'m'
   419  00FEB6  6F                 	db	111	;'o'
   420  00FEB7  76                 	db	118	;'v'
   421  00FEB8  65                 	db	101	;'e'
   422  00FEB9  00                 	db	0
   423  00FEBA                     STR_39:
   424  00FEBA  25                 	db	37
   425  00FEBB  75                 	db	117	;'u'
   426  00FEBC  20                 	db	32
   427  00FEBD  74                 	db	116	;'t'
   428  00FEBE  69                 	db	105	;'i'
   429  00FEBF  72                 	db	114	;'r'
   430  00FEC0  65                 	db	101	;'e'
   431  00FEC1  28                 	db	40
   432  00FEC2  73                 	db	115	;'s'
   433  00FEC3  29                 	db	41
   434  00FEC4  20                 	db	32
   435  00FEC5  63                 	db	99	;'c'
   436  00FEC6  61                 	db	97	;'a'
   437  00FEC7  6E                 	db	110	;'n'
   438  00FEC8  00                 	db	0
   439  00FEC9                     STR_42:
   440  00FEC9  4D                 	db	77	;'M'
   441  00FECA  61                 	db	97	;'a'
   442  00FECB  67                 	db	103	;'g'
   443  00FECC  61                 	db	97	;'a'
   444  00FECD  7A                 	db	122	;'z'
   445  00FECE  69                 	db	105	;'i'
   446  00FECF  6E                 	db	110	;'n'
   447  00FED0  65                 	db	101	;'e'
   448  00FED1  20                 	db	32
   449  00FED2  63                 	db	99	;'c'
   450  00FED3  61                 	db	97	;'a'
   451  00FED4  6E                 	db	110	;'n'
   452  00FED5  27                 	db	39
   453  00FED6  74                 	db	116	;'t'
   454  00FED7  00                 	db	0
   455  00FED8                     STR_4:
   456  00FED8  25                 	db	37
   457  00FED9  30                 	db	48	;'0'
   458  00FEDA  32                 	db	50	;'2'
   459  00FEDB  78                 	db	120	;'x'
   460  00FEDC  3A                 	db	58	;':'
   461  00FEDD  25                 	db	37
   462  00FEDE  30                 	db	48	;'0'
   463  00FEDF  32                 	db	50	;'2'
   464  00FEE0  78                 	db	120	;'x'
   465  00FEE1  3A                 	db	58	;':'
   466  00FEE2  25                 	db	37
   467  00FEE3  30                 	db	48	;'0'
   468  00FEE4  32                 	db	50	;'2'
   469  00FEE5  78                 	db	120	;'x'
   470  00FEE6  00                 	db	0
   471  00FEE7                     STR_23:
   472  00FEE7  43                 	db	67	;'C'
   473  00FEE8  68                 	db	104	;'h'
   474  00FEE9  6F                 	db	111	;'o'
   475  00FEEA  6F                 	db	111	;'o'
   476  00FEEB  73                 	db	115	;'s'
   477  00FEEC  65                 	db	101	;'e'
   478  00FEED  20                 	db	32
   479  00FEEE  6C                 	db	108	;'l'
   480  00FEEF  6F                 	db	111	;'o'
   481  00FEF0  67                 	db	103	;'g'
   482  00FEF1  20                 	db	32
   483  00FEF2  74                 	db	116	;'t'
   484  00FEF3  6F                 	db	111	;'o'
   485  00FEF4  00                 	db	0
   486  00FEF5                     STR_43:
   487  00FEF5  68                 	db	104	;'h'
   488  00FEF6  6F                 	db	111	;'o'
   489  00FEF7  6C                 	db	108	;'l'
   490  00FEF8  64                 	db	100	;'d'
   491  00FEF9  20                 	db	32
   492  00FEFA  25                 	db	37
   493  00FEFB  75                 	db	117	;'u'
   494  00FEFC  20                 	db	32
   495  00FEFD  74                 	db	116	;'t'
   496  00FEFE  69                 	db	105	;'i'
   497  00FEFF  72                 	db	114	;'r'
   498  00FF00  65                 	db	101	;'e'
   499  00FF01  73                 	db	115	;'s'
   500  00FF02  00                 	db	0
   501  00FF03                     STR_15:
   502  00FF03  23                 	db	35
   503  00FF04  20                 	db	32
   504  00FF05  73                 	db	115	;'s'
   505  00FF06  75                 	db	117	;'u'
   506  00FF07  70                 	db	112	;'p'
   507  00FF08  70                 	db	112	;'p'
   508  00FF09  6C                 	db	108	;'l'
   509  00FF0A  69                 	db	105	;'i'
   510  00FF0B  65                 	db	101	;'e'
   511  00FF0C  64                 	db	100	;'d'
   512  00FF0D  3A                 	db	58	;':'
   513  00FF0E  25                 	db	37
   514  00FF0F  75                 	db	117	;'u'
   515  00FF10  00                 	db	0
   516  00FF11                     STR_16:
   517  00FF11  23                 	db	35
   518  00FF12  20                 	db	32
   519  00FF13  6F                 	db	111	;'o'
   520  00FF14  66                 	db	102	;'f'
   521  00FF15  20                 	db	32
   522  00FF16  70                 	db	112	;'p'
   523  00FF17  6F                 	db	111	;'o'
   524  00FF18  6C                 	db	108	;'l'
   525  00FF19  65                 	db	101	;'e'
   526  00FF1A  73                 	db	115	;'s'
   527  00FF1B  3A                 	db	58	;':'
   528  00FF1C  25                 	db	37
   529  00FF1D  75                 	db	117	;'u'
   530  00FF1E  00                 	db	0
   531  00FF1F                     STR_11:
   532  00FF1F  28                 	db	40
   533  00FF20  44                 	db	68	;'D'
   534  00FF21  29                 	db	41
   535  00FF22  20                 	db	32
   536  00FF23  4D                 	db	77	;'M'
   537  00FF24  61                 	db	97	;'a'
   538  00FF25  69                 	db	105	;'i'
   539  00FF26  6E                 	db	110	;'n'
   540  00FF27  20                 	db	32
   541  00FF28  6D                 	db	109	;'m'
   542  00FF29  65                 	db	101	;'e'
   543  00FF2A  6E                 	db	110	;'n'
   544  00FF2B  75                 	db	117	;'u'
   545  00FF2C  00                 	db	0
   546  00FF2D                     STR_32:
   547  00FF2D  6F                 	db	111	;'o'
   548  00FF2E  72                 	db	114	;'r'
   549  00FF2F  20                 	db	32
   550  00FF30  62                 	db	98	;'b'
   551  00FF31  61                 	db	97	;'a'
   552  00FF32  63                 	db	99	;'c'
   553  00FF33  6B                 	db	107	;'k'
   554  00FF34  77                 	db	119	;'w'
   555  00FF35  61                 	db	97	;'a'
   556  00FF36  72                 	db	114	;'r'
   557  00FF37  64                 	db	100	;'d'
   558  00FF38  3F                 	db	63	;'?'
   559  00FF39  00                 	db	0
   560  00FF3A                     STR_34:
   561  00FF3A  28                 	db	40
   562  00FF3B  2A                 	db	42
   563  00FF3C  29                 	db	41
   564  00FF3D  20                 	db	32
   565  00FF3E  42                 	db	66	;'B'
   566  00FF3F  61                 	db	97	;'a'
   567  00FF40  63                 	db	99	;'c'
   568  00FF41  6B                 	db	107	;'k'
   569  00FF42  77                 	db	119	;'w'
   570  00FF43  61                 	db	97	;'a'
   571  00FF44  72                 	db	114	;'r'
   572  00FF45  64                 	db	100	;'d'
   573  00FF46  00                 	db	0
   574  00FF47                     STR_40:
   575  00FF47  62                 	db	98	;'b'
   576  00FF48  65                 	db	101	;'e'
   577  00FF49  20                 	db	32
   578  00FF4A  6C                 	db	108	;'l'
   579  00FF4B  6F                 	db	111	;'o'
   580  00FF4C  61                 	db	97	;'a'
   581  00FF4D  64                 	db	100	;'d'
   582  00FF4E  65                 	db	101	;'e'
   583  00FF4F  64                 	db	100	;'d'
   584  00FF50  20                 	db	32
   585  00FF51  69                 	db	105	;'i'
   586  00FF52  6E                 	db	110	;'n'
   587  00FF53  00                 	db	0
   588  00FF54                     STR_10:
   589  00FF54  28                 	db	40
   590  00FF55  43                 	db	67	;'C'
   591  00FF56  29                 	db	41
   592  00FF57  20                 	db	32
   593  00FF58  53                 	db	83	;'S'
   594  00FF59  61                 	db	97	;'a'
   595  00FF5A  76                 	db	118	;'v'
   596  00FF5B  65                 	db	101	;'e'
   597  00FF5C  20                 	db	32
   598  00FF5D  72                 	db	114	;'r'
   599  00FF5E  75                 	db	117	;'u'
   600  00FF5F  6E                 	db	110	;'n'
   601  00FF60  00                 	db	0
   602  00FF61                     STR_9:
   603  00FF61  28                 	db	40
   604  00FF62  42                 	db	66	;'B'
   605  00FF63  29                 	db	41
   606  00FF64  20                 	db	32
   607  00FF65  52                 	db	82	;'R'
   608  00FF66  75                 	db	117	;'u'
   609  00FF67  6E                 	db	110	;'n'
   610  00FF68  20                 	db	32
   611  00FF69  69                 	db	105	;'i'
   612  00FF6A  6E                 	db	110	;'n'
   613  00FF6B  66                 	db	102	;'f'
   614  00FF6C  6F                 	db	111	;'o'
   615  00FF6D  00                 	db	0
   616  00FF6E                     STR_12:
   617  00FF6E  4F                 	db	79	;'O'
   618  00FF6F  70                 	db	112	;'p'
   619  00FF70  20                 	db	32
   620  00FF71  74                 	db	116	;'t'
   621  00FF72  69                 	db	105	;'i'
   622  00FF73  6D                 	db	109	;'m'
   623  00FF74  65                 	db	101	;'e'
   624  00FF75  3A                 	db	58	;':'
   625  00FF76  25                 	db	37
   626  00FF77  75                 	db	117	;'u'
   627  00FF78  3A                 	db	58	;':'
   628  00FF79  00                 	db	0
   629  00FF7A                     STR_33:
   630  00FF7A  28                 	db	40
   631  00FF7B  23                 	db	35
   632  00FF7C  29                 	db	41
   633  00FF7D  20                 	db	32
   634  00FF7E  46                 	db	70	;'F'
   635  00FF7F  6F                 	db	111	;'o'
   636  00FF80  72                 	db	114	;'r'
   637  00FF81  77                 	db	119	;'w'
   638  00FF82  61                 	db	97	;'a'
   639  00FF83  72                 	db	114	;'r'
   640  00FF84  64                 	db	100	;'d'
   641  00FF85  00                 	db	0
   642  00FF86                     STR_24:
   643  00FF86  6F                 	db	111	;'o'
   644  00FF87  76                 	db	118	;'v'
   645  00FF88  65                 	db	101	;'e'
   646  00FF89  72                 	db	114	;'r'
   647  00FF8A  77                 	db	119	;'w'
   648  00FF8B  72                 	db	114	;'r'
   649  00FF8C  69                 	db	105	;'i'
   650  00FF8D  74                 	db	116	;'t'
   651  00FF8E  65                 	db	101	;'e'
   652  00FF8F  3A                 	db	58	;':'
   653  00FF90  00                 	db	0
   654  00FF91                     STR_35:
   655  00FF91  49                 	db	73	;'I'
   656  00FF92  6E                 	db	110	;'n'
   657  00FF93  70                 	db	112	;'p'
   658  00FF94  75                 	db	117	;'u'
   659  00FF95  74                 	db	116	;'t'
   660  00FF96  20                 	db	32
   661  00FF97  74                 	db	116	;'t'
   662  00FF98  69                 	db	105	;'i'
   663  00FF99  72                 	db	114	;'r'
   664  00FF9A  65                 	db	101	;'e'
   665  00FF9B  00                 	db	0
   666  00FF9C                     STR_6:
   667  00FF9C  42                 	db	66	;'B'
   668  00FF9D  65                 	db	101	;'e'
   669  00FF9E  66                 	db	102	;'f'
   670  00FF9F  6F                 	db	111	;'o'
   671  00FFA0  72                 	db	114	;'r'
   672  00FFA1  65                 	db	101	;'e'
   673  00FFA2  3A                 	db	58	;':'
   674  00FFA3  20                 	db	32
   675  00FFA4  25                 	db	37
   676  00FFA5  75                 	db	117	;'u'
   677  00FFA6  00                 	db	0
   678  00FFA7                     STR_17:
   679  00FFA7  28                 	db	40
   680  00FFA8  43                 	db	67	;'C'
   681  00FFA9  29                 	db	41
   682  00FFAA  50                 	db	80	;'P'
   683  00FFAB  6F                 	db	111	;'o'
   684  00FFAC  6C                 	db	108	;'l'
   685  00FFAD  65                 	db	101	;'e'
   686  00FFAE  73                 	db	115	;'s'
   687  00FFAF  20                 	db	32
   688  00FFB0  00                 	db	0
   689  00FFB1                     STR_7:
   690  00FFB1  46                 	db	70	;'F'
   691  00FFB2  69                 	db	105	;'i'
   692  00FFB3  6E                 	db	110	;'n'
   693  00FFB4  69                 	db	105	;'i'
   694  00FFB5  73                 	db	115	;'s'
   695  00FFB6  68                 	db	104	;'h'
   696  00FFB7  65                 	db	101	;'e'
   697  00FFB8  64                 	db	100	;'d'
   698  00FFB9  00                 	db	0
   699  00FFBA                     STR_26:
   700  00FFBA  28                 	db	40
   701  00FFBB  44                 	db	68	;'D'
   702  00FFBC  29                 	db	41
   703  00FFBD  20                 	db	32
   704  00FFBE  42                 	db	66	;'B'
   705  00FFBF  61                 	db	97	;'a'
   706  00FFC0  63                 	db	99	;'c'
   707  00FFC1  6B                 	db	107	;'k'
   708  00FFC2  00                 	db	0
   709  00FFC3                     STR_1:
   710  00FFC3  28                 	db	40
   711  00FFC4  41                 	db	65	;'A'
   712  00FFC5  29                 	db	41
   713  00FFC6  53                 	db	83	;'S'
   714  00FFC7  74                 	db	116	;'t'
   715  00FFC8  61                 	db	97	;'a'
   716  00FFC9  72                 	db	114	;'r'
   717  00FFCA  74                 	db	116	;'t'
   718  00FFCB  00                 	db	0
   719  00FFCC                     STR_19:
   720  00FFCC  50                 	db	80	;'P'
   721  00FFCD  6F                 	db	111	;'o'
   722  00FFCE  6C                 	db	108	;'l'
   723  00FFCF  65                 	db	101	;'e'
   724  00FFD0  20                 	db	32
   725  00FFD1  23                 	db	35
   726  00FFD2  25                 	db	37
   727  00FFD3  75                 	db	117	;'u'
   728  00FFD4  00                 	db	0
   729  00FFD5                     STR_41:
   730  00FFD5  74                 	db	116	;'t'
   731  00FFD6  6F                 	db	111	;'o'
   732  00FFD7  70                 	db	112	;'p'
   733  00FFD8  20                 	db	32
   734  00FFD9  6D                 	db	109	;'m'
   735  00FFDA  61                 	db	97	;'a'
   736  00FFDB  67                 	db	103	;'g'
   737  00FFDC  00                 	db	0
   738  00FFDD                     STR_54:
   739  00FFDD  62                 	db	98	;'b'
   740  00FFDE  6F                 	db	111	;'o'
   741  00FFDF  74                 	db	116	;'t'
   742  00FFE0  20                 	db	32
   743  00FFE1  6D                 	db	109	;'m'
   744  00FFE2  61                 	db	97	;'a'
   745  00FFE3  67                 	db	103	;'g'
   746  00FFE4  00                 	db	0
   747  00FFE5                     STR_18:
   748  00FFE5  28                 	db	40
   749  00FFE6  44                 	db	68	;'D'
   750  00FFE7  29                 	db	41
   751  00FFE8  42                 	db	66	;'B'
   752  00FFE9  61                 	db	97	;'a'
   753  00FFEA  63                 	db	99	;'c'
   754  00FFEB  6B                 	db	107	;'k'
   755  00FFEC  00                 	db	0
   756  00FFED                     STR_28:
   757  00FFED  76                 	db	118	;'v'
   758  00FFEE  69                 	db	105	;'i'
   759  00FFEF  65                 	db	101	;'e'
   760  00FFF0  77                 	db	119	;'w'
   761  00FFF1  3A                 	db	58	;':'
   762  00FFF2  00                 	db	0
   763  00FFF3                     STR_66:
   764  00FFF3  68                 	db	104	;'h'
   765  00FFF4  58                 	db	88	;'X'
   766  00FFF5  00                 	db	0
   767  00FFF6                     STR_57:
   768  00FFF6  68                 	db	104	;'h'
   769  00FFF7  75                 	db	117	;'u'
   770  00FFF8  00                 	db	0
   771  00FFF9                     STR_62:
   772  00FFF9  68                 	db	104	;'h'
   773  00FFFA  78                 	db	120	;'x'
   774  00FFFB  00                 	db	0
   775  00FFFC                     STR_13:
   776  00FFFC  30                 	db	48	;'0'
   777  00FFFD  00                 	db	0
   778  0000                     
   779                           ; #config settings
   780  00FFFE  00                 	db	0	; dummy byte at the end
   781  0000                     
   782                           	psect	cinit
   783  00C43E                     __pcinit:
   784                           	opt callstack 0
   785  00C43E                     start_initialization:
   786                           	opt callstack 0
   787  00C43E                     __initialization:
   788                           	opt callstack 0
   789                           
   790                           ; Clear objects allocated to BANK1 (60 bytes)
   791  00C43E  EE01  F000         	lfsr	0,__pbssBANK1
   792  00C442  0E3C               	movlw	60
   793  00C444                     clear_0:
   794  00C444  6AEE               	clrf	postinc0,c
   795  00C446  06E8               	decf	wreg,f,c
   796  00C448  E1FD               	bnz	clear_0
   797                           
   798                           ; Clear objects allocated to BANK0 (10 bytes)
   799  00C44A  EE00  F0F5         	lfsr	0,__pbssBANK0
   800  00C44E  0E0A               	movlw	10
   801  00C450                     clear_1:
   802  00C450  6AEE               	clrf	postinc0,c
   803  00C452  06E8               	decf	wreg,f,c
   804  00C454  E1FD               	bnz	clear_1
   805  00C456                     end_of_initialization:
   806                           	opt callstack 0
   807  00C456                     __end_of__initialization:
   808                           	opt callstack 0
   809  00C456  0E00               	movlw	low (__Lmediumconst shr (0+16))
   810  00C458  6EF8               	movwf	tblptru,c
   811  00C45A  0100               	movlb	0
   812  00C45C  EFFA  F06B         	goto	_main	;jump to C main() function
   813                           
   814                           	psect	bssBANK0
   815  0000F5                     __pbssBANK0:
   816                           	opt callstack 0
   817  0000F5                     _nout:
   818                           	opt callstack 0
   819  0000F5                     	ds	2
   820  0000F7                     _width:
   821                           	opt callstack 0
   822  0000F7                     	ds	2
   823  0000F9                     _prec:
   824                           	opt callstack 0
   825  0000F9                     	ds	2
   826  0000FB                     _flags:
   827                           	opt callstack 0
   828  0000FB                     	ds	2
   829  0000FD                     _keypress:
   830                           	opt callstack 0
   831  0000FD                     	ds	1
   832  0000FE                     _i:
   833                           	opt callstack 0
   834  0000FE                     	ds	1
   835                           
   836                           	psect	bssBANK1
   837  000100                     __pbssBANK1:
   838                           	opt callstack 0
   839  000100                     _endTime:
   840                           	opt callstack 0
   841  000100                     	ds	14
   842  00010E                     _startTime:
   843                           	opt callstack 0
   844  00010E                     	ds	14
   845  00011C                     _dbuf:
   846                           	opt callstack 0
   847  00011C                     	ds	32
   848                           
   849                           	psect	cstackBANK0
   850  000080                     __pcstackBANK0:
   851                           	opt callstack 0
   852  000080                     ??_start:
   853  000080                     ??_runFinished:
   854  000080                     options@bottomMagTireCheck:
   855                           	opt callstack 0
   856                           
   857                           ; 1 bytes @ 0x0
   858  000080                     	ds	1
   859  000081                     options@topMagTireCheck:
   860                           	opt callstack 0
   861                           
   862                           ; 1 bytes @ 0x1
   863  000081                     	ds	1
   864  000082                     options@topMagTireMove:
   865                           	opt callstack 0
   866                           
   867                           ; 1 bytes @ 0x2
   868  000082                     	ds	1
   869  000083                     options@bottomMagTireMove:
   870                           	opt callstack 0
   871                           
   872                           ; 1 bytes @ 0x3
   873  000083                     	ds	1
   874  000084                     options@tens:
   875                           	opt callstack 0
   876                           
   877                           ; 1 bytes @ 0x4
   878  000084                     	ds	1
   879  000085                     options@forward:
   880                           	opt callstack 0
   881  000085                     runFinished@startSec:
   882                           	opt callstack 0
   883                           
   884                           ; 2 bytes @ 0x5
   885  000085                     	ds	1
   886  000086                     options@ones:
   887                           	opt callstack 0
   888                           
   889                           ; 1 bytes @ 0x6
   890  000086                     	ds	1
   891  000087                     runFinished@endSec:
   892                           	opt callstack 0
   893                           
   894                           ; 2 bytes @ 0x7
   895  000087                     	ds	2
   896  000089                     runFinished@i:
   897                           	opt callstack 0
   898                           
   899                           ; 1 bytes @ 0x9
   900  000089                     	ds	1
   901  00008A                     start@floatDistTravelled:
   902                           	opt callstack 0
   903                           
   904                           ; 4 bytes @ 0xA
   905  00008A                     	ds	4
   906  00008E                     start@distTravelled:
   907                           	opt callstack 0
   908                           
   909                           ; 2 bytes @ 0xE
   910  00008E                     	ds	2
   911  000090                     start@armReached:
   912                           	opt callstack 0
   913                           
   914                           ; 1 bytes @ 0x10
   915  000090                     	ds	1
   916  000091                     start@bottomMagPushed:
   917                           	opt callstack 0
   918                           
   919                           ; 1 bytes @ 0x11
   920  000091                     	ds	1
   921  000092                     start@tiresNeeded:
   922                           	opt callstack 0
   923                           
   924                           ; 1 bytes @ 0x12
   925  000092                     	ds	1
   926  000093                     start@tireInCell:
   927                           	opt callstack 0
   928                           
   929                           ; 1 bytes @ 0x13
   930  000093                     	ds	1
   931  000094                     start@tireOnBottomRamp:
   932                           	opt callstack 0
   933                           
   934                           ; 1 bytes @ 0x14
   935  000094                     	ds	1
   936  000095                     start@currentTires:
   937                           	opt callstack 0
   938                           
   939                           ; 1 bytes @ 0x15
   940  000095                     	ds	1
   941  000096                     start@tiresBefore:
   942                           	opt callstack 0
   943                           
   944                           ; 1 bytes @ 0x16
   945  000096                     	ds	1
   946  000097                     start@currentPole:
   947                           	opt callstack 0
   948                           
   949                           ; 1 bytes @ 0x17
   950  000097                     	ds	1
   951  000098                     ??_main:
   952                           
   953                           ; 1 bytes @ 0x18
   954  000098                     	ds	2
   955  00009A                     main@logs:
   956                           	opt callstack 0
   957                           
   958                           ; 1 bytes @ 0x1A
   959  00009A                     	ds	1
   960  00009B                     main@topMagTires:
   961                           	opt callstack 0
   962                           
   963                           ; 1 bytes @ 0x1B
   964  00009B                     	ds	1
   965  00009C                     main@bottomMagTires:
   966                           	opt callstack 0
   967                           
   968                           ; 1 bytes @ 0x1C
   969  00009C                     	ds	1
   970  00009D                     main@polePage:
   971                           	opt callstack 0
   972                           
   973                           ; 1 bytes @ 0x1D
   974  00009D                     	ds	1
   975  00009E                     main@displayRun:
   976                           	opt callstack 0
   977                           
   978                           ; 43 bytes @ 0x1E
   979  00009E                     	ds	43
   980  0000C9                     main@currentRun:
   981                           	opt callstack 0
   982                           
   983                           ; 43 bytes @ 0x49
   984  0000C9                     	ds	43
   985  0000F4                     main@menu:
   986                           	opt callstack 0
   987                           
   988                           ; 1 bytes @ 0x74
   989  0000F4                     	ds	1
   990                           
   991                           	psect	cstackCOMRAM
   992  000001                     __pcstackCOMRAM:
   993                           	opt callstack 0
   994  000001                     ??_I2C_Master_Wait:
   995  000001                     ?_strlen:
   996                           	opt callstack 0
   997  000001                     ?_isupper:
   998                           	opt callstack 0
   999  000001                     ?_isalpha:
  1000                           	opt callstack 0
  1001  000001                     ?_isdigit:
  1002                           	opt callstack 0
  1003  000001                     ?_strncmp:
  1004                           	opt callstack 0
  1005  000001                     ?_isspace:
  1006                           	opt callstack 0
  1007  000001                     ?_islower:
  1008                           	opt callstack 0
  1009  000001                     ?___awdiv:
  1010                           	opt callstack 0
  1011  000001                     ?___awmod:
  1012                           	opt callstack 0
  1013  000001                     ?___lwdiv:
  1014                           	opt callstack 0
  1015  000001                     ?___lwmod:
  1016                           	opt callstack 0
  1017  000001                     ?___lldiv:
  1018                           	opt callstack 0
  1019  000001                     ?___xxtofl:
  1020                           	opt callstack 0
  1021  000001                     ?___lodiv:
  1022                           	opt callstack 0
  1023  000001                     ?___lomod:
  1024                           	opt callstack 0
  1025  000001                     pulse_e@interruptState:
  1026                           	opt callstack 0
  1027  000001                     Write_eep@badd:
  1028                           	opt callstack 0
  1029  000001                     Read_eep@badd:
  1030                           	opt callstack 0
  1031  000001                     ___awdiv@dividend:
  1032                           	opt callstack 0
  1033  000001                     ___awmod@dividend:
  1034                           	opt callstack 0
  1035  000001                     ___lwdiv@dividend:
  1036                           	opt callstack 0
  1037  000001                     ___lwmod@dividend:
  1038                           	opt callstack 0
  1039  000001                     isalpha@c:
  1040                           	opt callstack 0
  1041  000001                     isdigit@c:
  1042                           	opt callstack 0
  1043  000001                     isspace@c:
  1044                           	opt callstack 0
  1045  000001                     isupper@c:
  1046                           	opt callstack 0
  1047  000001                     strlen@s:
  1048                           	opt callstack 0
  1049  000001                     strncmp@_l:
  1050                           	opt callstack 0
  1051  000001                     islower@c:
  1052                           	opt callstack 0
  1053  000001                     ___lldiv@dividend:
  1054                           	opt callstack 0
  1055  000001                     ___xxtofl@val:
  1056                           	opt callstack 0
  1057  000001                     ___lodiv@dividend:
  1058                           	opt callstack 0
  1059  000001                     ___lomod@dividend:
  1060                           	opt callstack 0
  1061                           
  1062                           ; 8 bytes @ 0x0
  1063  000001                     	ds	1
  1064  000002                     I2C_Master_Read@ackBit:
  1065                           	opt callstack 0
  1066  000002                     send_nibble@data:
  1067                           	opt callstack 0
  1068  000002                     I2C_Master_Write@byteToWrite:
  1069                           	opt callstack 0
  1070                           
  1071                           ; 2 bytes @ 0x1
  1072  000002                     	ds	1
  1073  000003                     ??_isupper:
  1074  000003                     ??_isalpha:
  1075  000003                     ??_isdigit:
  1076  000003                     ??_isspace:
  1077  000003                     ??_islower:
  1078  000003                     I2C_Master_Read@receivedByte:
  1079                           	opt callstack 0
  1080  000003                     Write_eep@bdat:
  1081                           	opt callstack 0
  1082  000003                     send_byte@data:
  1083                           	opt callstack 0
  1084  000003                     ___awdiv@divisor:
  1085                           	opt callstack 0
  1086  000003                     ___awmod@divisor:
  1087                           	opt callstack 0
  1088  000003                     ___lwdiv@divisor:
  1089                           	opt callstack 0
  1090  000003                     ___lwmod@divisor:
  1091                           	opt callstack 0
  1092  000003                     strlen@a:
  1093                           	opt callstack 0
  1094  000003                     strncmp@_r:
  1095                           	opt callstack 0
  1096                           
  1097                           ; 2 bytes @ 0x2
  1098  000003                     	ds	1
  1099  000004                     writeByteToDriveArduino@byteToWrite:
  1100                           	opt callstack 0
  1101  000004                     Write_eep@GIE_BIT_VAL:
  1102                           	opt callstack 0
  1103  000004                     lcdInst@data:
  1104                           	opt callstack 0
  1105  000004                     putch@data:
  1106                           	opt callstack 0
  1107                           
  1108                           ; 1 bytes @ 0x3
  1109  000004                     	ds	1
  1110  000005                     ??_initLCD:
  1111  000005                     ??___xxtofl:
  1112  000005                     ___awdiv@counter:
  1113                           	opt callstack 0
  1114  000005                     ___awmod@counter:
  1115                           	opt callstack 0
  1116  000005                     ___lwmod@counter:
  1117                           	opt callstack 0
  1118  000005                     ___lwdiv@quotient:
  1119                           	opt callstack 0
  1120  000005                     fputc@c:
  1121                           	opt callstack 0
  1122  000005                     strncmp@n:
  1123                           	opt callstack 0
  1124  000005                     ___lldiv@divisor:
  1125                           	opt callstack 0
  1126                           
  1127                           ; 4 bytes @ 0x4
  1128  000005                     	ds	1
  1129  000006                     ___awdiv@sign:
  1130                           	opt callstack 0
  1131  000006                     ___awmod@sign:
  1132                           	opt callstack 0
  1133                           
  1134                           ; 1 bytes @ 0x5
  1135  000006                     	ds	1
  1136  000007                     ??_strncmp:
  1137  000007                     ?_toupper:
  1138                           	opt callstack 0
  1139  000007                     ___lwdiv@counter:
  1140                           	opt callstack 0
  1141  000007                     _isspace$1828:
  1142                           	opt callstack 0
  1143  000007                     ___awdiv@quotient:
  1144                           	opt callstack 0
  1145  000007                     fputc@fp:
  1146                           	opt callstack 0
  1147  000007                     toupper@c:
  1148                           	opt callstack 0
  1149                           
  1150                           ; 2 bytes @ 0x6
  1151  000007                     	ds	1
  1152  000008                     strncmp@l:
  1153                           	opt callstack 0
  1154                           
  1155                           ; 2 bytes @ 0x7
  1156  000008                     	ds	1
  1157  000009                     ??_fputc:
  1158  000009                     ??_toupper:
  1159  000009                     ??_bcdToDec:
  1160  000009                     ___xxtofl@sign:
  1161                           	opt callstack 0
  1162  000009                     ___lldiv@quotient:
  1163                           	opt callstack 0
  1164  000009                     ___lodiv@divisor:
  1165                           	opt callstack 0
  1166  000009                     ___lomod@divisor:
  1167                           	opt callstack 0
  1168                           
  1169                           ; 8 bytes @ 0x8
  1170  000009                     	ds	1
  1171  00000A                     bcdToDec@val:
  1172                           	opt callstack 0
  1173  00000A                     ___xxtofl@exp:
  1174                           	opt callstack 0
  1175  00000A                     strncmp@r:
  1176                           	opt callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x9
  1179  00000A                     	ds	1
  1180  00000B                     ?___wmul:
  1181                           	opt callstack 0
  1182  00000B                     ___wmul@multiplier:
  1183                           	opt callstack 0
  1184  00000B                     ___xxtofl@arg:
  1185                           	opt callstack 0
  1186                           
  1187                           ; 4 bytes @ 0xA
  1188  00000B                     	ds	2
  1189  00000D                     ___lldiv@counter:
  1190                           	opt callstack 0
  1191  00000D                     ___wmul@multiplicand:
  1192                           	opt callstack 0
  1193  00000D                     _toupper$1899:
  1194                           	opt callstack 0
  1195                           
  1196                           ; 2 bytes @ 0xC
  1197  00000D                     	ds	1
  1198  00000E                     fputs@s:
  1199                           	opt callstack 0
  1200  00000E                     I2C_Master_Init@clockFreq:
  1201                           	opt callstack 0
  1202                           
  1203                           ; 4 bytes @ 0xD
  1204  00000E                     	ds	1
  1205  00000F                     ?___flmul:
  1206                           	opt callstack 0
  1207  00000F                     ___wmul@product:
  1208                           	opt callstack 0
  1209  00000F                     ___flmul@b:
  1210                           	opt callstack 0
  1211                           
  1212                           ; 4 bytes @ 0xE
  1213  00000F                     	ds	1
  1214  000010                     fputs@fp:
  1215                           	opt callstack 0
  1216                           
  1217                           ; 2 bytes @ 0xF
  1218  000010                     	ds	1
  1219  000011                     ?_atoi:
  1220                           	opt callstack 0
  1221  000011                     ___lomod@counter:
  1222                           	opt callstack 0
  1223  000011                     topMagStepper@steps:
  1224                           	opt callstack 0
  1225  000011                     bottomMagStepper@steps:
  1226                           	opt callstack 0
  1227  000011                     atoi@s:
  1228                           	opt callstack 0
  1229  000011                     ___lodiv@quotient:
  1230                           	opt callstack 0
  1231                           
  1232                           ; 8 bytes @ 0x10
  1233  000011                     	ds	1
  1234  000012                     ??_I2C_Master_Init:
  1235  000012                     fputs@c:
  1236                           	opt callstack 0
  1237                           
  1238                           ; 1 bytes @ 0x11
  1239  000012                     	ds	1
  1240  000013                     ??_atoi:
  1241  000013                     topMagStepper@forward:
  1242                           	opt callstack 0
  1243  000013                     bottomMagStepper@forward:
  1244                           	opt callstack 0
  1245  000013                     fputs@i:
  1246                           	opt callstack 0
  1247  000013                     ___flmul@a:
  1248                           	opt callstack 0
  1249                           
  1250                           ; 4 bytes @ 0x12
  1251  000013                     	ds	1
  1252  000014                     ??_topMagStepper:
  1253  000014                     ??_bottomMagStepper:
  1254                           
  1255                           ; 1 bytes @ 0x13
  1256  000014                     	ds	1
  1257  000015                     ?_pad:
  1258                           	opt callstack 0
  1259  000015                     pad@fp:
  1260                           	opt callstack 0
  1261                           
  1262                           ; 2 bytes @ 0x14
  1263  000015                     	ds	1
  1264  000016                     topMagStepper@topMagCurrentStep:
  1265                           	opt callstack 0
  1266  000016                     bottomMagStepper@bottomMagCurrentStep:
  1267                           	opt callstack 0
  1268                           
  1269                           ; 2 bytes @ 0x15
  1270  000016                     	ds	1
  1271  000017                     ??___flmul:
  1272  000017                     pad@buf:
  1273                           	opt callstack 0
  1274  000017                     atoi@neg:
  1275                           	opt callstack 0
  1276                           
  1277                           ; 2 bytes @ 0x16
  1278  000017                     	ds	2
  1279  000019                     ___lodiv@counter:
  1280                           	opt callstack 0
  1281  000019                     pad@p:
  1282                           	opt callstack 0
  1283  000019                     _atoi$1801:
  1284                           	opt callstack 0
  1285                           
  1286                           ; 2 bytes @ 0x18
  1287  000019                     	ds	2
  1288  00001B                     ??_pad:
  1289  00001B                     ___flmul@sign:
  1290                           	opt callstack 0
  1291  00001B                     _atoi$1803:
  1292                           	opt callstack 0
  1293                           
  1294                           ; 2 bytes @ 0x1A
  1295  00001B                     	ds	1
  1296  00001C                     pad@i:
  1297                           	opt callstack 0
  1298  00001C                     ___flmul@grs:
  1299                           	opt callstack 0
  1300                           
  1301                           ; 4 bytes @ 0x1B
  1302  00001C                     	ds	1
  1303  00001D                     _atoi$1802:
  1304                           	opt callstack 0
  1305                           
  1306                           ; 1 bytes @ 0x1C
  1307  00001D                     	ds	1
  1308  00001E                     pad@w:
  1309                           	opt callstack 0
  1310  00001E                     atoi@n:
  1311                           	opt callstack 0
  1312                           
  1313                           ; 2 bytes @ 0x1D
  1314  00001E                     	ds	2
  1315  000020                     ?_utoa:
  1316                           	opt callstack 0
  1317  000020                     ?_xtoa:
  1318                           	opt callstack 0
  1319  000020                     ___flmul@aexp:
  1320                           	opt callstack 0
  1321  000020                     utoa@fp:
  1322                           	opt callstack 0
  1323  000020                     xtoa@fp:
  1324                           	opt callstack 0
  1325                           
  1326                           ; 2 bytes @ 0x1F
  1327  000020                     	ds	1
  1328  000021                     ___flmul@bexp:
  1329                           	opt callstack 0
  1330                           
  1331                           ; 1 bytes @ 0x20
  1332  000021                     	ds	1
  1333  000022                     ___flmul@prod:
  1334                           	opt callstack 0
  1335  000022                     utoa@d:
  1336                           	opt callstack 0
  1337  000022                     xtoa@d:
  1338                           	opt callstack 0
  1339                           
  1340                           ; 8 bytes @ 0x21
  1341  000022                     	ds	4
  1342  000026                     ___flmul@temp:
  1343                           	opt callstack 0
  1344                           
  1345                           ; 2 bytes @ 0x25
  1346  000026                     	ds	2
  1347  000028                     ?___fladd:
  1348                           	opt callstack 0
  1349  000028                     ?___fltol:
  1350                           	opt callstack 0
  1351  000028                     ___fltol@f1:
  1352                           	opt callstack 0
  1353  000028                     ___fladd@b:
  1354                           	opt callstack 0
  1355                           
  1356                           ; 4 bytes @ 0x27
  1357  000028                     	ds	2
  1358  00002A                     ??_utoa:
  1359  00002A                     xtoa@x:
  1360                           	opt callstack 0
  1361                           
  1362                           ; 1 bytes @ 0x29
  1363  00002A                     	ds	1
  1364  00002B                     ??_xtoa:
  1365                           
  1366                           ; 1 bytes @ 0x2A
  1367  00002B                     	ds	1
  1368  00002C                     ??___fltol:
  1369  00002C                     ___fladd@a:
  1370                           	opt callstack 0
  1371                           
  1372                           ; 4 bytes @ 0x2B
  1373  00002C                     	ds	4
  1374  000030                     ??___fladd:
  1375  000030                     ___fltol@sign1:
  1376                           	opt callstack 0
  1377                           
  1378                           ; 1 bytes @ 0x2F
  1379  000030                     	ds	1
  1380  000031                     ___fltol@exp1:
  1381                           	opt callstack 0
  1382                           
  1383                           ; 1 bytes @ 0x30
  1384  000031                     	ds	1
  1385  000032                     utoa@p:
  1386                           	opt callstack 0
  1387                           
  1388                           ; 2 bytes @ 0x31
  1389  000032                     	ds	1
  1390  000033                     _xtoa$1316:
  1391                           	opt callstack 0
  1392                           
  1393                           ; 2 bytes @ 0x32
  1394  000033                     	ds	1
  1395  000034                     ___fladd@signs:
  1396                           	opt callstack 0
  1397  000034                     utoa@w:
  1398                           	opt callstack 0
  1399                           
  1400                           ; 2 bytes @ 0x33
  1401  000034                     	ds	1
  1402  000035                     ___fladd@aexp:
  1403                           	opt callstack 0
  1404  000035                     _xtoa$1317:
  1405                           	opt callstack 0
  1406                           
  1407                           ; 2 bytes @ 0x34
  1408  000035                     	ds	1
  1409  000036                     ___fladd@bexp:
  1410                           	opt callstack 0
  1411  000036                     utoa@n:
  1412                           	opt callstack 0
  1413                           
  1414                           ; 8 bytes @ 0x35
  1415  000036                     	ds	1
  1416  000037                     ___fladd@grs:
  1417                           	opt callstack 0
  1418  000037                     xtoa@p:
  1419                           	opt callstack 0
  1420                           
  1421                           ; 2 bytes @ 0x36
  1422  000037                     	ds	2
  1423  000039                     xtoa@w:
  1424                           	opt callstack 0
  1425                           
  1426                           ; 2 bytes @ 0x38
  1427  000039                     	ds	2
  1428  00003B                     xtoa@n:
  1429                           	opt callstack 0
  1430                           
  1431                           ; 8 bytes @ 0x3A
  1432  00003B                     	ds	3
  1433  00003E                     utoa@i:
  1434                           	opt callstack 0
  1435                           
  1436                           ; 2 bytes @ 0x3D
  1437  00003E                     	ds	5
  1438  000043                     xtoa@i:
  1439                           	opt callstack 0
  1440                           
  1441                           ; 2 bytes @ 0x42
  1442  000043                     	ds	2
  1443  000045                     xtoa@c:
  1444                           	opt callstack 0
  1445                           
  1446                           ; 2 bytes @ 0x44
  1447  000045                     	ds	2
  1448  000047                     ?_vfpfcnvrt:
  1449                           	opt callstack 0
  1450  000047                     vfpfcnvrt@fp:
  1451                           	opt callstack 0
  1452                           
  1453                           ; 2 bytes @ 0x46
  1454  000047                     	ds	2
  1455  000049                     vfpfcnvrt@fmt:
  1456                           	opt callstack 0
  1457                           
  1458                           ; 2 bytes @ 0x48
  1459  000049                     	ds	2
  1460  00004B                     vfpfcnvrt@ap:
  1461                           	opt callstack 0
  1462                           
  1463                           ; 2 bytes @ 0x4A
  1464  00004B                     	ds	2
  1465  00004D                     ??_vfpfcnvrt:
  1466                           
  1467                           ; 1 bytes @ 0x4C
  1468  00004D                     	ds	4
  1469  000051                     vfpfcnvrt@done:
  1470                           	opt callstack 0
  1471                           
  1472                           ; 2 bytes @ 0x50
  1473  000051                     	ds	2
  1474  000053                     _vfpfcnvrt$1331:
  1475                           	opt callstack 0
  1476                           
  1477                           ; 2 bytes @ 0x52
  1478  000053                     	ds	2
  1479  000055                     vfpfcnvrt@c:
  1480                           	opt callstack 0
  1481                           
  1482                           ; 1 bytes @ 0x54
  1483  000055                     	ds	1
  1484  000056                     vfpfcnvrt@llu:
  1485                           	opt callstack 0
  1486                           
  1487                           ; 8 bytes @ 0x55
  1488  000056                     	ds	8
  1489  00005E                     ?_vfprintf:
  1490                           	opt callstack 0
  1491  00005E                     vfprintf@fp:
  1492                           	opt callstack 0
  1493                           
  1494                           ; 2 bytes @ 0x5D
  1495  00005E                     	ds	2
  1496  000060                     vfprintf@fmt:
  1497                           	opt callstack 0
  1498                           
  1499                           ; 2 bytes @ 0x5F
  1500  000060                     	ds	2
  1501  000062                     vfprintf@ap:
  1502                           	opt callstack 0
  1503                           
  1504                           ; 2 bytes @ 0x61
  1505  000062                     	ds	2
  1506  000064                     vfprintf@cfmt:
  1507                           	opt callstack 0
  1508                           
  1509                           ; 2 bytes @ 0x63
  1510  000064                     	ds	2
  1511  000066                     ?_printf:
  1512                           	opt callstack 0
  1513  000066                     printf@fmt:
  1514                           	opt callstack 0
  1515                           
  1516                           ; 2 bytes @ 0x65
  1517  000066                     	ds	8
  1518  00006E                     
  1519                           ; 1 bytes @ 0x6D
  1520  00006E                     	ds	2
  1521  000070                     printf@ap:
  1522                           	opt callstack 0
  1523                           
  1524                           ; 2 bytes @ 0x6F
  1525  000070                     	ds	2
  1526  000072                     mainMenu@menu:
  1527                           	opt callstack 0
  1528  000072                     start@menu:
  1529                           	opt callstack 0
  1530  000072                     runFinished@menu:
  1531                           	opt callstack 0
  1532  000072                     runFinishedMenu@menu:
  1533                           	opt callstack 0
  1534  000072                     runInfoMenu@menu:
  1535                           	opt callstack 0
  1536  000072                     poleInfo@menu:
  1537                           	opt callstack 0
  1538  000072                     saveRun@menu:
  1539                           	opt callstack 0
  1540  000072                     selectLog@menu:
  1541                           	opt callstack 0
  1542  000072                     options@menu:
  1543                           	opt callstack 0
  1544                           
  1545                           ; 2 bytes @ 0x71
  1546  000072                     	ds	2
  1547  000074                     ??_mainMenu:
  1548  000074                     start@currentRun:
  1549                           	opt callstack 0
  1550  000074                     runFinished@currentRun:
  1551                           	opt callstack 0
  1552  000074                     runFinishedMenu@logs:
  1553                           	opt callstack 0
  1554  000074                     runInfoMenu@displayRun:
  1555                           	opt callstack 0
  1556  000074                     poleInfo@displayRun:
  1557                           	opt callstack 0
  1558  000074                     saveRun@currentRun:
  1559                           	opt callstack 0
  1560  000074                     selectLog@displayRun:
  1561                           	opt callstack 0
  1562  000074                     options@topMagTires:
  1563                           	opt callstack 0
  1564                           
  1565                           ; 2 bytes @ 0x73
  1566  000074                     	ds	2
  1567  000076                     ??_runFinishedMenu:
  1568  000076                     ??_saveRun:
  1569  000076                     ??_selectLog:
  1570  000076                     runInfoMenu@logs:
  1571                           	opt callstack 0
  1572  000076                     start@topMagTires:
  1573                           	opt callstack 0
  1574  000076                     runFinished@polePage:
  1575                           	opt callstack 0
  1576  000076                     poleInfo@polePage:
  1577                           	opt callstack 0
  1578  000076                     options@bottomMagTires:
  1579                           	opt callstack 0
  1580  000076                     mainMenu@time:
  1581                           	opt callstack 0
  1582                           
  1583                           ; 7 bytes @ 0x75
  1584  000076                     	ds	1
  1585  000077                     ??_runInfoMenu:
  1586                           
  1587                           ; 1 bytes @ 0x76
  1588  000077                     	ds	1
  1589  000078                     ??_poleInfo:
  1590  000078                     ??_options:
  1591  000078                     start@bottomMagTires:
  1592                           	opt callstack 0
  1593  000078                     runFinished@displayRun:
  1594                           	opt callstack 0
  1595                           
  1596                           ; 2 bytes @ 0x77
  1597  000078                     	ds	2
  1598  00007A                     runFinished@logs:
  1599                           	opt callstack 0
  1600                           
  1601                           ; 2 bytes @ 0x79
  1602  00007A                     	ds	3
  1603  00007D                     mainMenu@i:
  1604                           	opt callstack 0
  1605                           
  1606                           ; 1 bytes @ 0x7C
  1607  00007D                     	ds	1
  1608  00007E                     mainMenu@i_885:
  1609                           	opt callstack 0
  1610                           
  1611                           ; 1 bytes @ 0x7D
  1612  00007E                     	ds	1
  1613  00007F                     mainMenu@i_894:
  1614                           	opt callstack 0
  1615                           
  1616                           ; 1 bytes @ 0x7E
  1617  00007F                     	ds	1
  1618                           
  1619 ;;
  1620 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1621 ;;
  1622 ;; *************** function _main *****************
  1623 ;; Defined at:
  1624 ;;		line 1033 in file "main.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  currentRun     43   73[BANK0 ] struct .
  1629 ;;  displayRun     43   30[BANK0 ] struct .
  1630 ;;  menu            1  116[BANK0 ] unsigned char 
  1631 ;;  polePage        1   29[BANK0 ] unsigned char 
  1632 ;;  bottomMagTir    1   28[BANK0 ] unsigned char 
  1633 ;;  topMagTires     1   27[BANK0 ] unsigned char 
  1634 ;;  logs            1   26[BANK0 ] _Bool 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Totals:         0      93       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;Total ram usage:       93 bytes
  1649 ;; Hardware stack levels required when called:   12
  1650 ;; This function calls:
  1651 ;;		_I2C_Master_Init
  1652 ;;		_initLCD
  1653 ;;		_lcdInst
  1654 ;;		_mainMenu
  1655 ;;		_options
  1656 ;;		_poleInfo
  1657 ;;		_runFinished
  1658 ;;		_runFinishedMenu
  1659 ;;		_runInfoMenu
  1660 ;;		_saveRun
  1661 ;;		_selectLog
  1662 ;;		_start
  1663 ;; This function is called by:
  1664 ;;		Startup code after reset
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text0
  1669  00D7F4                     __ptext0:
  1670                           	opt callstack 0
  1671  00D7F4                     _main:
  1672                           	opt callstack 19
  1673                           
  1674                           ;main.c: 1034:     run currentRun;;main.c: 1035:     run displayRun;;main.c: 1036:     u
      +                          nsigned char menu = 0;
  1675                           
  1676                           ;incstack = 0
  1677  00D7F4  0E00               	movlw	0
  1678  00D7F6  0100               	movlb	0	; () banked
  1679  00D7F8  6FF4               	movwf	main@menu& (0+255),b
  1680                           
  1681                           ;main.c: 1037:     unsigned char polePage = 0;
  1682  00D7FA  0E00               	movlw	0
  1683  00D7FC  6F9D               	movwf	main@polePage& (0+255),b
  1684                           
  1685                           ;main.c: 1038:     _Bool logs = 1;
  1686  00D7FE  0E01               	movlw	1
  1687  00D800  6F9A               	movwf	main@logs& (0+255),b
  1688                           
  1689                           ;main.c: 1039:     unsigned char topMagTires = 0;
  1690  00D802  0E00               	movlw	0
  1691  00D804  6F9B               	movwf	main@topMagTires& (0+255),b
  1692                           
  1693                           ;main.c: 1040:     unsigned char bottomMagTires = 0;
  1694  00D806  0E00               	movlw	0
  1695  00D808  6F9C               	movwf	main@bottomMagTires& (0+255),b
  1696                           
  1697                           ;main.c: 1045:     LATA = 0x00;
  1698  00D80A  0E00               	movlw	0
  1699  00D80C  6E89               	movwf	3977,c	;volatile
  1700                           
  1701                           ;main.c: 1046:     TRISA = 0x00;
  1702  00D80E  0E00               	movlw	0
  1703  00D810  6E92               	movwf	3986,c	;volatile
  1704                           
  1705                           ;main.c: 1047:     LATB = 0x00;
  1706  00D812  0E00               	movlw	0
  1707  00D814  6E8A               	movwf	3978,c	;volatile
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 1048:     TRISB = 0xff;
  1711  00D816  6893               	setf	3987,c	;volatile
  1712                           
  1713                           ;main.c: 1049:     LATD = 0x00;
  1714  00D818  0E00               	movlw	0
  1715  00D81A  6E8C               	movwf	3980,c	;volatile
  1716                           
  1717                           ;main.c: 1050:     TRISD = 0x00;
  1718  00D81C  0E00               	movlw	0
  1719  00D81E  6E95               	movwf	3989,c	;volatile
  1720                           
  1721                           ;main.c: 1051:     LATC = 0x00;
  1722  00D820  0E00               	movlw	0
  1723  00D822  6E8B               	movwf	3979,c	;volatile
  1724                           
  1725                           ;main.c: 1052:     TRISC = 0x00;
  1726  00D824  0E00               	movlw	0
  1727  00D826  6E94               	movwf	3988,c	;volatile
  1728                           
  1729                           ;main.c: 1053:     LATE = 0x00;
  1730  00D828  0E00               	movlw	0
  1731  00D82A  6E8D               	movwf	3981,c	;volatile
  1732                           
  1733                           ;main.c: 1054:     TRISE = 0x00;
  1734  00D82C  0E00               	movlw	0
  1735  00D82E  6E96               	movwf	3990,c	;volatile
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;main.c: 1056:     TRISCbits.RC2 = 1;
  1739  00D830  8494               	bsf	3988,2,c	;volatile
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;main.c: 1057:     TRISAbits.RA5 = 1;
  1743  00D832  8A92               	bsf	3986,5,c	;volatile
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 1058:     TRISCbits.RC0 = 1;
  1747  00D834  8094               	bsf	3988,0,c	;volatile
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;main.c: 1059:     TRISAbits.RA2 = 1;
  1751  00D836  8492               	bsf	3986,2,c	;volatile
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 1060:     TRISEbits.RE0 = 1;
  1755  00D838  8096               	bsf	3990,0,c	;volatile
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 1061:     TRISEbits.RE1 = 1;
  1759  00D83A  8296               	bsf	3990,1,c	;volatile
  1760                           
  1761                           ;main.c: 1064:     ADCON1 = 0b00001111;
  1762  00D83C  0E0F               	movlw	15
  1763  00D83E  6EC1               	movwf	4033,c	;volatile
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;main.c: 1067:     initLCD();
  1767  00D840  EC3E  F064         	call	_initLCD	;wreg free
  1768                           
  1769                           ;main.c: 1070:     I2C_Master_Init(100000);
  1770  00D844  0EA0               	movlw	160
  1771  00D846  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1772  00D848  0E86               	movlw	134
  1773  00D84A  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1774  00D84C  0E01               	movlw	1
  1775  00D84E  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1776  00D850  0E00               	movlw	0
  1777  00D852  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1778  00D854  EC10  F064         	call	_I2C_Master_Init	;wreg free
  1779                           
  1780                           ;main.c: 1076:     { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1781  00D858  0E0C               	movlw	12
  1782  00D85A  ECEA  F061         	call	_lcdInst
  1783  00D85E  D07C               	goto	l6635
  1784  00D860                     l6615:
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;main.c: 1106:                 mainMenu(&menu);
  1788  00D860  0EF4               	movlw	low main@menu
  1789  00D862  6E72               	movwf	mainMenu@menu,c
  1790  00D864  0E00               	movlw	high main@menu
  1791  00D866  6E73               	movwf	mainMenu@menu+1,c
  1792  00D868  ECDA  F06F         	call	_mainMenu	;wreg free
  1793                           
  1794                           ;main.c: 1107:                 break;
  1795  00D86C  D075               	goto	l6635
  1796  00D86E                     l6617:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 1109:                 start(&menu, &currentRun, &topMagTires, &bottomMagTires);
  1800  00D86E  0EF4               	movlw	low main@menu
  1801  00D870  6E72               	movwf	start@menu,c
  1802  00D872  0E00               	movlw	high main@menu
  1803  00D874  6E73               	movwf	start@menu+1,c
  1804  00D876  0EC9               	movlw	low main@currentRun
  1805  00D878  6E74               	movwf	start@currentRun,c
  1806  00D87A  0E00               	movlw	high main@currentRun
  1807  00D87C  6E75               	movwf	start@currentRun+1,c
  1808  00D87E  0E9B               	movlw	low main@topMagTires
  1809  00D880  6E76               	movwf	start@topMagTires,c
  1810  00D882  0E00               	movlw	high main@topMagTires
  1811  00D884  6E77               	movwf	start@topMagTires+1,c
  1812  00D886  0E9C               	movlw	low main@bottomMagTires
  1813  00D888  6E78               	movwf	start@bottomMagTires,c
  1814  00D88A  0E00               	movlw	high main@bottomMagTires
  1815  00D88C  6E79               	movwf	start@bottomMagTires+1,c
  1816  00D88E  ECA7  F07A         	call	_start	;wreg free
  1817                           
  1818                           ;main.c: 1110:                 break;
  1819  00D892  D062               	goto	l6635
  1820  00D894                     l6619:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 1112:                 runFinished(&menu, &currentRun, &polePage, &displayRun, &
      +                          logs);
  1824  00D894  0EF4               	movlw	low main@menu
  1825  00D896  6E72               	movwf	runFinished@menu,c
  1826  00D898  0E00               	movlw	high main@menu
  1827  00D89A  6E73               	movwf	runFinished@menu+1,c
  1828  00D89C  0EC9               	movlw	low main@currentRun
  1829  00D89E  6E74               	movwf	runFinished@currentRun,c
  1830  00D8A0  0E00               	movlw	high main@currentRun
  1831  00D8A2  6E75               	movwf	runFinished@currentRun+1,c
  1832  00D8A4  0E9D               	movlw	low main@polePage
  1833  00D8A6  6E76               	movwf	runFinished@polePage,c
  1834  00D8A8  0E00               	movlw	high main@polePage
  1835  00D8AA  6E77               	movwf	runFinished@polePage+1,c
  1836  00D8AC  0E9E               	movlw	low main@displayRun
  1837  00D8AE  6E78               	movwf	runFinished@displayRun,c
  1838  00D8B0  0E00               	movlw	high main@displayRun
  1839  00D8B2  6E79               	movwf	runFinished@displayRun+1,c
  1840  00D8B4  0E9A               	movlw	low main@logs
  1841  00D8B6  6E7A               	movwf	runFinished@logs,c
  1842  00D8B8  0E00               	movlw	high main@logs
  1843  00D8BA  6E7B               	movwf	runFinished@logs+1,c
  1844  00D8BC  ECAA  F06D         	call	_runFinished	;wreg free
  1845                           
  1846                           ;main.c: 1113:                 break;
  1847  00D8C0  D04B               	goto	l6635
  1848  00D8C2                     l6621:
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;main.c: 1115:                 runInfoMenu(&menu, &displayRun, logs);
  1852  00D8C2  0EF4               	movlw	low main@menu
  1853  00D8C4  6E72               	movwf	runInfoMenu@menu,c
  1854  00D8C6  0E00               	movlw	high main@menu
  1855  00D8C8  6E73               	movwf	runInfoMenu@menu+1,c
  1856  00D8CA  0E9E               	movlw	low main@displayRun
  1857  00D8CC  6E74               	movwf	runInfoMenu@displayRun,c
  1858  00D8CE  0E00               	movlw	high main@displayRun
  1859  00D8D0  6E75               	movwf	runInfoMenu@displayRun+1,c
  1860  00D8D2  C09A  F076         	movff	main@logs,runInfoMenu@logs
  1861  00D8D6  EC25  F06B         	call	_runInfoMenu	;wreg free
  1862                           
  1863                           ;main.c: 1116:                 break;
  1864  00D8DA  D03E               	goto	l6635
  1865  00D8DC                     l6623:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 1118:                 poleInfo(&menu, &displayRun, &polePage);
  1869  00D8DC  0EF4               	movlw	low main@menu
  1870  00D8DE  6E72               	movwf	poleInfo@menu,c
  1871  00D8E0  0E00               	movlw	high main@menu
  1872  00D8E2  6E73               	movwf	poleInfo@menu+1,c
  1873  00D8E4  0E9E               	movlw	low main@displayRun
  1874  00D8E6  6E74               	movwf	poleInfo@displayRun,c
  1875  00D8E8  0E00               	movlw	high main@displayRun
  1876  00D8EA  6E75               	movwf	poleInfo@displayRun+1,c
  1877  00D8EC  0E9D               	movlw	low main@polePage
  1878  00D8EE  6E76               	movwf	poleInfo@polePage,c
  1879  00D8F0  0E00               	movlw	high main@polePage
  1880  00D8F2  6E77               	movwf	poleInfo@polePage+1,c
  1881  00D8F4  ECF5  F070         	call	_poleInfo	;wreg free
  1882                           
  1883                           ;main.c: 1119:                 break;
  1884  00D8F8  D02F               	goto	l6635
  1885  00D8FA                     l6625:
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 1121:                 saveRun(&menu, &currentRun);
  1889  00D8FA  0EF4               	movlw	low main@menu
  1890  00D8FC  6E72               	movwf	saveRun@menu,c
  1891  00D8FE  0E00               	movlw	high main@menu
  1892  00D900  6E73               	movwf	saveRun@menu+1,c
  1893  00D902  0EC9               	movlw	low main@currentRun
  1894  00D904  6E74               	movwf	saveRun@currentRun,c
  1895  00D906  0E00               	movlw	high main@currentRun
  1896  00D908  6E75               	movwf	saveRun@currentRun+1,c
  1897  00D90A  EC66  F06A         	call	_saveRun	;wreg free
  1898                           
  1899                           ;main.c: 1122:                 break;
  1900  00D90E  D024               	goto	l6635
  1901  00D910                     l6627:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;main.c: 1124:                 selectLog(&menu, &displayRun);
  1905  00D910  0EF4               	movlw	low main@menu
  1906  00D912  6E72               	movwf	selectLog@menu,c
  1907  00D914  0E00               	movlw	high main@menu
  1908  00D916  6E73               	movwf	selectLog@menu+1,c
  1909  00D918  0E9E               	movlw	low main@displayRun
  1910  00D91A  6E74               	movwf	selectLog@displayRun,c
  1911  00D91C  0E00               	movlw	high main@displayRun
  1912  00D91E  6E75               	movwf	selectLog@displayRun+1,c
  1913  00D920  ECAB  F069         	call	_selectLog	;wreg free
  1914                           
  1915                           ;main.c: 1125:                 break;
  1916  00D924  D019               	goto	l6635
  1917  00D926                     l6629:
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 1127:                 runFinishedMenu(&menu, &logs);
  1921  00D926  0EF4               	movlw	low main@menu
  1922  00D928  6E72               	movwf	runFinishedMenu@menu,c
  1923  00D92A  0E00               	movlw	high main@menu
  1924  00D92C  6E73               	movwf	runFinishedMenu@menu+1,c
  1925  00D92E  0E9A               	movlw	low main@logs
  1926  00D930  6E74               	movwf	runFinishedMenu@logs,c
  1927  00D932  0E00               	movlw	high main@logs
  1928  00D934  6E75               	movwf	runFinishedMenu@logs+1,c
  1929  00D936  ECBA  F066         	call	_runFinishedMenu	;wreg free
  1930                           
  1931                           ;main.c: 1128:                 break;
  1932  00D93A  D00E               	goto	l6635
  1933  00D93C                     l6631:
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;main.c: 1130:                 options(&menu, &topMagTires, &bottomMagTires);
  1937  00D93C  0EF4               	movlw	low main@menu
  1938  00D93E  6E72               	movwf	options@menu,c
  1939  00D940  0E00               	movlw	high main@menu
  1940  00D942  6E73               	movwf	options@menu+1,c
  1941  00D944  0E9B               	movlw	low main@topMagTires
  1942  00D946  6E74               	movwf	options@topMagTires,c
  1943  00D948  0E00               	movlw	high main@topMagTires
  1944  00D94A  6E75               	movwf	options@topMagTires+1,c
  1945  00D94C  0E9C               	movlw	low main@bottomMagTires
  1946  00D94E  6E76               	movwf	options@bottomMagTires,c
  1947  00D950  0E00               	movlw	high main@bottomMagTires
  1948  00D952  6E77               	movwf	options@bottomMagTires+1,c
  1949  00D954  ECE9  F077         	call	_options	;wreg free
  1950  00D958                     l6635:
  1951  00D958  0100               	movlb	0	; () banked
  1952  00D95A  51F4               	movf	main@menu& (0+255),w,b
  1953  00D95C  6F98               	movwf	??_main& (0+255),b
  1954  00D95E  6B99               	clrf	(??_main+1)& (0+255),b
  1955                           
  1956                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1957                           ; Switch size 1, requested type "simple"
  1958                           ; Number of cases is 1, Range of values is 0 to 0
  1959                           ; switch strategies available:
  1960                           ; Name         Instructions Cycles
  1961                           ; simple_byte            4     3 (average)
  1962                           ;	Chosen strategy is simple_byte
  1963  00D960  5199               	movf	(??_main+1)& (0+255),w,b
  1964  00D962  0A00               	xorlw	0	; case 0
  1965  00D964  A4D8               	btfss	status,2,c
  1966  00D966  D7F8               	goto	l6635
  1967                           
  1968                           ; BSR set to: 0
  1969                           ; Switch size 1, requested type "simple"
  1970                           ; Number of cases is 9, Range of values is 0 to 8
  1971                           ; switch strategies available:
  1972                           ; Name         Instructions Cycles
  1973                           ; simple_byte           28    15 (average)
  1974                           ;	Chosen strategy is simple_byte
  1975  00D968  5198               	movf	??_main& (0+255),w,b
  1976  00D96A  0A00               	xorlw	0	; case 0
  1977  00D96C  B4D8               	btfsc	status,2,c
  1978  00D96E  D778               	goto	l6615
  1979  00D970  0A01               	xorlw	1	; case 1
  1980  00D972  B4D8               	btfsc	status,2,c
  1981  00D974  D77C               	goto	l6617
  1982  00D976  0A03               	xorlw	3	; case 2
  1983  00D978  B4D8               	btfsc	status,2,c
  1984  00D97A  D78C               	goto	l6619
  1985  00D97C  0A01               	xorlw	1	; case 3
  1986  00D97E  B4D8               	btfsc	status,2,c
  1987  00D980  D7A0               	goto	l6621
  1988  00D982  0A07               	xorlw	7	; case 4
  1989  00D984  B4D8               	btfsc	status,2,c
  1990  00D986  D7AA               	goto	l6623
  1991  00D988  0A01               	xorlw	1	; case 5
  1992  00D98A  B4D8               	btfsc	status,2,c
  1993  00D98C  D7B6               	goto	l6625
  1994  00D98E  0A03               	xorlw	3	; case 6
  1995  00D990  B4D8               	btfsc	status,2,c
  1996  00D992  D7BE               	goto	l6627
  1997  00D994  0A01               	xorlw	1	; case 7
  1998  00D996  B4D8               	btfsc	status,2,c
  1999  00D998  D7C6               	goto	l6629
  2000  00D99A  0A0F               	xorlw	15	; case 8
  2001  00D99C  B4D8               	btfsc	status,2,c
  2002  00D99E  D7CE               	goto	l6631
  2003  00D9A0  D7DB               	goto	l6635
  2004  00D9A2                     __end_of_main:
  2005                           	opt callstack 0
  2006                           
  2007 ;; *************** function _start *****************
  2008 ;; Defined at:
  2009 ;;		line 247 in file "main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  menu            2  113[COMRAM] PTR unsigned char 
  2012 ;;		 -> main@menu(1), 
  2013 ;;  currentRun      2  115[COMRAM] PTR struct .
  2014 ;;		 -> main@currentRun(43), 
  2015 ;;  topMagTires     2  117[COMRAM] PTR unsigned char 
  2016 ;;		 -> main@topMagTires(1), 
  2017 ;;  bottomMagTir    2  119[COMRAM] PTR unsigned char 
  2018 ;;		 -> main@bottomMagTires(1), 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  floatDistTra    4   10[BANK0 ] float 
  2021 ;;  distTravelle    2   14[BANK0 ] unsigned int 
  2022 ;;  currentPole     1   23[BANK0 ] unsigned char 
  2023 ;;  tiresBefore     1   22[BANK0 ] unsigned char 
  2024 ;;  currentTires    1   21[BANK0 ] unsigned char 
  2025 ;;  tireOnBottom    1   20[BANK0 ] _Bool 
  2026 ;;  tireInCell      1   19[BANK0 ] _Bool 
  2027 ;;  tiresNeeded     1   18[BANK0 ] unsigned char 
  2028 ;;  bottomMagPus    1   17[BANK0 ] _Bool 
  2029 ;;  armReached      1   16[BANK0 ] _Bool 
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2039 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Totals:         8      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;Total ram usage:       32 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:   11
  2046 ;; This function calls:
  2047 ;;		_I2C_Master_Read
  2048 ;;		_I2C_Master_Start
  2049 ;;		_I2C_Master_Stop
  2050 ;;		_I2C_Master_Write
  2051 ;;		___fladd
  2052 ;;		___flmul
  2053 ;;		___fltol
  2054 ;;		___lwdiv
  2055 ;;		___lwmod
  2056 ;;		___xxtofl
  2057 ;;		_bottomMagStepper
  2058 ;;		_lcdInst
  2059 ;;		_printf
  2060 ;;		_topMagStepper
  2061 ;;		_writeByteToDriveArduino
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text1
  2068  00F54E                     __ptext1:
  2069                           	opt callstack 0
  2070  00F54E                     _start:
  2071                           	opt callstack 19
  2072                           
  2073                           ;main.c: 249:     float floatDistTravelled = 0;
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;incstack = 0
  2077  00F54E  0E00               	movlw	0
  2078  00F550  0100               	movlb	0	; () banked
  2079  00F552  6F8A               	movwf	start@floatDistTravelled& (0+255),b
  2080  00F554  0E00               	movlw	0
  2081  00F556  6F8B               	movwf	(start@floatDistTravelled+1)& (0+255),b
  2082  00F558  0E00               	movlw	0
  2083  00F55A  6F8C               	movwf	(start@floatDistTravelled+2)& (0+255),b
  2084  00F55C  0E00               	movlw	0
  2085  00F55E  6F8D               	movwf	(start@floatDistTravelled+3)& (0+255),b
  2086                           
  2087                           ;main.c: 250:     unsigned char tiresBefore = 0;
  2088  00F560  0E00               	movlw	0
  2089  00F562  6F96               	movwf	start@tiresBefore& (0+255),b
  2090                           
  2091                           ;main.c: 251:     unsigned char tiresNeeded = 0;
  2092  00F564  0E00               	movlw	0
  2093  00F566  6F92               	movwf	start@tiresNeeded& (0+255),b
  2094                           
  2095                           ;main.c: 252:     unsigned char currentTires = 0;
  2096  00F568  0E00               	movlw	0
  2097  00F56A  6F95               	movwf	start@currentTires& (0+255),b
  2098                           
  2099                           ;main.c: 253:     _Bool tireInCell = 1;
  2100  00F56C  0E01               	movlw	1
  2101  00F56E  6F93               	movwf	start@tireInCell& (0+255),b
  2102                           
  2103                           ;main.c: 254:     unsigned char currentPole = 0;
  2104  00F570  0E00               	movlw	0
  2105  00F572  6F97               	movwf	start@currentPole& (0+255),b
  2106                           
  2107                           ;main.c: 255:     _Bool armReached = 1;
  2108  00F574  0E01               	movlw	1
  2109  00F576  6F90               	movwf	start@armReached& (0+255),b
  2110                           
  2111                           ;main.c: 256:  _Bool bottomMagPushed = 1;
  2112  00F578  0E01               	movlw	1
  2113  00F57A  6F91               	movwf	start@bottomMagPushed& (0+255),b
  2114                           
  2115                           ;main.c: 257:  _Bool tireOnBottomRamp = 1;
  2116  00F57C  0E01               	movlw	1
  2117  00F57E  6F94               	movwf	start@tireOnBottomRamp& (0+255),b
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;main.c: 259:     currentRun->totalPoleNum = 0;
  2121  00F580  C074  FFD9         	movff	start@currentRun,fsr2l
  2122  00F584  C075  FFDA         	movff	start@currentRun+1,fsr2h
  2123  00F588  0E00               	movlw	0
  2124  00F58A  6EDF               	movwf	indf2,c
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;main.c: 260:     LATCbits.LATC1 = 1;
  2128  00F58C  828B               	bsf	3979,1,c	;volatile
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;main.c: 261:     TRISB = 0x00;
  2132  00F58E  0E00               	movlw	0
  2133  00F590  6E93               	movwf	3987,c	;volatile
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;main.c: 262:     LATB = 0x00;
  2137  00F592  0E00               	movlw	0
  2138  00F594  6E8A               	movwf	3978,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;main.c: 263:  { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  2142  00F596  0E01               	movlw	1
  2143  00F598  ECEA  F061         	call	_lcdInst
  2144  00F59C  0E11               	movlw	17
  2145  00F59E  0100               	movlb	0	; () banked
  2146  00F5A0  6F80               	movwf	??_start& (0+255),b
  2147  00F5A2  0E3A               	movlw	58
  2148  00F5A4                     u6157:
  2149  00F5A4  2EE8               	decfsz	wreg,f,c
  2150  00F5A6  D7FE               	bra	u6157
  2151  00F5A8  2F80               	decfsz	??_start& (0+255),f,b
  2152  00F5AA  D7FC               	bra	u6157
  2153  00F5AC  F000               	nop	
  2154                           
  2155                           ;main.c: 265:     writeByteToDriveArduino(1);
  2156  00F5AE  0E01               	movlw	1
  2157  00F5B0  ECA5  F062         	call	_writeByteToDriveArduino
  2158                           
  2159                           ;main.c: 266:  LATCbits.LATC5 = 0;
  2160  00F5B4  9A8B               	bcf	3979,5,c	;volatile
  2161  00F5B6                     l216:
  2162                           
  2163                           ;main.c: 269:         if ((*topMagTires <= 0) && (*bottomMagTires <= 0) && !tireInCell &
      +                          & !tireOnBottomRamp){
  2164  00F5B6  C076  FFD9         	movff	start@topMagTires,fsr2l
  2165  00F5BA  C077  FFDA         	movff	start@topMagTires+1,fsr2h
  2166  00F5BE  50DF               	movf	indf2,w,c
  2167  00F5C0  A4D8               	btfss	status,2,c
  2168  00F5C2  D015               	goto	l217
  2169  00F5C4  C078  FFD9         	movff	start@bottomMagTires,fsr2l
  2170  00F5C8  C079  FFDA         	movff	start@bottomMagTires+1,fsr2h
  2171  00F5CC  50DF               	movf	indf2,w,c
  2172  00F5CE  A4D8               	btfss	status,2,c
  2173  00F5D0  D00E               	goto	l217
  2174  00F5D2  0100               	movlb	0	; () banked
  2175  00F5D4  5193               	movf	start@tireInCell& (0+255),w,b
  2176  00F5D6  A4D8               	btfss	status,2,c
  2177  00F5D8  D00A               	goto	l217
  2178                           
  2179                           ; BSR set to: 0
  2180  00F5DA  5194               	movf	start@tireOnBottomRamp& (0+255),w,b
  2181  00F5DC  A4D8               	btfss	status,2,c
  2182  00F5DE  D007               	goto	l217
  2183  00F5E0                     u5290:
  2184                           
  2185                           ;main.c: 270:             *menu = 2;
  2186  00F5E0  C072  FFD9         	movff	start@menu,fsr2l
  2187  00F5E4  C073  FFDA         	movff	start@menu+1,fsr2h
  2188  00F5E8  0E02               	movlw	2
  2189  00F5EA  6EDF               	movwf	indf2,c
  2190  00F5EC  0012               	return	
  2191  00F5EE                     l217:
  2192                           
  2193                           ;main.c: 275:         if (PORTCbits.RC0){
  2194  00F5EE  B082               	btfsc	3970,0,c	;volatile
  2195  00F5F0  D7F7               	goto	u5290
  2196                           
  2197                           ;main.c: 281:         writeByteToDriveArduino(2);
  2198  00F5F2  0E02               	movlw	2
  2199  00F5F4  ECA5  F062         	call	_writeByteToDriveArduino
  2200                           
  2201                           ;main.c: 282:         _delay((unsigned long)((350)*(10000000/4000.0)));
  2202  00F5F8  0E05               	movlw	5
  2203  00F5FA  0100               	movlb	0	; () banked
  2204  00F5FC  6F81               	movwf	(??_start+1)& (0+255),b
  2205  00F5FE  0E71               	movlw	113
  2206  00F600  6F80               	movwf	??_start& (0+255),b
  2207  00F602  0E57               	movlw	87
  2208  00F604                     u6167:
  2209  00F604  2EE8               	decfsz	wreg,f,c
  2210  00F606  D7FE               	bra	u6167
  2211  00F608  2F80               	decfsz	??_start& (0+255),f,b
  2212  00F60A  D7FC               	bra	u6167
  2213  00F60C  2F81               	decfsz	(??_start+1)& (0+255),f,b
  2214  00F60E  D7FA               	bra	u6167
  2215  00F610  D000               	nop2	
  2216                           
  2217                           ;main.c: 284:         LATAbits.LATA4 = 1;
  2218  00F612  8889               	bsf	3977,4,c	;volatile
  2219                           
  2220                           ;main.c: 285:         _delay((unsigned long)((5)*(10000000/4000.0)));
  2221  00F614  0E11               	movlw	17
  2222  00F616  0100               	movlb	0	; () banked
  2223  00F618  6F80               	movwf	??_start& (0+255),b
  2224  00F61A  0E3A               	movlw	58
  2225  00F61C                     u6177:
  2226  00F61C  2EE8               	decfsz	wreg,f,c
  2227  00F61E  D7FE               	bra	u6177
  2228  00F620  2F80               	decfsz	??_start& (0+255),f,b
  2229  00F622  D7FC               	bra	u6177
  2230  00F624  F000               	nop	
  2231                           
  2232                           ;main.c: 286:         LATAbits.LATA4 = 0;
  2233  00F626  9889               	bcf	3977,4,c	;volatile
  2234                           
  2235                           ;main.c: 288:         if (PORTCbits.RC0){
  2236  00F628  B082               	btfsc	3970,0,c	;volatile
  2237  00F62A  D036               	goto	u5370
  2238                           
  2239                           ;main.c: 294:         if (!tireInCell && !tireOnBottomRamp){
  2240                           
  2241                           ;main.c: 289:             LATCbits.LATC5 = 1;
  2242  00F62C  0100               	movlb	0	; () banked
  2243  00F62E  5193               	movf	start@tireInCell& (0+255),w,b
  2244  00F630  A4D8               	btfss	status,2,c
  2245  00F632  D030               	goto	l5609
  2246                           
  2247                           ; BSR set to: 0
  2248  00F634  5194               	movf	start@tireOnBottomRamp& (0+255),w,b
  2249  00F636  A4D8               	btfss	status,2,c
  2250  00F638  D02D               	goto	l5609
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;main.c: 295:             if (*bottomMagTires > 0){
  2254  00F63A  C078  FFD9         	movff	start@bottomMagTires,fsr2l
  2255  00F63E  C079  FFDA         	movff	start@bottomMagTires+1,fsr2h
  2256  00F642  50DF               	movf	indf2,w,c
  2257  00F644  B4D8               	btfsc	status,2,c
  2258  00F646  D00F               	goto	l5601
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;main.c: 296:                 bottomMagStepper(singleTireSteps, 1);
  2262  00F648  0E0F               	movlw	15
  2263  00F64A  6E12               	movwf	bottomMagStepper@steps+1,c
  2264  00F64C  0E55               	movlw	85
  2265  00F64E  6E11               	movwf	bottomMagStepper@steps,c
  2266  00F650  0E01               	movlw	1
  2267  00F652  6E13               	movwf	bottomMagStepper@forward,c
  2268  00F654  EC85  F067         	call	_bottomMagStepper	;wreg free
  2269                           
  2270                           ;main.c: 297:                 (*bottomMagTires)--;
  2271  00F658  C078  FFD9         	movff	start@bottomMagTires,fsr2l
  2272  00F65C  C079  FFDA         	movff	start@bottomMagTires+1,fsr2h
  2273  00F660  06DF               	decf	indf2,f,c
  2274                           
  2275                           ;main.c: 298:     bottomMagPushed = 1;
  2276  00F662  0E01               	movlw	1
  2277  00F664  D015               	goto	L1
  2278  00F666                     l5601:
  2279                           
  2280                           ; BSR set to: 0
  2281  00F666  C076  FFD9         	movff	start@topMagTires,fsr2l
  2282  00F66A  C077  FFDA         	movff	start@topMagTires+1,fsr2h
  2283  00F66E  50DF               	movf	indf2,w,c
  2284  00F670  B4D8               	btfsc	status,2,c
  2285  00F672  D010               	goto	l5609
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;main.c: 300:                 topMagStepper(singleTireSteps, 1);
  2289  00F674  0E0F               	movlw	15
  2290  00F676  6E12               	movwf	topMagStepper@steps+1,c
  2291  00F678  0E55               	movlw	85
  2292  00F67A  6E11               	movwf	topMagStepper@steps,c
  2293  00F67C  0E01               	movlw	1
  2294  00F67E  6E13               	movwf	topMagStepper@forward,c
  2295  00F680  ECF8  F067         	call	_topMagStepper	;wreg free
  2296                           
  2297                           ;main.c: 301:                 (*topMagTires)--;
  2298  00F684  C076  FFD9         	movff	start@topMagTires,fsr2l
  2299  00F688  C077  FFDA         	movff	start@topMagTires+1,fsr2h
  2300  00F68C  06DF               	decf	indf2,f,c
  2301                           
  2302                           ;main.c: 302:     bottomMagPushed = 0;
  2303  00F68E  0E00               	movlw	0
  2304  00F690                     L1:
  2305  00F690  0100               	movlb	0	; () banked
  2306  00F692  6F91               	movwf	start@bottomMagPushed& (0+255),b
  2307  00F694                     l5609:
  2308                           
  2309                           ;main.c: 314:             if (PORTCbits.RC0){
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;main.c: 307:             LATCbits.LATC5 = 1;
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;main.c: 306:         if (PORTCbits.RC0){
  2316  00F694  A082               	btfss	3970,0,c	;volatile
  2317  00F696  D002               	goto	l226
  2318  00F698                     u5370:
  2319                           
  2320                           ;main.c: 315:                 LATCbits.LATC5 = 1;
  2321  00F698  8A8B               	bsf	3979,5,c	;volatile
  2322  00F69A  D7A2               	goto	u5290
  2323  00F69C                     l226:
  2324                           
  2325                           ;main.c: 313:         while (!PORTAbits.RA5){
  2326  00F69C  AA80               	btfss	3968,5,c	;volatile
  2327  00F69E  D7FA               	goto	l5609
  2328                           
  2329                           ;main.c: 322:   (currentRun->totalPoleNum)++;
  2330  00F6A0  C074  FFD9         	movff	start@currentRun,fsr2l
  2331  00F6A4  C075  FFDA         	movff	start@currentRun+1,fsr2h
  2332  00F6A8  2ADF               	incf	indf2,f,c
  2333                           
  2334                           ;main.c: 323:   currentPole = currentRun->totalPoleNum - 1;
  2335  00F6AA  C074  FFD9         	movff	start@currentRun,fsr2l
  2336  00F6AE  C075  FFDA         	movff	start@currentRun+1,fsr2h
  2337  00F6B2  50DF               	movf	indf2,w,c
  2338  00F6B4  0100               	movlb	0	; () banked
  2339  00F6B6  6F80               	movwf	??_start& (0+255),b
  2340  00F6B8  0580               	decf	??_start& (0+255),w,b
  2341  00F6BA  6F97               	movwf	start@currentPole& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;main.c: 326:   I2C_Master_Start();
  2345  00F6BC  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  2346                           
  2347                           ;main.c: 327:   I2C_Master_Write(0b00010001);
  2348  00F6C0  0E00               	movlw	0
  2349  00F6C2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2350  00F6C4  0E11               	movlw	17
  2351  00F6C6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2352  00F6C8  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  2353                           
  2354                           ;main.c: 328:   distTravelled = ((I2C_Master_Read(0) << 8) & 0xff00) | (I2C_Master_Read(
      +                          1) & 0xff);
  2355  00F6CC  0E00               	movlw	0
  2356  00F6CE  0100               	movlb	0	; () banked
  2357  00F6D0  6F80               	movwf	??_start& (0+255),b
  2358  00F6D2  0EFF               	movlw	255
  2359  00F6D4  6F81               	movwf	(??_start+1)& (0+255),b
  2360  00F6D6  0E00               	movlw	0
  2361  00F6D8  EC30  F062         	call	_I2C_Master_Read
  2362  00F6DC  0100               	movlb	0	; () banked
  2363  00F6DE  6F82               	movwf	(??_start+2)& (0+255),b
  2364  00F6E0  5182               	movf	(??_start+2)& (0+255),w,b
  2365  00F6E2  6F84               	movwf	(??_start+4)& (0+255),b
  2366  00F6E4  6B83               	clrf	(??_start+3)& (0+255),b
  2367  00F6E6  5180               	movf	??_start& (0+255),w,b
  2368  00F6E8  1783               	andwf	(??_start+3)& (0+255),f,b
  2369  00F6EA  5181               	movf	(??_start+1)& (0+255),w,b
  2370  00F6EC  1784               	andwf	(??_start+4)& (0+255),f,b
  2371  00F6EE  0E01               	movlw	1
  2372  00F6F0  EC30  F062         	call	_I2C_Master_Read
  2373  00F6F4  0100               	movlb	0	; () banked
  2374  00F6F6  6F85               	movwf	(??_start+5)& (0+255),b
  2375  00F6F8  5185               	movf	(??_start+5)& (0+255),w,b
  2376  00F6FA  1183               	iorwf	(??_start+3)& (0+255),w,b
  2377  00F6FC  6F8E               	movwf	start@distTravelled& (0+255),b
  2378  00F6FE  5184               	movf	(??_start+4)& (0+255),w,b
  2379  00F700  6F8F               	movwf	(start@distTravelled+1)& (0+255),b
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;main.c: 329:   I2C_Master_Stop();
  2383  00F702  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  2384                           
  2385                           ;main.c: 330:   floatDistTravelled = distTravelled * 0.469 - 8.7;
  2386  00F706  0EC5               	movlw	197
  2387  00F708  6E13               	movwf	___flmul@a,c
  2388  00F70A  0E20               	movlw	32
  2389  00F70C  6E14               	movwf	___flmul@a+1,c
  2390  00F70E  0EF0               	movlw	240
  2391  00F710  6E15               	movwf	___flmul@a+2,c
  2392  00F712  0E3E               	movlw	62
  2393  00F714  6E16               	movwf	___flmul@a+3,c
  2394  00F716  C08E  F001         	movff	start@distTravelled,___xxtofl@val
  2395  00F71A  C08F  F002         	movff	start@distTravelled+1,___xxtofl@val+1
  2396  00F71E  6A03               	clrf	___xxtofl@val+2,c
  2397  00F720  6A04               	clrf	___xxtofl@val+3,c
  2398  00F722  0E00               	movlw	0
  2399  00F724  EC0B  F069         	call	___xxtofl
  2400  00F728  C001  F00F         	movff	?___xxtofl,___flmul@b
  2401  00F72C  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  2402  00F730  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  2403  00F734  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  2404  00F738  EC9B  F073         	call	___flmul	;wreg free
  2405  00F73C  C00F  F028         	movff	?___flmul,___fladd@b
  2406  00F740  C010  F029         	movff	?___flmul+1,___fladd@b+1
  2407  00F744  C011  F02A         	movff	?___flmul+2,___fladd@b+2
  2408  00F748  C012  F02B         	movff	?___flmul+3,___fladd@b+3
  2409  00F74C  0E33               	movlw	51
  2410  00F74E  6E2C               	movwf	___fladd@a,c
  2411  00F750  0E33               	movlw	51
  2412  00F752  6E2D               	movwf	___fladd@a+1,c
  2413  00F754  0E0B               	movlw	11
  2414  00F756  6E2E               	movwf	___fladd@a+2,c
  2415  00F758  0EC1               	movlw	193
  2416  00F75A  6E2F               	movwf	___fladd@a+3,c
  2417  00F75C  EC15  F072         	call	___fladd	;wreg free
  2418  00F760  C028  F08A         	movff	?___fladd,start@floatDistTravelled
  2419  00F764  C029  F08B         	movff	?___fladd+1,start@floatDistTravelled+1
  2420  00F768  C02A  F08C         	movff	?___fladd+2,start@floatDistTravelled+2
  2421  00F76C  C02B  F08D         	movff	?___fladd+3,start@floatDistTravelled+3
  2422                           
  2423                           ;main.c: 331:   currentRun->poleArray[currentPole].dist = (unsigned int)(floatDistTravel
      +                          led*10);
  2424  00F770  0E00               	movlw	0
  2425  00F772  6E13               	movwf	___flmul@a,c
  2426  00F774  0E00               	movlw	0
  2427  00F776  6E14               	movwf	___flmul@a+1,c
  2428  00F778  0E20               	movlw	32
  2429  00F77A  6E15               	movwf	___flmul@a+2,c
  2430  00F77C  0E41               	movlw	65
  2431  00F77E  6E16               	movwf	___flmul@a+3,c
  2432  00F780  C08A  F00F         	movff	start@floatDistTravelled,___flmul@b
  2433  00F784  C08B  F010         	movff	start@floatDistTravelled+1,___flmul@b+1
  2434  00F788  C08C  F011         	movff	start@floatDistTravelled+2,___flmul@b+2
  2435  00F78C  C08D  F012         	movff	start@floatDistTravelled+3,___flmul@b+3
  2436  00F790  EC9B  F073         	call	___flmul	;wreg free
  2437  00F794  C00F  F028         	movff	?___flmul,___fltol@f1
  2438  00F798  C010  F029         	movff	?___flmul+1,___fltol@f1+1
  2439  00F79C  C011  F02A         	movff	?___flmul+2,___fltol@f1+2
  2440  00F7A0  C012  F02B         	movff	?___flmul+3,___fltol@f1+3
  2441  00F7A4  EC5D  F066         	call	___fltol	;wreg free
  2442  00F7A8  0100               	movlb	0	; () banked
  2443  00F7AA  5197               	movf	start@currentPole& (0+255),w,b
  2444  00F7AC  0D04               	mullw	4
  2445  00F7AE  C074  F080         	movff	start@currentRun,??_start
  2446  00F7B2  C075  F081         	movff	start@currentRun+1,??_start+1
  2447  00F7B6  50F3               	movf	prodl,w,c
  2448  00F7B8  2780               	addwf	??_start& (0+255),f,b
  2449  00F7BA  50F4               	movf	prodh,w,c
  2450  00F7BC  2381               	addwfc	(??_start+1)& (0+255),f,b
  2451  00F7BE  0E05               	movlw	5
  2452  00F7C0  2580               	addwf	??_start& (0+255),w,b
  2453  00F7C2  6ED9               	movwf	fsr2l,c
  2454  00F7C4  0E00               	movlw	0
  2455  00F7C6  2181               	addwfc	(??_start+1)& (0+255),w,b
  2456  00F7C8  6EDA               	movwf	fsr2h,c
  2457  00F7CA  C028  FFDE         	movff	?___fltol,postinc2
  2458  00F7CE  C029  FFDD         	movff	?___fltol+1,postdec2
  2459                           
  2460                           ; BSR set to: 0
  2461  00F7D2  0E80               	movlw	128
  2462  00F7D4  ECEA  F061         	call	_lcdInst
  2463                           
  2464                           ;main.c: 333:   printf("Distance: %hu.%hucm", currentRun->poleArray[currentPole].dist/10
      +                          , currentRun->poleArray[currentPole].dist%10);
  2465  00F7D8  0EDD               	movlw	low STR_5
  2466  00F7DA  6E66               	movwf	printf@fmt,c
  2467  00F7DC  0EFD               	movlw	high STR_5
  2468  00F7DE  6E67               	movwf	printf@fmt+1,c
  2469  00F7E0  0100               	movlb	0	; () banked
  2470  00F7E2  5197               	movf	start@currentPole& (0+255),w,b
  2471  00F7E4  0D04               	mullw	4
  2472  00F7E6  C074  F080         	movff	start@currentRun,??_start
  2473  00F7EA  C075  F081         	movff	start@currentRun+1,??_start+1
  2474  00F7EE  50F3               	movf	prodl,w,c
  2475  00F7F0  2780               	addwf	??_start& (0+255),f,b
  2476  00F7F2  50F4               	movf	prodh,w,c
  2477  00F7F4  2381               	addwfc	(??_start+1)& (0+255),f,b
  2478  00F7F6  0E05               	movlw	5
  2479  00F7F8  2580               	addwf	??_start& (0+255),w,b
  2480  00F7FA  6ED9               	movwf	fsr2l,c
  2481  00F7FC  0E00               	movlw	0
  2482  00F7FE  2181               	addwfc	(??_start+1)& (0+255),w,b
  2483  00F800  6EDA               	movwf	fsr2h,c
  2484  00F802  CFDE F001          	movff	postinc2,___lwdiv@dividend
  2485  00F806  CFDD F002          	movff	postdec2,___lwdiv@dividend+1
  2486  00F80A  0E00               	movlw	0
  2487  00F80C  6E04               	movwf	___lwdiv@divisor+1,c
  2488  00F80E  0E0A               	movlw	10
  2489  00F810  6E03               	movwf	___lwdiv@divisor,c
  2490  00F812  ECBC  F063         	call	___lwdiv	;wreg free
  2491  00F816  C001  F068         	movff	?___lwdiv,?_printf+2
  2492  00F81A  C002  F069         	movff	?___lwdiv+1,?_printf+3
  2493  00F81E  0100               	movlb	0	; () banked
  2494  00F820  5197               	movf	start@currentPole& (0+255),w,b
  2495  00F822  0D04               	mullw	4
  2496  00F824  C074  F082         	movff	start@currentRun,??_start+2
  2497  00F828  C075  F083         	movff	start@currentRun+1,??_start+3
  2498  00F82C  50F3               	movf	prodl,w,c
  2499  00F82E  2782               	addwf	(??_start+2)& (0+255),f,b
  2500  00F830  50F4               	movf	prodh,w,c
  2501  00F832  2383               	addwfc	(??_start+3)& (0+255),f,b
  2502  00F834  0E05               	movlw	5
  2503  00F836  2582               	addwf	(??_start+2)& (0+255),w,b
  2504  00F838  6ED9               	movwf	fsr2l,c
  2505  00F83A  0E00               	movlw	0
  2506  00F83C  2183               	addwfc	(??_start+3)& (0+255),w,b
  2507  00F83E  6EDA               	movwf	fsr2h,c
  2508  00F840  CFDE F001          	movff	postinc2,___lwmod@dividend
  2509  00F844  CFDD F002          	movff	postdec2,___lwmod@dividend+1
  2510  00F848  0E00               	movlw	0
  2511  00F84A  6E04               	movwf	___lwmod@divisor+1,c
  2512  00F84C  0E0A               	movlw	10
  2513  00F84E  6E03               	movwf	___lwmod@divisor,c
  2514  00F850  EC76  F063         	call	___lwmod	;wreg free
  2515  00F854  C001  F06A         	movff	?___lwmod,?_printf+4
  2516  00F858  C002  F06B         	movff	?___lwmod+1,?_printf+5
  2517  00F85C  EC55  F062         	call	_printf	;wreg free
  2518                           
  2519                           ;main.c: 335:   currentRun->poleArray[currentPole].tiresAfter = 0;
  2520  00F860  0100               	movlb	0	; () banked
  2521  00F862  5197               	movf	start@currentPole& (0+255),w,b
  2522  00F864  0D04               	mullw	4
  2523  00F866  C074  F080         	movff	start@currentRun,??_start
  2524  00F86A  C075  F081         	movff	start@currentRun+1,??_start+1
  2525  00F86E  50F3               	movf	prodl,w,c
  2526  00F870  2780               	addwf	??_start& (0+255),f,b
  2527  00F872  50F4               	movf	prodh,w,c
  2528  00F874  2381               	addwfc	(??_start+1)& (0+255),f,b
  2529  00F876  0E04               	movlw	4
  2530  00F878  2580               	addwf	??_start& (0+255),w,b
  2531  00F87A  6ED9               	movwf	fsr2l,c
  2532  00F87C  0E00               	movlw	0
  2533  00F87E  2181               	addwfc	(??_start+1)& (0+255),w,b
  2534  00F880  6EDA               	movwf	fsr2h,c
  2535  00F882  0E00               	movlw	0
  2536  00F884  6EDF               	movwf	indf2,c
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;main.c: 336:   currentRun->poleArray[currentPole].tiresDeployed = 0;
  2540  00F886  5197               	movf	start@currentPole& (0+255),w,b
  2541  00F888  0D04               	mullw	4
  2542  00F88A  C074  F080         	movff	start@currentRun,??_start
  2543  00F88E  C075  F081         	movff	start@currentRun+1,??_start+1
  2544  00F892  50F3               	movf	prodl,w,c
  2545  00F894  2780               	addwf	??_start& (0+255),f,b
  2546  00F896  50F4               	movf	prodh,w,c
  2547  00F898  2381               	addwfc	(??_start+1)& (0+255),f,b
  2548  00F89A  0E03               	movlw	3
  2549  00F89C  2580               	addwf	??_start& (0+255),w,b
  2550  00F89E  6ED9               	movwf	fsr2l,c
  2551  00F8A0  0E00               	movlw	0
  2552  00F8A2  2181               	addwfc	(??_start+1)& (0+255),w,b
  2553  00F8A4  6EDA               	movwf	fsr2h,c
  2554  00F8A6  0E00               	movlw	0
  2555  00F8A8  6EDF               	movwf	indf2,c
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 338:         _delay((unsigned long)((100)*(10000000/4000000.0)));
  2559  00F8AA  0E53               	movlw	83
  2560  00F8AC                     u6187:
  2561  00F8AC  2EE8               	decfsz	wreg,f,c
  2562  00F8AE  D7FE               	bra	u6187
  2563  00F8B0  F000               	nop	
  2564                           
  2565                           ;main.c: 339:         if (PORTCbits.RC0){
  2566  00F8B2  B082               	btfsc	3970,0,c	;volatile
  2567  00F8B4  D695               	goto	u5290
  2568                           
  2569                           ;main.c: 345:   if (!tireInCell){
  2570  00F8B6  0100               	movlb	0	; () banked
  2571  00F8B8  5193               	movf	start@tireInCell& (0+255),w,b
  2572  00F8BA  A4D8               	btfss	status,2,c
  2573  00F8BC  D03D               	goto	l5681
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;main.c: 346:    if (tireOnBottomRamp){
  2577  00F8BE  5194               	movf	start@tireOnBottomRamp& (0+255),w,b
  2578  00F8C0  B4D8               	btfsc	status,2,c
  2579  00F8C2  D00F               	goto	l5667
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 347:     LATEbits.LATE2 = 1;
  2583  00F8C4  848D               	bsf	3981,2,c	;volatile
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 348:     _delay((unsigned long)((10)*(10000000/4000.0)));
  2587  00F8C6  0E21               	movlw	33
  2588  00F8C8  0100               	movlb	0	; () banked
  2589  00F8CA  6F80               	movwf	??_start& (0+255),b
  2590  00F8CC  0E76               	movlw	118
  2591  00F8CE                     u6197:
  2592  00F8CE  2EE8               	decfsz	wreg,f,c
  2593  00F8D0  D7FE               	bra	u6197
  2594  00F8D2  2F80               	decfsz	??_start& (0+255),f,b
  2595  00F8D4  D7FC               	bra	u6197
  2596  00F8D6  F000               	nop	
  2597                           
  2598                           ;main.c: 349:     LATEbits.LATE2 = 0;
  2599  00F8D8  948D               	bcf	3981,2,c	;volatile
  2600                           
  2601                           ;main.c: 350:     tireOnBottomRamp = 0;
  2602  00F8DA  0E00               	movlw	0
  2603  00F8DC  0100               	movlb	0	; () banked
  2604  00F8DE  6F94               	movwf	start@tireOnBottomRamp& (0+255),b
  2605                           
  2606                           ;main.c: 351:    } else if (bottomMagPushed){
  2607  00F8E0  D01A               	goto	l233
  2608  00F8E2                     l5667:
  2609                           
  2610                           ; BSR set to: 0
  2611  00F8E2  5191               	movf	start@bottomMagPushed& (0+255),w,b
  2612  00F8E4  B4D8               	btfsc	status,2,c
  2613  00F8E6  D00C               	goto	l234
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 352:     LATEbits.LATE2 = 1;
  2617  00F8E8  848D               	bsf	3981,2,c	;volatile
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;main.c: 353:     _delay((unsigned long)((10)*(10000000/4000.0)));
  2621  00F8EA  0E21               	movlw	33
  2622  00F8EC  0100               	movlb	0	; () banked
  2623  00F8EE  6F80               	movwf	??_start& (0+255),b
  2624  00F8F0  0E76               	movlw	118
  2625  00F8F2                     u6207:
  2626  00F8F2  2EE8               	decfsz	wreg,f,c
  2627  00F8F4  D7FE               	bra	u6207
  2628  00F8F6  2F80               	decfsz	??_start& (0+255),f,b
  2629  00F8F8  D7FC               	bra	u6207
  2630  00F8FA  F000               	nop	
  2631                           
  2632                           ;main.c: 354:     LATEbits.LATE2 = 0;
  2633  00F8FC  948D               	bcf	3981,2,c	;volatile
  2634                           
  2635                           ;main.c: 355:    } else {
  2636  00F8FE  D00B               	goto	l233
  2637  00F900                     l234:
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 356:     LATDbits.LATD1 = 1;
  2641  00F900  828C               	bsf	3980,1,c	;volatile
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;main.c: 357:     _delay((unsigned long)((10)*(10000000/4000.0)));
  2645  00F902  0E21               	movlw	33
  2646  00F904  0100               	movlb	0	; () banked
  2647  00F906  6F80               	movwf	??_start& (0+255),b
  2648  00F908  0E76               	movlw	118
  2649  00F90A                     u6217:
  2650  00F90A  2EE8               	decfsz	wreg,f,c
  2651  00F90C  D7FE               	bra	u6217
  2652  00F90E  2F80               	decfsz	??_start& (0+255),f,b
  2653  00F910  D7FC               	bra	u6217
  2654  00F912  F000               	nop	
  2655                           
  2656                           ;main.c: 358:     LATDbits.LATD1 = 0;
  2657  00F914  928C               	bcf	3980,1,c	;volatile
  2658  00F916                     l233:
  2659                           
  2660                           ;main.c: 360:    _delay((unsigned long)((2050)*(10000000/4000.0)));
  2661  00F916  0E1A               	movlw	26
  2662  00F918  0100               	movlb	0	; () banked
  2663  00F91A  6F81               	movwf	(??_start+1)& (0+255),b
  2664  00F91C  0E00               	movlw	0
  2665  00F91E  6F80               	movwf	??_start& (0+255),b
  2666  00F920  0EC4               	movlw	196
  2667  00F922                     u6227:
  2668  00F922  2EE8               	decfsz	wreg,f,c
  2669  00F924  D7FE               	bra	u6227
  2670  00F926  2F80               	decfsz	??_start& (0+255),f,b
  2671  00F928  D7FC               	bra	u6227
  2672  00F92A  2F81               	decfsz	(??_start+1)& (0+255),f,b
  2673  00F92C  D7FA               	bra	u6227
  2674  00F92E  D000               	nop2	
  2675  00F930  F000               	nop	
  2676                           
  2677                           ;main.c: 361:    tireInCell = 1;
  2678  00F932  0E01               	movlw	1
  2679  00F934  0100               	movlb	0	; () banked
  2680  00F936  6F93               	movwf	start@tireInCell& (0+255),b
  2681  00F938                     l5681:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 364:         LATAbits.LATA3 = 0;
  2685  00F938  9689               	bcf	3977,3,c	;volatile
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 366:         _delay((unsigned long)((100)*(10000000/4000000.0)));
  2689  00F93A  0E53               	movlw	83
  2690  00F93C                     u6237:
  2691  00F93C  2EE8               	decfsz	wreg,f,c
  2692  00F93E  D7FE               	bra	u6237
  2693  00F940  F000               	nop	
  2694                           
  2695                           ;main.c: 367:         if (PORTCbits.RC0){
  2696  00F942  B082               	btfsc	3970,0,c	;volatile
  2697  00F944  D64D               	goto	u5290
  2698                           
  2699                           ;main.c: 373:         writeByteToDriveArduino(4);
  2700  00F946  0E04               	movlw	4
  2701  00F948  ECA5  F062         	call	_writeByteToDriveArduino
  2702                           
  2703                           ;main.c: 374:         _delay((unsigned long)((500)*(10000000/4000.0)));
  2704  00F94C  0E07               	movlw	7
  2705  00F94E  0100               	movlb	0	; () banked
  2706  00F950  6F81               	movwf	(??_start+1)& (0+255),b
  2707  00F952  0E58               	movlw	88
  2708  00F954  6F80               	movwf	??_start& (0+255),b
  2709  00F956  0E59               	movlw	89
  2710  00F958                     u6247:
  2711  00F958  2EE8               	decfsz	wreg,f,c
  2712  00F95A  D7FE               	bra	u6247
  2713  00F95C  2F80               	decfsz	??_start& (0+255),f,b
  2714  00F95E  D7FC               	bra	u6247
  2715  00F960  2F81               	decfsz	(??_start+1)& (0+255),f,b
  2716  00F962  D7FA               	bra	u6247
  2717  00F964  D000               	nop2	
  2718                           
  2719                           ;main.c: 376:         armReached = 1;
  2720  00F966  0E01               	movlw	1
  2721  00F968  0100               	movlb	0	; () banked
  2722  00F96A  6F90               	movwf	start@armReached& (0+255),b
  2723                           
  2724                           ;main.c: 378:         while (PORTAbits.RA2){
  2725  00F96C  D008               	goto	l237
  2726  00F96E                     l238:
  2727                           
  2728                           ;main.c: 379:             if (!PORTCbits.RC2){
  2729  00F96E  B482               	btfsc	3970,2,c	;volatile
  2730  00F970  D004               	goto	l239
  2731                           
  2732                           ;main.c: 380:                 armReached = 0;
  2733  00F972  0E00               	movlw	0
  2734  00F974  0100               	movlb	0	; () banked
  2735  00F976  6F90               	movwf	start@armReached& (0+255),b
  2736                           
  2737                           ;main.c: 381:                 break;
  2738  00F978  D004               	goto	u5460
  2739  00F97A                     l239:
  2740                           
  2741                           ;main.c: 383:             if (PORTCbits.RC0){
  2742  00F97A  B082               	btfsc	3970,0,c	;volatile
  2743  00F97C  D631               	goto	u5290
  2744  00F97E                     l237:
  2745                           
  2746                           ;main.c: 378:         while (PORTAbits.RA2){
  2747  00F97E  B480               	btfsc	3968,2,c	;volatile
  2748  00F980  D7F6               	goto	l238
  2749  00F982                     u5460:
  2750                           
  2751                           ;main.c: 388:         LATAbits.LATA3 = 1;
  2752  00F982  8689               	bsf	3977,3,c	;volatile
  2753                           
  2754                           ;main.c: 390:         _delay((unsigned long)((100)*(10000000/4000000.0)));
  2755  00F984  0E53               	movlw	83
  2756  00F986                     u6257:
  2757  00F986  2EE8               	decfsz	wreg,f,c
  2758  00F988  D7FE               	bra	u6257
  2759  00F98A  F000               	nop	
  2760                           
  2761                           ;main.c: 391:         if (PORTCbits.RC0){
  2762  00F98C  B082               	btfsc	3970,0,c	;volatile
  2763  00F98E  D628               	goto	u5290
  2764  00F990                     l243:
  2765  00F990  B482               	btfsc	3970,2,c	;volatile
  2766  00F992  D7FE               	goto	l243
  2767                           
  2768                           ;main.c: 398:         if (armReached){
  2769  00F994  0100               	movlb	0	; () banked
  2770  00F996  5190               	movf	start@armReached& (0+255),w,b
  2771  00F998  B4D8               	btfsc	status,2,c
  2772  00F99A  D203               	goto	l5853
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;main.c: 399:             if (!PORTEbits.RE1){
  2776  00F99C  B284               	btfsc	3972,1,c	;volatile
  2777  00F99E  D002               	goto	l247
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;main.c: 400:                 tiresBefore = 2;
  2781  00F9A0  0E02               	movlw	2
  2782  00F9A2  D005               	goto	L2
  2783  00F9A4                     l247:
  2784                           
  2785                           ; BSR set to: 0
  2786  00F9A4  B084               	btfsc	3972,0,c	;volatile
  2787  00F9A6  D002               	goto	l5719
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;main.c: 402:                 tiresBefore = 1;
  2791  00F9A8  0E01               	movlw	1
  2792  00F9AA  D001               	goto	L2
  2793  00F9AC                     l5719:
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;main.c: 404:                 tiresBefore = 0;
  2797  00F9AC  0E00               	movlw	0
  2798  00F9AE                     L2:
  2799  00F9AE  6F96               	movwf	start@tiresBefore& (0+255),b
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 406:    { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  2803  00F9B0  0E01               	movlw	1
  2804  00F9B2  ECEA  F061         	call	_lcdInst
  2805  00F9B6  0E11               	movlw	17
  2806  00F9B8  0100               	movlb	0	; () banked
  2807  00F9BA  6F80               	movwf	??_start& (0+255),b
  2808  00F9BC  0E3A               	movlw	58
  2809  00F9BE                     u6267:
  2810  00F9BE  2EE8               	decfsz	wreg,f,c
  2811  00F9C0  D7FE               	bra	u6267
  2812  00F9C2  2F80               	decfsz	??_start& (0+255),f,b
  2813  00F9C4  D7FC               	bra	u6267
  2814  00F9C6  F000               	nop	
  2815  00F9C8  0EC0               	movlw	192
  2816  00F9CA  ECEA  F061         	call	_lcdInst
  2817                           
  2818                           ;main.c: 408:             printf("Before: %u", tiresBefore);
  2819  00F9CE  0E9C               	movlw	low STR_6
  2820  00F9D0  6E66               	movwf	printf@fmt,c
  2821  00F9D2  0EFF               	movlw	high STR_6
  2822  00F9D4  6E67               	movwf	printf@fmt+1,c
  2823  00F9D6  C096  F068         	movff	start@tiresBefore,?_printf+2
  2824  00F9DA  6A69               	clrf	?_printf+3,c
  2825  00F9DC  EC55  F062         	call	_printf	;wreg free
  2826                           
  2827                           ;main.c: 411:    if ((currentPole) == 0){
  2828  00F9E0  0100               	movlb	0	; () banked
  2829  00F9E2  5197               	movf	start@currentPole& (0+255),w,b
  2830  00F9E4  A4D8               	btfss	status,2,c
  2831  00F9E6  D002               	goto	l5733
  2832  00F9E8                     u5520:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 412:     tiresNeeded = 2;
  2836  00F9E8  0E02               	movlw	2
  2837  00F9EA  D03A               	goto	L3
  2838  00F9EC                     l5733:
  2839                           
  2840                           ; BSR set to: 0
  2841  00F9EC  5197               	movf	start@currentPole& (0+255),w,b
  2842  00F9EE  6F80               	movwf	??_start& (0+255),b
  2843  00F9F0  6B81               	clrf	(??_start+1)& (0+255),b
  2844  00F9F2  90D8               	bcf	status,0,c
  2845  00F9F4  3780               	rlcf	??_start& (0+255),f,b
  2846  00F9F6  3781               	rlcf	(??_start+1)& (0+255),f,b
  2847  00F9F8  90D8               	bcf	status,0,c
  2848  00F9FA  3780               	rlcf	??_start& (0+255),f,b
  2849  00F9FC  3781               	rlcf	(??_start+1)& (0+255),f,b
  2850  00F9FE  C074  F082         	movff	start@currentRun,??_start+2
  2851  00FA02  C075  F083         	movff	start@currentRun+1,??_start+3
  2852  00FA06  5180               	movf	??_start& (0+255),w,b
  2853  00FA08  2782               	addwf	(??_start+2)& (0+255),f,b
  2854  00FA0A  5181               	movf	(??_start+1)& (0+255),w,b
  2855  00FA0C  2383               	addwfc	(??_start+3)& (0+255),f,b
  2856  00FA0E  0E01               	movlw	1
  2857  00FA10  2582               	addwf	(??_start+2)& (0+255),w,b
  2858  00FA12  6ED9               	movwf	fsr2l,c
  2859  00FA14  0E00               	movlw	0
  2860  00FA16  2183               	addwfc	(??_start+3)& (0+255),w,b
  2861  00FA18  6EDA               	movwf	fsr2h,c
  2862  00FA1A  CFDE F084          	movff	postinc2,??_start+4
  2863  00FA1E  CFDD F085          	movff	postdec2,??_start+5
  2864  00FA22  5197               	movf	start@currentPole& (0+255),w,b
  2865  00FA24  0D04               	mullw	4
  2866  00FA26  C074  F086         	movff	start@currentRun,??_start+6
  2867  00FA2A  C075  F087         	movff	start@currentRun+1,??_start+7
  2868  00FA2E  50F3               	movf	prodl,w,c
  2869  00FA30  2786               	addwf	(??_start+6)& (0+255),f,b
  2870  00FA32  50F4               	movf	prodh,w,c
  2871  00FA34  2387               	addwfc	(??_start+7)& (0+255),f,b
  2872  00FA36  0E05               	movlw	5
  2873  00FA38  2586               	addwf	(??_start+6)& (0+255),w,b
  2874  00FA3A  6ED9               	movwf	fsr2l,c
  2875  00FA3C  0E00               	movlw	0
  2876  00FA3E  2187               	addwfc	(??_start+7)& (0+255),w,b
  2877  00FA40  6EDA               	movwf	fsr2h,c
  2878  00FA42  CFDE F088          	movff	postinc2,??_start+8
  2879  00FA46  CFDD F089          	movff	postdec2,??_start+9
  2880  00FA4A  5184               	movf	(??_start+4)& (0+255),w,b
  2881  00FA4C  5F88               	subwf	(??_start+8)& (0+255),f,b
  2882  00FA4E  5185               	movf	(??_start+5)& (0+255),w,b
  2883  00FA50  5B89               	subwfb	(??_start+9)& (0+255),f,b
  2884  00FA52  0E2C               	movlw	44
  2885  00FA54  5D88               	subwf	(??_start+8)& (0+255),w,b
  2886  00FA56  0E01               	movlw	1
  2887  00FA58  5989               	subwfb	(??_start+9)& (0+255),w,b
  2888  00FA5A  B0D8               	btfsc	status,0,c
  2889  00FA5C  D003               	goto	l5737
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 414:     tiresNeeded = 1;
  2893  00FA5E  0E01               	movlw	1
  2894  00FA60                     L3:
  2895  00FA60  6F92               	movwf	start@tiresNeeded& (0+255),b
  2896                           
  2897                           ;main.c: 415:    } else if ((currentRun->poleArray[currentPole].dist - currentRun->poleA
      +                          rray[currentPole - 1].dist) >= 300){
  2898  00FA62  D039               	goto	l5741
  2899  00FA64                     l5737:
  2900                           
  2901                           ; BSR set to: 0
  2902  00FA64  5197               	movf	start@currentPole& (0+255),w,b
  2903  00FA66  6F80               	movwf	??_start& (0+255),b
  2904  00FA68  6B81               	clrf	(??_start+1)& (0+255),b
  2905  00FA6A  90D8               	bcf	status,0,c
  2906  00FA6C  3780               	rlcf	??_start& (0+255),f,b
  2907  00FA6E  3781               	rlcf	(??_start+1)& (0+255),f,b
  2908  00FA70  90D8               	bcf	status,0,c
  2909  00FA72  3780               	rlcf	??_start& (0+255),f,b
  2910  00FA74  3781               	rlcf	(??_start+1)& (0+255),f,b
  2911  00FA76  C074  F082         	movff	start@currentRun,??_start+2
  2912  00FA7A  C075  F083         	movff	start@currentRun+1,??_start+3
  2913  00FA7E  5180               	movf	??_start& (0+255),w,b
  2914  00FA80  2782               	addwf	(??_start+2)& (0+255),f,b
  2915  00FA82  5181               	movf	(??_start+1)& (0+255),w,b
  2916  00FA84  2383               	addwfc	(??_start+3)& (0+255),f,b
  2917  00FA86  0E01               	movlw	1
  2918  00FA88  2582               	addwf	(??_start+2)& (0+255),w,b
  2919  00FA8A  6ED9               	movwf	fsr2l,c
  2920  00FA8C  0E00               	movlw	0
  2921  00FA8E  2183               	addwfc	(??_start+3)& (0+255),w,b
  2922  00FA90  6EDA               	movwf	fsr2h,c
  2923  00FA92  CFDE F084          	movff	postinc2,??_start+4
  2924  00FA96  CFDD F085          	movff	postdec2,??_start+5
  2925  00FA9A  5197               	movf	start@currentPole& (0+255),w,b
  2926  00FA9C  0D04               	mullw	4
  2927  00FA9E  C074  F086         	movff	start@currentRun,??_start+6
  2928  00FAA2  C075  F087         	movff	start@currentRun+1,??_start+7
  2929  00FAA6  50F3               	movf	prodl,w,c
  2930  00FAA8  2786               	addwf	(??_start+6)& (0+255),f,b
  2931  00FAAA  50F4               	movf	prodh,w,c
  2932  00FAAC  2387               	addwfc	(??_start+7)& (0+255),f,b
  2933  00FAAE  0E05               	movlw	5
  2934  00FAB0  2586               	addwf	(??_start+6)& (0+255),w,b
  2935  00FAB2  6ED9               	movwf	fsr2l,c
  2936  00FAB4  0E00               	movlw	0
  2937  00FAB6  2187               	addwfc	(??_start+7)& (0+255),w,b
  2938  00FAB8  6EDA               	movwf	fsr2h,c
  2939  00FABA  CFDE F088          	movff	postinc2,??_start+8
  2940  00FABE  CFDD F089          	movff	postdec2,??_start+9
  2941  00FAC2  5184               	movf	(??_start+4)& (0+255),w,b
  2942  00FAC4  5F88               	subwf	(??_start+8)& (0+255),f,b
  2943  00FAC6  5185               	movf	(??_start+5)& (0+255),w,b
  2944  00FAC8  5B89               	subwfb	(??_start+9)& (0+255),f,b
  2945  00FACA  0E2C               	movlw	44
  2946  00FACC  5D88               	subwf	(??_start+8)& (0+255),w,b
  2947  00FACE  0E01               	movlw	1
  2948  00FAD0  5989               	subwfb	(??_start+9)& (0+255),w,b
  2949  00FAD2  B0D8               	btfsc	status,0,c
  2950  00FAD4  D789               	goto	u5520
  2951  00FAD6                     l5741:
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;main.c: 419:             _delay((unsigned long)((100)*(10000000/4000000.0)));
  2955  00FAD6  0E53               	movlw	83
  2956  00FAD8                     u6277:
  2957  00FAD8  2EE8               	decfsz	wreg,f,c
  2958  00FADA  D7FE               	bra	u6277
  2959  00FADC  F000               	nop	
  2960                           
  2961                           ;main.c: 420:    if (PORTCbits.RC0){
  2962  00FADE  B082               	btfsc	3970,0,c	;volatile
  2963  00FAE0  D57F               	goto	u5290
  2964                           
  2965                           ;main.c: 425:             writeByteToDriveArduino(7);
  2966  00FAE2  0E07               	movlw	7
  2967  00FAE4  ECA5  F062         	call	_writeByteToDriveArduino
  2968                           
  2969                           ;main.c: 427:             _delay((unsigned long)((100)*(10000000/4000000.0)));
  2970  00FAE8  0E53               	movlw	83
  2971  00FAEA                     u6287:
  2972  00FAEA  2EE8               	decfsz	wreg,f,c
  2973  00FAEC  D7FE               	bra	u6287
  2974  00FAEE  F000               	nop	
  2975  00FAF0                     l257:
  2976  00FAF0  B482               	btfsc	3970,2,c	;volatile
  2977  00FAF2  D7FE               	goto	l257
  2978                           
  2979                           ;main.c: 431:    _delay((unsigned long)((100)*(10000000/4000000.0)));
  2980  00FAF4  0E53               	movlw	83
  2981  00FAF6                     u6297:
  2982  00FAF6  2EE8               	decfsz	wreg,f,c
  2983  00FAF8  D7FE               	bra	u6297
  2984  00FAFA  F000               	nop	
  2985                           
  2986                           ;main.c: 432:             if (PORTCbits.RC0){
  2987  00FAFC  B082               	btfsc	3970,0,c	;volatile
  2988  00FAFE  D570               	goto	u5290
  2989                           
  2990                           ;main.c: 437:             if (tiresBefore >= tiresNeeded){
  2991  00FB00  0100               	movlb	0	; () banked
  2992  00FB02  5192               	movf	start@tiresNeeded& (0+255),w,b
  2993  00FB04  5D96               	subwf	start@tiresBefore& (0+255),w,b
  2994  00FB06  A0D8               	btfss	status,0,c
  2995  00FB08  D024               	goto	l261
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;main.c: 438:                 currentRun->poleArray[currentPole].tiresAfter = tiresBefor
      +                          e;
  2999  00FB0A  5197               	movf	start@currentPole& (0+255),w,b
  3000  00FB0C  0D04               	mullw	4
  3001  00FB0E  C074  F080         	movff	start@currentRun,??_start
  3002  00FB12  C075  F081         	movff	start@currentRun+1,??_start+1
  3003  00FB16  50F3               	movf	prodl,w,c
  3004  00FB18  2780               	addwf	??_start& (0+255),f,b
  3005  00FB1A  50F4               	movf	prodh,w,c
  3006  00FB1C  2381               	addwfc	(??_start+1)& (0+255),f,b
  3007  00FB1E  0E04               	movlw	4
  3008  00FB20  2580               	addwf	??_start& (0+255),w,b
  3009  00FB22  6ED9               	movwf	fsr2l,c
  3010  00FB24  0E00               	movlw	0
  3011  00FB26  2181               	addwfc	(??_start+1)& (0+255),w,b
  3012  00FB28  6EDA               	movwf	fsr2h,c
  3013  00FB2A  C096  FFDF         	movff	start@tiresBefore,indf2
  3014                           
  3015                           ;main.c: 439:                 currentRun->poleArray[currentPole].tiresDeployed = 0;
  3016  00FB2E  5197               	movf	start@currentPole& (0+255),w,b
  3017  00FB30  0D04               	mullw	4
  3018  00FB32  C074  F080         	movff	start@currentRun,??_start
  3019  00FB36  C075  F081         	movff	start@currentRun+1,??_start+1
  3020  00FB3A  50F3               	movf	prodl,w,c
  3021  00FB3C  2780               	addwf	??_start& (0+255),f,b
  3022  00FB3E  50F4               	movf	prodh,w,c
  3023  00FB40  2381               	addwfc	(??_start+1)& (0+255),f,b
  3024  00FB42  0E03               	movlw	3
  3025  00FB44  2580               	addwf	??_start& (0+255),w,b
  3026  00FB46  6ED9               	movwf	fsr2l,c
  3027  00FB48  0E00               	movlw	0
  3028  00FB4A  2181               	addwfc	(??_start+1)& (0+255),w,b
  3029  00FB4C  6EDA               	movwf	fsr2h,c
  3030  00FB4E  0E00               	movlw	0
  3031  00FB50  D127               	goto	L4
  3032  00FB52                     l261:
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;main.c: 441:                 currentTires = tiresBefore;
  3036  00FB52  C096  F095         	movff	start@tiresBefore,start@currentTires
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;main.c: 442:                 if ((tiresNeeded - tiresBefore) == 1){
  3040  00FB56  5196               	movf	start@tiresBefore& (0+255),w,b
  3041  00FB58  C092  F080         	movff	start@tiresNeeded,??_start
  3042  00FB5C  6B81               	clrf	(??_start+1)& (0+255),b
  3043  00FB5E  5F80               	subwf	??_start& (0+255),f,b
  3044  00FB60  0E00               	movlw	0
  3045  00FB62  5B81               	subwfb	(??_start+1)& (0+255),f,b
  3046  00FB64  0580               	decf	??_start& (0+255),w,b
  3047  00FB66  1181               	iorwf	(??_start+1)& (0+255),w,b
  3048  00FB68  A4D8               	btfss	status,2,c
  3049  00FB6A  D01D               	goto	l5777
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;main.c: 444:                     LATAbits.LATA0 = 1;
  3053  00FB6C  8089               	bsf	3977,0,c	;volatile
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;main.c: 445:                     _delay((unsigned long)((10)*(10000000/4000.0)));
  3057  00FB6E  0E21               	movlw	33
  3058  00FB70  0100               	movlb	0	; () banked
  3059  00FB72  6F80               	movwf	??_start& (0+255),b
  3060  00FB74  0E76               	movlw	118
  3061  00FB76                     u6307:
  3062  00FB76  2EE8               	decfsz	wreg,f,c
  3063  00FB78  D7FE               	bra	u6307
  3064  00FB7A  2F80               	decfsz	??_start& (0+255),f,b
  3065  00FB7C  D7FC               	bra	u6307
  3066  00FB7E  F000               	nop	
  3067                           
  3068                           ;main.c: 446:                     LATAbits.LATA0 = 0;
  3069  00FB80  9089               	bcf	3977,0,c	;volatile
  3070                           
  3071                           ;main.c: 447:                     _delay((unsigned long)((1150)*(10000000/4000.0)));
  3072  00FB82  0E0F               	movlw	15
  3073  00FB84  0100               	movlb	0	; () banked
  3074  00FB86  6F81               	movwf	(??_start+1)& (0+255),b
  3075  00FB88  0E96               	movlw	150
  3076  00FB8A  6F80               	movwf	??_start& (0+255),b
  3077  00FB8C  0EB8               	movlw	184
  3078  00FB8E                     u6317:
  3079  00FB8E  2EE8               	decfsz	wreg,f,c
  3080  00FB90  D7FE               	bra	u6317
  3081  00FB92  2F80               	decfsz	??_start& (0+255),f,b
  3082  00FB94  D7FC               	bra	u6317
  3083  00FB96  2F81               	decfsz	(??_start+1)& (0+255),f,b
  3084  00FB98  D7FA               	bra	u6317
  3085  00FB9A  F000               	nop	
  3086                           
  3087                           ;main.c: 448:                     currentTires++;
  3088  00FB9C  0100               	movlb	0	; () banked
  3089  00FB9E  2B95               	incf	start@currentTires& (0+255),f,b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;main.c: 449:                     tireInCell = 0;
  3093  00FBA0  0E00               	movlw	0
  3094  00FBA2  6F93               	movwf	start@tireInCell& (0+255),b
  3095                           
  3096                           ;main.c: 450:                 } else if ((tiresNeeded - tiresBefore) >= 2){
  3097  00FBA4  D0D9               	goto	l5849
  3098  00FBA6                     l5777:
  3099                           
  3100                           ; BSR set to: 0
  3101  00FBA6  5196               	movf	start@tiresBefore& (0+255),w,b
  3102  00FBA8  C092  F080         	movff	start@tiresNeeded,??_start
  3103  00FBAC  6B81               	clrf	(??_start+1)& (0+255),b
  3104  00FBAE  5F80               	subwf	??_start& (0+255),f,b
  3105  00FBB0  0E00               	movlw	0
  3106  00FBB2  5B81               	subwfb	(??_start+1)& (0+255),f,b
  3107  00FBB4  BF81               	btfsc	(??_start+1)& (0+255),7,b
  3108  00FBB6  D0D0               	goto	l5849
  3109  00FBB8  5181               	movf	(??_start+1)& (0+255),w,b
  3110  00FBBA  E104               	bnz	u5600
  3111  00FBBC  0E02               	movlw	2
  3112  00FBBE  5D80               	subwf	??_start& (0+255),w,b
  3113  00FBC0  A0D8               	btfss	status,0,c
  3114  00FBC2  D0CA               	goto	l5849
  3115  00FBC4                     u5600:
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;main.c: 452:                     LATAbits.LATA0 = 1;
  3119  00FBC4  8089               	bsf	3977,0,c	;volatile
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;main.c: 453:                     _delay((unsigned long)((10)*(10000000/4000.0)));
  3123  00FBC6  0E21               	movlw	33
  3124  00FBC8  0100               	movlb	0	; () banked
  3125  00FBCA  6F80               	movwf	??_start& (0+255),b
  3126  00FBCC  0E76               	movlw	118
  3127  00FBCE                     u6327:
  3128  00FBCE  2EE8               	decfsz	wreg,f,c
  3129  00FBD0  D7FE               	bra	u6327
  3130  00FBD2  2F80               	decfsz	??_start& (0+255),f,b
  3131  00FBD4  D7FC               	bra	u6327
  3132  00FBD6  F000               	nop	
  3133                           
  3134                           ;main.c: 454:                     LATAbits.LATA0 = 0;
  3135  00FBD8  9089               	bcf	3977,0,c	;volatile
  3136                           
  3137                           ;main.c: 455:                     currentTires++;
  3138  00FBDA  0100               	movlb	0	; () banked
  3139  00FBDC  2B95               	incf	start@currentTires& (0+255),f,b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 456:      tireInCell = 0;
  3143  00FBDE  0E00               	movlw	0
  3144  00FBE0  6F93               	movwf	start@tireInCell& (0+255),b
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 457:      if (PORTCbits.RC0){
  3148  00FBE2  A082               	btfss	3970,0,c	;volatile
  3149  00FBE4  D033               	goto	l5799
  3150  00FBE6                     u5610:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;main.c: 458:       currentRun->poleArray[currentPole].tiresAfter = currentTires;
  3154  00FBE6  5197               	movf	start@currentPole& (0+255),w,b
  3155  00FBE8  0D04               	mullw	4
  3156  00FBEA  C074  F080         	movff	start@currentRun,??_start
  3157  00FBEE  C075  F081         	movff	start@currentRun+1,??_start+1
  3158  00FBF2  50F3               	movf	prodl,w,c
  3159  00FBF4  2780               	addwf	??_start& (0+255),f,b
  3160  00FBF6  50F4               	movf	prodh,w,c
  3161  00FBF8  2381               	addwfc	(??_start+1)& (0+255),f,b
  3162  00FBFA  0E04               	movlw	4
  3163  00FBFC  2580               	addwf	??_start& (0+255),w,b
  3164  00FBFE  6ED9               	movwf	fsr2l,c
  3165  00FC00  0E00               	movlw	0
  3166  00FC02  2181               	addwfc	(??_start+1)& (0+255),w,b
  3167  00FC04  6EDA               	movwf	fsr2h,c
  3168  00FC06  C095  FFDF         	movff	start@currentTires,indf2
  3169                           
  3170                           ;main.c: 459:       currentRun->poleArray[currentPole].tiresDeployed = currentTires - ti
      +                          resBefore;
  3171  00FC0A  5197               	movf	start@currentPole& (0+255),w,b
  3172  00FC0C  0D04               	mullw	4
  3173  00FC0E  C074  F080         	movff	start@currentRun,??_start
  3174  00FC12  C075  F081         	movff	start@currentRun+1,??_start+1
  3175  00FC16  50F3               	movf	prodl,w,c
  3176  00FC18  2780               	addwf	??_start& (0+255),f,b
  3177  00FC1A  50F4               	movf	prodh,w,c
  3178  00FC1C  2381               	addwfc	(??_start+1)& (0+255),f,b
  3179  00FC1E  0E03               	movlw	3
  3180  00FC20  2580               	addwf	??_start& (0+255),w,b
  3181  00FC22  6ED9               	movwf	fsr2l,c
  3182  00FC24  0E00               	movlw	0
  3183  00FC26  2181               	addwfc	(??_start+1)& (0+255),w,b
  3184  00FC28  6EDA               	movwf	fsr2h,c
  3185  00FC2A  5196               	movf	start@tiresBefore& (0+255),w,b
  3186  00FC2C  5D95               	subwf	start@currentTires& (0+255),w,b
  3187  00FC2E  6EDF               	movwf	indf2,c
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;main.c: 460:                         _delay((unsigned long)((1150)*(10000000/4000.0)));
  3191  00FC30  0E0F               	movlw	15
  3192  00FC32  0100               	movlb	0	; () banked
  3193  00FC34  6F81               	movwf	(??_start+1)& (0+255),b
  3194  00FC36  0E96               	movlw	150
  3195  00FC38  6F80               	movwf	??_start& (0+255),b
  3196  00FC3A  0EB8               	movlw	184
  3197  00FC3C                     u6337:
  3198  00FC3C  2EE8               	decfsz	wreg,f,c
  3199  00FC3E  D7FE               	bra	u6337
  3200  00FC40  2F80               	decfsz	??_start& (0+255),f,b
  3201  00FC42  D7FC               	bra	u6337
  3202  00FC44  2F81               	decfsz	(??_start+1)& (0+255),f,b
  3203  00FC46  D7FA               	bra	u6337
  3204  00FC48  F000               	nop	
  3205  00FC4A  D4CA               	goto	u5290
  3206  00FC4C                     l5799:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 464:      if (tireOnBottomRamp){
  3210  00FC4C  5194               	movf	start@tireOnBottomRamp& (0+255),w,b
  3211  00FC4E  B4D8               	btfsc	status,2,c
  3212  00FC50  D01C               	goto	l5809
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;main.c: 465:                         _delay((unsigned long)((1250)*(10000000/4000.0)));
  3216  00FC52  0E10               	movlw	16
  3217  00FC54  0100               	movlb	0	; () banked
  3218  00FC56  6F81               	movwf	(??_start+1)& (0+255),b
  3219  00FC58  0EDB               	movlw	219
  3220  00FC5A  6F80               	movwf	??_start& (0+255),b
  3221  00FC5C  0E64               	movlw	100
  3222  00FC5E                     u6347:
  3223  00FC5E  2EE8               	decfsz	wreg,f,c
  3224  00FC60  D7FE               	bra	u6347
  3225  00FC62  2F80               	decfsz	??_start& (0+255),f,b
  3226  00FC64  D7FC               	bra	u6347
  3227  00FC66  2F81               	decfsz	(??_start+1)& (0+255),f,b
  3228  00FC68  D7FA               	bra	u6347
  3229  00FC6A  F000               	nop	
  3230                           
  3231                           ;main.c: 466:       LATEbits.LATE2 = 1;
  3232  00FC6C  848D               	bsf	3981,2,c	;volatile
  3233                           
  3234                           ;main.c: 467:       _delay((unsigned long)((10)*(10000000/4000.0)));
  3235  00FC6E  0E21               	movlw	33
  3236  00FC70  0100               	movlb	0	; () banked
  3237  00FC72  6F80               	movwf	??_start& (0+255),b
  3238  00FC74  0E76               	movlw	118
  3239  00FC76                     u6357:
  3240  00FC76  2EE8               	decfsz	wreg,f,c
  3241  00FC78  D7FE               	bra	u6357
  3242  00FC7A  2F80               	decfsz	??_start& (0+255),f,b
  3243  00FC7C  D7FC               	bra	u6357
  3244  00FC7E  F000               	nop	
  3245                           
  3246                           ;main.c: 468:       LATEbits.LATE2 = 0;
  3247  00FC80  948D               	bcf	3981,2,c	;volatile
  3248                           
  3249                           ;main.c: 469:       tireOnBottomRamp = 0;
  3250  00FC82  0E00               	movlw	0
  3251  00FC84  0100               	movlb	0	; () banked
  3252  00FC86  6F94               	movwf	start@tireOnBottomRamp& (0+255),b
  3253                           
  3254                           ;main.c: 470:      } else if (*bottomMagTires > 0){
  3255  00FC88  D03F               	goto	l5841
  3256  00FC8A                     l5809:
  3257                           
  3258                           ; BSR set to: 0
  3259  00FC8A  C078  FFD9         	movff	start@bottomMagTires,fsr2l
  3260  00FC8E  C079  FFDA         	movff	start@bottomMagTires+1,fsr2h
  3261  00FC92  50DF               	movf	indf2,w,c
  3262  00FC94  B4D8               	btfsc	status,2,c
  3263  00FC96  D019               	goto	l5821
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;main.c: 471:                         bottomMagStepper(singleTireSteps, 1);
  3267  00FC98  0E0F               	movlw	15
  3268  00FC9A  6E12               	movwf	bottomMagStepper@steps+1,c
  3269  00FC9C  0E55               	movlw	85
  3270  00FC9E  6E11               	movwf	bottomMagStepper@steps,c
  3271  00FCA0  0E01               	movlw	1
  3272  00FCA2  6E13               	movwf	bottomMagStepper@forward,c
  3273  00FCA4  EC85  F067         	call	_bottomMagStepper	;wreg free
  3274                           
  3275                           ;main.c: 473:       LATEbits.LATE2 = 1;
  3276  00FCA8  848D               	bsf	3981,2,c	;volatile
  3277                           
  3278                           ;main.c: 474:       (*bottomMagTires)--;
  3279  00FCAA  C078  FFD9         	movff	start@bottomMagTires,fsr2l
  3280  00FCAE  C079  FFDA         	movff	start@bottomMagTires+1,fsr2h
  3281  00FCB2  06DF               	decf	indf2,f,c
  3282                           
  3283                           ;main.c: 475:       _delay((unsigned long)((10)*(10000000/4000.0)));
  3284  00FCB4  0E21               	movlw	33
  3285  00FCB6  0100               	movlb	0	; () banked
  3286  00FCB8  6F80               	movwf	??_start& (0+255),b
  3287  00FCBA  0E76               	movlw	118
  3288  00FCBC                     u6367:
  3289  00FCBC  2EE8               	decfsz	wreg,f,c
  3290  00FCBE  D7FE               	bra	u6367
  3291  00FCC0  2F80               	decfsz	??_start& (0+255),f,b
  3292  00FCC2  D7FC               	bra	u6367
  3293  00FCC4  F000               	nop	
  3294                           
  3295                           ;main.c: 476:       LATEbits.LATE2 = 0;
  3296  00FCC6  948D               	bcf	3981,2,c	;volatile
  3297                           
  3298                           ;main.c: 477:                     } else if (*topMagTires > 0){
  3299  00FCC8  D01F               	goto	l5841
  3300  00FCCA                     l5821:
  3301                           
  3302                           ; BSR set to: 0
  3303  00FCCA  C076  FFD9         	movff	start@topMagTires,fsr2l
  3304  00FCCE  C077  FFDA         	movff	start@topMagTires+1,fsr2h
  3305  00FCD2  50DF               	movf	indf2,w,c
  3306  00FCD4  B4D8               	btfsc	status,2,c
  3307  00FCD6  D787               	goto	u5610
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;main.c: 478:                         topMagStepper(singleTireSteps, 1);
  3311  00FCD8  0E0F               	movlw	15
  3312  00FCDA  6E12               	movwf	topMagStepper@steps+1,c
  3313  00FCDC  0E55               	movlw	85
  3314  00FCDE  6E11               	movwf	topMagStepper@steps,c
  3315  00FCE0  0E01               	movlw	1
  3316  00FCE2  6E13               	movwf	topMagStepper@forward,c
  3317  00FCE4  ECF8  F067         	call	_topMagStepper	;wreg free
  3318                           
  3319                           ;main.c: 480:       LATDbits.LATD1 = 1;
  3320  00FCE8  828C               	bsf	3980,1,c	;volatile
  3321                           
  3322                           ;main.c: 481:       (*topMagTires)--;
  3323  00FCEA  C076  FFD9         	movff	start@topMagTires,fsr2l
  3324  00FCEE  C077  FFDA         	movff	start@topMagTires+1,fsr2h
  3325  00FCF2  06DF               	decf	indf2,f,c
  3326                           
  3327                           ;main.c: 482:       _delay((unsigned long)((10)*(10000000/4000.0)));
  3328  00FCF4  0E21               	movlw	33
  3329  00FCF6  0100               	movlb	0	; () banked
  3330  00FCF8  6F80               	movwf	??_start& (0+255),b
  3331  00FCFA  0E76               	movlw	118
  3332  00FCFC                     u6377:
  3333  00FCFC  2EE8               	decfsz	wreg,f,c
  3334  00FCFE  D7FE               	bra	u6377
  3335  00FD00  2F80               	decfsz	??_start& (0+255),f,b
  3336  00FD02  D7FC               	bra	u6377
  3337  00FD04  F000               	nop	
  3338                           
  3339                           ;main.c: 483:       LATDbits.LATD1 = 0;
  3340  00FD06  928C               	bcf	3980,1,c	;volatile
  3341  00FD08                     l5841:
  3342                           
  3343                           ;main.c: 491:      _delay((unsigned long)((2050)*(10000000/4000.0)));
  3344  00FD08  0E1A               	movlw	26
  3345  00FD0A  0100               	movlb	0	; () banked
  3346  00FD0C  6F81               	movwf	(??_start+1)& (0+255),b
  3347  00FD0E  0E00               	movlw	0
  3348  00FD10  6F80               	movwf	??_start& (0+255),b
  3349  00FD12  0EC4               	movlw	196
  3350  00FD14                     u6387:
  3351  00FD14  2EE8               	decfsz	wreg,f,c
  3352  00FD16  D7FE               	bra	u6387
  3353  00FD18  2F80               	decfsz	??_start& (0+255),f,b
  3354  00FD1A  D7FC               	bra	u6387
  3355  00FD1C  2F81               	decfsz	(??_start+1)& (0+255),f,b
  3356  00FD1E  D7FA               	bra	u6387
  3357  00FD20  D000               	nop2	
  3358  00FD22  F000               	nop	
  3359                           
  3360                           ;main.c: 493:                     LATAbits.LATA0 = 1;
  3361  00FD24  8089               	bsf	3977,0,c	;volatile
  3362                           
  3363                           ;main.c: 494:                     _delay((unsigned long)((10)*(10000000/4000.0)));
  3364  00FD26  0E21               	movlw	33
  3365  00FD28  0100               	movlb	0	; () banked
  3366  00FD2A  6F80               	movwf	??_start& (0+255),b
  3367  00FD2C  0E76               	movlw	118
  3368  00FD2E                     u6397:
  3369  00FD2E  2EE8               	decfsz	wreg,f,c
  3370  00FD30  D7FE               	bra	u6397
  3371  00FD32  2F80               	decfsz	??_start& (0+255),f,b
  3372  00FD34  D7FC               	bra	u6397
  3373  00FD36  F000               	nop	
  3374                           
  3375                           ;main.c: 495:                     LATAbits.LATA0 = 0;
  3376  00FD38  9089               	bcf	3977,0,c	;volatile
  3377                           
  3378                           ;main.c: 496:                     _delay((unsigned long)((1150)*(10000000/4000.0)));
  3379  00FD3A  0E0F               	movlw	15
  3380  00FD3C  0100               	movlb	0	; () banked
  3381  00FD3E  6F81               	movwf	(??_start+1)& (0+255),b
  3382  00FD40  0E96               	movlw	150
  3383  00FD42  6F80               	movwf	??_start& (0+255),b
  3384  00FD44  0EB8               	movlw	184
  3385  00FD46                     u6407:
  3386  00FD46  2EE8               	decfsz	wreg,f,c
  3387  00FD48  D7FE               	bra	u6407
  3388  00FD4A  2F80               	decfsz	??_start& (0+255),f,b
  3389  00FD4C  D7FC               	bra	u6407
  3390  00FD4E  2F81               	decfsz	(??_start+1)& (0+255),f,b
  3391  00FD50  D7FA               	bra	u6407
  3392  00FD52  F000               	nop	
  3393                           
  3394                           ;main.c: 497:                     currentTires++;
  3395  00FD54  0100               	movlb	0	; () banked
  3396  00FD56  2B95               	incf	start@currentTires& (0+255),f,b
  3397  00FD58                     l5849:
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 499:                 currentRun->poleArray[currentPole].tiresAfter = currentTir
      +                          es;
  3401  00FD58  5197               	movf	start@currentPole& (0+255),w,b
  3402  00FD5A  0D04               	mullw	4
  3403  00FD5C  C074  F080         	movff	start@currentRun,??_start
  3404  00FD60  C075  F081         	movff	start@currentRun+1,??_start+1
  3405  00FD64  50F3               	movf	prodl,w,c
  3406  00FD66  2780               	addwf	??_start& (0+255),f,b
  3407  00FD68  50F4               	movf	prodh,w,c
  3408  00FD6A  2381               	addwfc	(??_start+1)& (0+255),f,b
  3409  00FD6C  0E04               	movlw	4
  3410  00FD6E  2580               	addwf	??_start& (0+255),w,b
  3411  00FD70  6ED9               	movwf	fsr2l,c
  3412  00FD72  0E00               	movlw	0
  3413  00FD74  2181               	addwfc	(??_start+1)& (0+255),w,b
  3414  00FD76  6EDA               	movwf	fsr2h,c
  3415  00FD78  C095  FFDF         	movff	start@currentTires,indf2
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;main.c: 500:                 currentRun->poleArray[currentPole].tiresDeployed = current
      +                          Tires - tiresBefore;
  3419  00FD7C  5197               	movf	start@currentPole& (0+255),w,b
  3420  00FD7E  0D04               	mullw	4
  3421  00FD80  C074  F080         	movff	start@currentRun,??_start
  3422  00FD84  C075  F081         	movff	start@currentRun+1,??_start+1
  3423  00FD88  50F3               	movf	prodl,w,c
  3424  00FD8A  2780               	addwf	??_start& (0+255),f,b
  3425  00FD8C  50F4               	movf	prodh,w,c
  3426  00FD8E  2381               	addwfc	(??_start+1)& (0+255),f,b
  3427  00FD90  0E03               	movlw	3
  3428  00FD92  2580               	addwf	??_start& (0+255),w,b
  3429  00FD94  6ED9               	movwf	fsr2l,c
  3430  00FD96  0E00               	movlw	0
  3431  00FD98  2181               	addwfc	(??_start+1)& (0+255),w,b
  3432  00FD9A  6EDA               	movwf	fsr2h,c
  3433  00FD9C  5196               	movf	start@tiresBefore& (0+255),w,b
  3434  00FD9E  5D95               	subwf	start@currentTires& (0+255),w,b
  3435  00FDA0                     L4:
  3436  00FDA0  6EDF               	movwf	indf2,c
  3437  00FDA2                     l5853:
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;main.c: 505:         writeByteToDriveArduino(5);
  3441  00FDA2  0E05               	movlw	5
  3442  00FDA4  ECA5  F062         	call	_writeByteToDriveArduino
  3443  00FDA8                     l273:
  3444  00FDA8  B482               	btfsc	3970,2,c	;volatile
  3445  00FDAA  D7FE               	goto	l273
  3446                           
  3447                           ;main.c: 509:   _delay((unsigned long)((100)*(10000000/4000000.0)));
  3448  00FDAC  0E53               	movlw	83
  3449  00FDAE                     u6417:
  3450  00FDAE  2EE8               	decfsz	wreg,f,c
  3451  00FDB0  D7FE               	bra	u6417
  3452  00FDB2  F000               	nop	
  3453                           
  3454                           ;main.c: 510:         if (PORTCbits.RC0){
  3455  00FDB4  B082               	btfsc	3970,0,c	;volatile
  3456  00FDB6  D414               	goto	u5290
  3457                           
  3458                           ;main.c: 515:         if (currentRun->totalPoleNum >= maxPoles){
  3459  00FDB8  C074  FFD9         	movff	start@currentRun,fsr2l
  3460  00FDBC  C075  FFDA         	movff	start@currentRun+1,fsr2h
  3461  00FDC0  0E09               	movlw	9
  3462  00FDC2  64DF               	cpfsgt	indf2,c
  3463  00FDC4  EFDB  F07A         	goto	l216
  3464  00FDC8  D40B               	goto	u5290
  3465  00FDCA                     __end_of_start:
  3466                           	opt callstack 0
  3467                           
  3468 ;; *************** function ___xxtofl *****************
  3469 ;; Defined at:
  3470 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\xxtofl.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  sign            1    wreg     unsigned char 
  3473 ;;  val             4    0[COMRAM] long 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  sign            1    8[COMRAM] unsigned char 
  3476 ;;  arg             4   10[COMRAM] unsigned long 
  3477 ;;  exp             1    9[COMRAM] unsigned char 
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  4    0[COMRAM] unsigned char 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;Total ram usage:       14 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_start
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text2
  3501  00D216                     __ptext2:
  3502                           	opt callstack 0
  3503  00D216                     ___xxtofl:
  3504                           	opt callstack 29
  3505                           
  3506                           ;incstack = 0
  3507                           ;___xxtofl@sign stored from wreg
  3508  00D216  6E09               	movwf	___xxtofl@sign,c
  3509  00D218  5009               	movf	___xxtofl@sign,w,c
  3510  00D21A  A4D8               	btfss	status,2,c
  3511  00D21C  AE04               	btfss	___xxtofl@val+3,7,c
  3512  00D21E  D01A               	goto	l1347
  3513  00D220  C001  F005         	movff	___xxtofl@val,??___xxtofl
  3514  00D224  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  3515  00D228  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  3516  00D22C  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  3517  00D230  1E05               	comf	??___xxtofl,f,c
  3518  00D232  1E06               	comf	??___xxtofl+1,f,c
  3519  00D234  1E07               	comf	??___xxtofl+2,f,c
  3520  00D236  1E08               	comf	??___xxtofl+3,f,c
  3521  00D238  2A05               	incf	??___xxtofl,f,c
  3522  00D23A  0E00               	movlw	0
  3523  00D23C  2206               	addwfc	??___xxtofl+1,f,c
  3524  00D23E  2207               	addwfc	??___xxtofl+2,f,c
  3525  00D240  2208               	addwfc	??___xxtofl+3,f,c
  3526  00D242  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  3527  00D246  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  3528  00D24A  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  3529  00D24E  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  3530  00D252  D008               	goto	l5399
  3531  00D254                     l1347:
  3532  00D254  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  3533  00D258  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3534  00D25C  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3535  00D260  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3536  00D264                     l5399:
  3537  00D264  5001               	movf	___xxtofl@val,w,c
  3538  00D266  1002               	iorwf	___xxtofl@val+1,w,c
  3539  00D268  1003               	iorwf	___xxtofl@val+2,w,c
  3540  00D26A  1004               	iorwf	___xxtofl@val+3,w,c
  3541  00D26C  A4D8               	btfss	status,2,c
  3542  00D26E  D009               	goto	l5405
  3543  00D270  0E00               	movlw	0
  3544  00D272  6E01               	movwf	?___xxtofl,c
  3545  00D274  0E00               	movlw	0
  3546  00D276  6E02               	movwf	?___xxtofl+1,c
  3547  00D278  0E00               	movlw	0
  3548  00D27A  6E03               	movwf	?___xxtofl+2,c
  3549  00D27C  0E00               	movlw	0
  3550  00D27E  6E04               	movwf	?___xxtofl+3,c
  3551  00D280  0012               	return	
  3552  00D282                     l5405:
  3553  00D282  0E96               	movlw	150
  3554  00D284  6E0A               	movwf	___xxtofl@exp,c
  3555  00D286  D006               	goto	l5409
  3556  00D288                     l5407:
  3557  00D288  2A0A               	incf	___xxtofl@exp,f,c
  3558  00D28A  90D8               	bcf	status,0,c
  3559  00D28C  320E               	rrcf	___xxtofl@arg+3,f,c
  3560  00D28E  320D               	rrcf	___xxtofl@arg+2,f,c
  3561  00D290  320C               	rrcf	___xxtofl@arg+1,f,c
  3562  00D292  320B               	rrcf	___xxtofl@arg,f,c
  3563  00D294                     l5409:
  3564  00D294  0E00               	movlw	0
  3565  00D296  140B               	andwf	___xxtofl@arg,w,c
  3566  00D298  6E05               	movwf	??___xxtofl& (0+255),c
  3567  00D29A  0E00               	movlw	0
  3568  00D29C  140C               	andwf	___xxtofl@arg+1,w,c
  3569  00D29E  6E06               	movwf	(??___xxtofl+1)& (0+255),c
  3570  00D2A0  0E00               	movlw	0
  3571  00D2A2  140D               	andwf	___xxtofl@arg+2,w,c
  3572  00D2A4  6E07               	movwf	(??___xxtofl+2)& (0+255),c
  3573  00D2A6  0EFE               	movlw	254
  3574  00D2A8  140E               	andwf	___xxtofl@arg+3,w,c
  3575  00D2AA  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  3576  00D2AC  5005               	movf	??___xxtofl,w,c
  3577  00D2AE  1006               	iorwf	??___xxtofl+1,w,c
  3578  00D2B0  1007               	iorwf	??___xxtofl+2,w,c
  3579  00D2B2  1008               	iorwf	??___xxtofl+3,w,c
  3580  00D2B4  B4D8               	btfsc	status,2,c
  3581  00D2B6  D00D               	goto	l1354
  3582  00D2B8  D7E7               	goto	l5407
  3583  00D2BA                     l5411:
  3584  00D2BA  2A0A               	incf	___xxtofl@exp,f,c
  3585  00D2BC  0E01               	movlw	1
  3586  00D2BE  260B               	addwf	___xxtofl@arg,f,c
  3587  00D2C0  0E00               	movlw	0
  3588  00D2C2  220C               	addwfc	___xxtofl@arg+1,f,c
  3589  00D2C4  220D               	addwfc	___xxtofl@arg+2,f,c
  3590  00D2C6  220E               	addwfc	___xxtofl@arg+3,f,c
  3591  00D2C8  90D8               	bcf	status,0,c
  3592  00D2CA  320E               	rrcf	___xxtofl@arg+3,f,c
  3593  00D2CC  320D               	rrcf	___xxtofl@arg+2,f,c
  3594  00D2CE  320C               	rrcf	___xxtofl@arg+1,f,c
  3595  00D2D0  320B               	rrcf	___xxtofl@arg,f,c
  3596  00D2D2                     l1354:
  3597  00D2D2  0E00               	movlw	0
  3598  00D2D4  140B               	andwf	___xxtofl@arg,w,c
  3599  00D2D6  6E05               	movwf	??___xxtofl& (0+255),c
  3600  00D2D8  0E00               	movlw	0
  3601  00D2DA  140C               	andwf	___xxtofl@arg+1,w,c
  3602  00D2DC  6E06               	movwf	(??___xxtofl+1)& (0+255),c
  3603  00D2DE  0E00               	movlw	0
  3604  00D2E0  140D               	andwf	___xxtofl@arg+2,w,c
  3605  00D2E2  6E07               	movwf	(??___xxtofl+2)& (0+255),c
  3606  00D2E4  0EFF               	movlw	255
  3607  00D2E6  140E               	andwf	___xxtofl@arg+3,w,c
  3608  00D2E8  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  3609  00D2EA  5005               	movf	??___xxtofl,w,c
  3610  00D2EC  1006               	iorwf	??___xxtofl+1,w,c
  3611  00D2EE  1007               	iorwf	??___xxtofl+2,w,c
  3612  00D2F0  1008               	iorwf	??___xxtofl+3,w,c
  3613  00D2F2  B4D8               	btfsc	status,2,c
  3614  00D2F4  D007               	goto	l5419
  3615  00D2F6  D7E1               	goto	l5411
  3616  00D2F8                     l5417:
  3617  00D2F8  060A               	decf	___xxtofl@exp,f,c
  3618  00D2FA  90D8               	bcf	status,0,c
  3619  00D2FC  360B               	rlcf	___xxtofl@arg,f,c
  3620  00D2FE  360C               	rlcf	___xxtofl@arg+1,f,c
  3621  00D300  360D               	rlcf	___xxtofl@arg+2,f,c
  3622  00D302  360E               	rlcf	___xxtofl@arg+3,f,c
  3623  00D304                     l5419:
  3624  00D304  BE0D               	btfsc	___xxtofl@arg+2,7,c
  3625  00D306  D003               	goto	u5150
  3626  00D308  0E02               	movlw	2
  3627  00D30A  600A               	cpfslt	___xxtofl@exp,c
  3628  00D30C  D7F5               	goto	l5417
  3629  00D30E                     u5150:
  3630  00D30E  A00A               	btfss	___xxtofl@exp,0,c
  3631  00D310  9E0D               	bcf	___xxtofl@arg+2,7,c
  3632  00D312  90D8               	bcf	status,0,c
  3633  00D314  320A               	rrcf	___xxtofl@exp,f,c
  3634  00D316  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  3635  00D31A  6A06               	clrf	(??___xxtofl+1)& (0+255),c
  3636  00D31C  6A07               	clrf	(??___xxtofl+2)& (0+255),c
  3637  00D31E  6A08               	clrf	(??___xxtofl+3)& (0+255),c
  3638  00D320  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  3639  00D324  6A07               	clrf	??___xxtofl+2,c
  3640  00D326  6A06               	clrf	??___xxtofl+1,c
  3641  00D328  6A05               	clrf	??___xxtofl,c
  3642  00D32A  5005               	movf	??___xxtofl,w,c
  3643  00D32C  120B               	iorwf	___xxtofl@arg,f,c
  3644  00D32E  5006               	movf	??___xxtofl+1,w,c
  3645  00D330  120C               	iorwf	___xxtofl@arg+1,f,c
  3646  00D332  5007               	movf	??___xxtofl+2,w,c
  3647  00D334  120D               	iorwf	___xxtofl@arg+2,f,c
  3648  00D336  5008               	movf	??___xxtofl+3,w,c
  3649  00D338  120E               	iorwf	___xxtofl@arg+3,f,c
  3650  00D33A  5009               	movf	___xxtofl@sign,w,c
  3651  00D33C  A4D8               	btfss	status,2,c
  3652  00D33E  AE04               	btfss	___xxtofl@val+3,7,c
  3653  00D340  D001               	goto	l5435
  3654  00D342  8E0E               	bsf	___xxtofl@arg+3,7,c
  3655  00D344                     l5435:
  3656  00D344  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  3657  00D348  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  3658  00D34C  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  3659  00D350  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  3660  00D354  0012               	return		;funcret
  3661  00D356                     __end_of___xxtofl:
  3662                           	opt callstack 0
  3663                           
  3664 ;; *************** function ___fltol *****************
  3665 ;; Defined at:
  3666 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\fltol.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  f1              4   39[COMRAM] unsigned char 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  exp1            1   48[COMRAM] unsigned char 
  3671 ;;  sign1           1   47[COMRAM] unsigned char 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  4   39[COMRAM] long 
  3674 ;; Registers used:
  3675 ;;		wreg, status,2, status,0
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3683 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;Total ram usage:       10 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_start
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text3
  3695  00CCBA                     __ptext3:
  3696                           	opt callstack 0
  3697  00CCBA                     ___fltol:
  3698                           	opt callstack 29
  3699                           
  3700                           ;incstack = 0
  3701  00CCBA  342A               	rlcf	___fltol@f1+2,w,c
  3702  00CCBC  342B               	rlcf	___fltol@f1+3,w,c
  3703  00CCBE  6E31               	movwf	___fltol@exp1,c
  3704  00CCC0  5031               	movf	___fltol@exp1,w,c
  3705  00CCC2  A4D8               	btfss	status,2,c
  3706  00CCC4  D009               	goto	l5317
  3707  00CCC6                     u4960:
  3708  00CCC6  0E00               	movlw	0
  3709  00CCC8  6E28               	movwf	?___fltol,c
  3710  00CCCA  0E00               	movlw	0
  3711  00CCCC  6E29               	movwf	?___fltol+1,c
  3712  00CCCE  0E00               	movlw	0
  3713  00CCD0  6E2A               	movwf	?___fltol+2,c
  3714  00CCD2  0E00               	movlw	0
  3715  00CCD4  6E2B               	movwf	?___fltol+3,c
  3716  00CCD6  0012               	return	
  3717  00CCD8                     l5317:
  3718  00CCD8  C028  F02C         	movff	___fltol@f1,??___fltol
  3719  00CCDC  C029  F02D         	movff	___fltol@f1+1,??___fltol+1
  3720  00CCE0  C02A  F02E         	movff	___fltol@f1+2,??___fltol+2
  3721  00CCE4  C02B  F02F         	movff	___fltol@f1+3,??___fltol+3
  3722  00CCE8  0E20               	movlw	32
  3723  00CCEA  D005               	goto	u4970
  3724  00CCEC                     u4975:
  3725  00CCEC  90D8               	bcf	status,0,c
  3726  00CCEE  322F               	rrcf	??___fltol+3,f,c
  3727  00CCF0  322E               	rrcf	??___fltol+2,f,c
  3728  00CCF2  322D               	rrcf	??___fltol+1,f,c
  3729  00CCF4  322C               	rrcf	??___fltol,f,c
  3730  00CCF6                     u4970:
  3731  00CCF6  2EE8               	decfsz	wreg,f,c
  3732  00CCF8  D7F9               	goto	u4975
  3733  00CCFA  502C               	movf	??___fltol,w,c
  3734  00CCFC  6E30               	movwf	___fltol@sign1,c
  3735  00CCFE  8E2A               	bsf	___fltol@f1+2,7,c
  3736  00CD00  0EFF               	movlw	255
  3737  00CD02  1628               	andwf	___fltol@f1,f,c
  3738  00CD04  0EFF               	movlw	255
  3739  00CD06  1629               	andwf	___fltol@f1+1,f,c
  3740  00CD08  0EFF               	movlw	255
  3741  00CD0A  162A               	andwf	___fltol@f1+2,f,c
  3742  00CD0C  0E00               	movlw	0
  3743  00CD0E  162B               	andwf	___fltol@f1+3,f,c
  3744  00CD10  0E96               	movlw	150
  3745  00CD12  5E31               	subwf	___fltol@exp1,f,c
  3746  00CD14  AE31               	btfss	___fltol@exp1,7,c
  3747  00CD16  D00D               	goto	l5337
  3748  00CD18  5031               	movf	___fltol@exp1,w,c
  3749  00CD1A  0A80               	xorlw	128
  3750  00CD1C  0F97               	addlw	151
  3751  00CD1E  A0D8               	btfss	status,0,c
  3752  00CD20  D7D2               	goto	u4960
  3753  00CD22                     l5333:
  3754  00CD22  90D8               	bcf	status,0,c
  3755  00CD24  322B               	rrcf	___fltol@f1+3,f,c
  3756  00CD26  322A               	rrcf	___fltol@f1+2,f,c
  3757  00CD28  3229               	rrcf	___fltol@f1+1,f,c
  3758  00CD2A  3228               	rrcf	___fltol@f1,f,c
  3759  00CD2C  3E31               	incfsz	___fltol@exp1,f,c
  3760  00CD2E  D7F9               	goto	l5333
  3761  00CD30  D00D               	goto	u5010
  3762  00CD32                     l5337:
  3763  00CD32  0E1F               	movlw	31
  3764  00CD34  6431               	cpfsgt	___fltol@exp1,c
  3765  00CD36  D007               	goto	l5345
  3766  00CD38  D7C6               	goto	u4960
  3767  00CD3A                     l5343:
  3768  00CD3A  90D8               	bcf	status,0,c
  3769  00CD3C  3628               	rlcf	___fltol@f1,f,c
  3770  00CD3E  3629               	rlcf	___fltol@f1+1,f,c
  3771  00CD40  362A               	rlcf	___fltol@f1+2,f,c
  3772  00CD42  362B               	rlcf	___fltol@f1+3,f,c
  3773  00CD44  0631               	decf	___fltol@exp1,f,c
  3774  00CD46                     l5345:
  3775  00CD46  5031               	movf	___fltol@exp1,w,c
  3776  00CD48  A4D8               	btfss	status,2,c
  3777  00CD4A  D7F7               	goto	l5343
  3778  00CD4C                     u5010:
  3779  00CD4C  5030               	movf	___fltol@sign1,w,c
  3780  00CD4E  B4D8               	btfsc	status,2,c
  3781  00CD50  D008               	goto	l5351
  3782  00CD52  1E2B               	comf	___fltol@f1+3,f,c
  3783  00CD54  1E2A               	comf	___fltol@f1+2,f,c
  3784  00CD56  1E29               	comf	___fltol@f1+1,f,c
  3785  00CD58  6C28               	negf	___fltol@f1,c
  3786  00CD5A  0E00               	movlw	0
  3787  00CD5C  2229               	addwfc	___fltol@f1+1,f,c
  3788  00CD5E  222A               	addwfc	___fltol@f1+2,f,c
  3789  00CD60  222B               	addwfc	___fltol@f1+3,f,c
  3790  00CD62                     l5351:
  3791  00CD62  C028  F028         	movff	___fltol@f1,?___fltol
  3792  00CD66  C029  F029         	movff	___fltol@f1+1,?___fltol+1
  3793  00CD6A  C02A  F02A         	movff	___fltol@f1+2,?___fltol+2
  3794  00CD6E  C02B  F02B         	movff	___fltol@f1+3,?___fltol+3
  3795  00CD72  0012               	return		;funcret
  3796  00CD74                     __end_of___fltol:
  3797                           	opt callstack 0
  3798                           
  3799 ;; *************** function ___flmul *****************
  3800 ;; Defined at:
  3801 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcmul.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;  b               4   14[COMRAM] long 
  3804 ;;  a               4   18[COMRAM] long 
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;  prod            4   33[COMRAM] struct .
  3807 ;;  grs             4   27[COMRAM] unsigned long 
  3808 ;;  temp            2   37[COMRAM] struct .
  3809 ;;  bexp            1   32[COMRAM] unsigned char 
  3810 ;;  aexp            1   31[COMRAM] unsigned char 
  3811 ;;  sign            1   26[COMRAM] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  4   14[COMRAM] unsigned char 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2, status,0, prodl, prodh
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3821 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;Total ram usage:       25 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_start
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text4
  3835  00E736                     __ptext4:
  3836                           	opt callstack 0
  3837  00E736                     ___flmul:
  3838                           	opt callstack 29
  3839                           
  3840                           ;incstack = 0
  3841  00E736  5012               	movf	___flmul@b+3,w,c
  3842  00E738  0B80               	andlw	128
  3843  00E73A  6E1B               	movwf	___flmul@sign,c
  3844  00E73C  5012               	movf	___flmul@b+3,w,c
  3845  00E73E  2412               	addwf	___flmul@b+3,w,c
  3846  00E740  6E21               	movwf	___flmul@bexp,c
  3847  00E742  BE11               	btfsc	___flmul@b+2,7,c
  3848  00E744  8021               	bsf	___flmul@bexp,0,c
  3849  00E746  5021               	movf	___flmul@bexp,w,c
  3850  00E748  B4D8               	btfsc	status,2,c
  3851  00E74A  D00D               	goto	l5159
  3852  00E74C  2821               	incf	___flmul@bexp,w,c
  3853  00E74E  A4D8               	btfss	status,2,c
  3854  00E750  D008               	goto	l5157
  3855  00E752  0E00               	movlw	0
  3856  00E754  6E0F               	movwf	___flmul@b,c
  3857  00E756  0E00               	movlw	0
  3858  00E758  6E10               	movwf	___flmul@b+1,c
  3859  00E75A  0E00               	movlw	0
  3860  00E75C  6E11               	movwf	___flmul@b+2,c
  3861  00E75E  0E00               	movlw	0
  3862  00E760  6E12               	movwf	___flmul@b+3,c
  3863  00E762                     l5157:
  3864  00E762  8E11               	bsf	___flmul@b+2,7,c
  3865  00E764  D008               	goto	l5161
  3866  00E766                     l5159:
  3867  00E766  0E00               	movlw	0
  3868  00E768  6E0F               	movwf	___flmul@b,c
  3869  00E76A  0E00               	movlw	0
  3870  00E76C  6E10               	movwf	___flmul@b+1,c
  3871  00E76E  0E00               	movlw	0
  3872  00E770  6E11               	movwf	___flmul@b+2,c
  3873  00E772  0E00               	movlw	0
  3874  00E774  6E12               	movwf	___flmul@b+3,c
  3875  00E776                     l5161:
  3876  00E776  5016               	movf	___flmul@a+3,w,c
  3877  00E778  0B80               	andlw	128
  3878  00E77A  1A1B               	xorwf	___flmul@sign,f,c
  3879  00E77C  5016               	movf	___flmul@a+3,w,c
  3880  00E77E  2416               	addwf	___flmul@a+3,w,c
  3881  00E780  6E20               	movwf	___flmul@aexp,c
  3882  00E782  BE15               	btfsc	___flmul@a+2,7,c
  3883  00E784  8020               	bsf	___flmul@aexp,0,c
  3884  00E786  5020               	movf	___flmul@aexp,w,c
  3885  00E788  B4D8               	btfsc	status,2,c
  3886  00E78A  D00D               	goto	l5177
  3887  00E78C  2820               	incf	___flmul@aexp,w,c
  3888  00E78E  A4D8               	btfss	status,2,c
  3889  00E790  D008               	goto	l5175
  3890  00E792  0E00               	movlw	0
  3891  00E794  6E13               	movwf	___flmul@a,c
  3892  00E796  0E00               	movlw	0
  3893  00E798  6E14               	movwf	___flmul@a+1,c
  3894  00E79A  0E00               	movlw	0
  3895  00E79C  6E15               	movwf	___flmul@a+2,c
  3896  00E79E  0E00               	movlw	0
  3897  00E7A0  6E16               	movwf	___flmul@a+3,c
  3898  00E7A2                     l5175:
  3899  00E7A2  8E15               	bsf	___flmul@a+2,7,c
  3900  00E7A4  D008               	goto	l1306
  3901  00E7A6                     l5177:
  3902  00E7A6  0E00               	movlw	0
  3903  00E7A8  6E13               	movwf	___flmul@a,c
  3904  00E7AA  0E00               	movlw	0
  3905  00E7AC  6E14               	movwf	___flmul@a+1,c
  3906  00E7AE  0E00               	movlw	0
  3907  00E7B0  6E15               	movwf	___flmul@a+2,c
  3908  00E7B2  0E00               	movlw	0
  3909  00E7B4  6E16               	movwf	___flmul@a+3,c
  3910  00E7B6                     l1306:
  3911  00E7B6  5020               	movf	___flmul@aexp,w,c
  3912  00E7B8  B4D8               	btfsc	status,2,c
  3913  00E7BA  D003               	goto	u4780
  3914  00E7BC  5021               	movf	___flmul@bexp,w,c
  3915  00E7BE  A4D8               	btfss	status,2,c
  3916  00E7C0  D009               	goto	l5185
  3917  00E7C2                     u4780:
  3918  00E7C2  0E00               	movlw	0
  3919  00E7C4  6E0F               	movwf	?___flmul,c
  3920  00E7C6  0E00               	movlw	0
  3921  00E7C8  6E10               	movwf	?___flmul+1,c
  3922  00E7CA  0E00               	movlw	0
  3923  00E7CC  6E11               	movwf	?___flmul+2,c
  3924  00E7CE  0E00               	movlw	0
  3925  00E7D0  6E12               	movwf	?___flmul+3,c
  3926  00E7D2  0012               	return	
  3927  00E7D4                     l5185:
  3928  00E7D4  5015               	movf	___flmul@a+2,w,c
  3929  00E7D6  020F               	mulwf	___flmul@b,c
  3930  00E7D8  CFF3 F026          	movff	prodl,___flmul@temp
  3931  00E7DC  CFF4 F027          	movff	prodh,___flmul@temp+1
  3932  00E7E0  5026               	movf	___flmul@temp,w,c
  3933  00E7E2  6E1C               	movwf	___flmul@grs,c
  3934  00E7E4  6A1D               	clrf	___flmul@grs+1,c
  3935  00E7E6  6A1E               	clrf	___flmul@grs+2,c
  3936  00E7E8  6A1F               	clrf	___flmul@grs+3,c
  3937  00E7EA  5027               	movf	___flmul@temp+1,w,c
  3938  00E7EC  6E22               	movwf	___flmul@prod,c
  3939  00E7EE  6A23               	clrf	___flmul@prod+1,c
  3940  00E7F0  6A24               	clrf	___flmul@prod+2,c
  3941  00E7F2  6A25               	clrf	___flmul@prod+3,c
  3942  00E7F4  5014               	movf	___flmul@a+1,w,c
  3943  00E7F6  0210               	mulwf	___flmul@b+1,c
  3944  00E7F8  CFF3 F026          	movff	prodl,___flmul@temp
  3945  00E7FC  CFF4 F027          	movff	prodh,___flmul@temp+1
  3946  00E800  5026               	movf	___flmul@temp,w,c
  3947  00E802  261C               	addwf	___flmul@grs,f,c
  3948  00E804  0E00               	movlw	0
  3949  00E806  221D               	addwfc	___flmul@grs+1,f,c
  3950  00E808  221E               	addwfc	___flmul@grs+2,f,c
  3951  00E80A  221F               	addwfc	___flmul@grs+3,f,c
  3952  00E80C  5027               	movf	___flmul@temp+1,w,c
  3953  00E80E  2622               	addwf	___flmul@prod,f,c
  3954  00E810  0E00               	movlw	0
  3955  00E812  2223               	addwfc	___flmul@prod+1,f,c
  3956  00E814  2224               	addwfc	___flmul@prod+2,f,c
  3957  00E816  2225               	addwfc	___flmul@prod+3,f,c
  3958  00E818  5013               	movf	___flmul@a,w,c
  3959  00E81A  0211               	mulwf	___flmul@b+2,c
  3960  00E81C  CFF3 F026          	movff	prodl,___flmul@temp
  3961  00E820  CFF4 F027          	movff	prodh,___flmul@temp+1
  3962  00E824  5026               	movf	___flmul@temp,w,c
  3963  00E826  261C               	addwf	___flmul@grs,f,c
  3964  00E828  0E00               	movlw	0
  3965  00E82A  221D               	addwfc	___flmul@grs+1,f,c
  3966  00E82C  221E               	addwfc	___flmul@grs+2,f,c
  3967  00E82E  221F               	addwfc	___flmul@grs+3,f,c
  3968  00E830  5027               	movf	___flmul@temp+1,w,c
  3969  00E832  2622               	addwf	___flmul@prod,f,c
  3970  00E834  0E00               	movlw	0
  3971  00E836  2223               	addwfc	___flmul@prod+1,f,c
  3972  00E838  2224               	addwfc	___flmul@prod+2,f,c
  3973  00E83A  2225               	addwfc	___flmul@prod+3,f,c
  3974  00E83C  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3975  00E840  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3976  00E844  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3977  00E848  6A1C               	clrf	___flmul@grs,c
  3978  00E84A  5013               	movf	___flmul@a,w,c
  3979  00E84C  0210               	mulwf	___flmul@b+1,c
  3980  00E84E  CFF3 F026          	movff	prodl,___flmul@temp
  3981  00E852  CFF4 F027          	movff	prodh,___flmul@temp+1
  3982  00E856  5026               	movf	___flmul@temp,w,c
  3983  00E858  261C               	addwf	___flmul@grs,f,c
  3984  00E85A  5027               	movf	___flmul@temp+1,w,c
  3985  00E85C  221D               	addwfc	___flmul@grs+1,f,c
  3986  00E85E  0E00               	movlw	0
  3987  00E860  221E               	addwfc	___flmul@grs+2,f,c
  3988  00E862  0E00               	movlw	0
  3989  00E864  221F               	addwfc	___flmul@grs+3,f,c
  3990  00E866  5014               	movf	___flmul@a+1,w,c
  3991  00E868  020F               	mulwf	___flmul@b,c
  3992  00E86A  CFF3 F026          	movff	prodl,___flmul@temp
  3993  00E86E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3994  00E872  5026               	movf	___flmul@temp,w,c
  3995  00E874  261C               	addwf	___flmul@grs,f,c
  3996  00E876  5027               	movf	___flmul@temp+1,w,c
  3997  00E878  221D               	addwfc	___flmul@grs+1,f,c
  3998  00E87A  0E00               	movlw	0
  3999  00E87C  221E               	addwfc	___flmul@grs+2,f,c
  4000  00E87E  0E00               	movlw	0
  4001  00E880  221F               	addwfc	___flmul@grs+3,f,c
  4002  00E882  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  4003  00E886  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  4004  00E88A  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  4005  00E88E  6A1C               	clrf	___flmul@grs,c
  4006  00E890  5013               	movf	___flmul@a,w,c
  4007  00E892  020F               	mulwf	___flmul@b,c
  4008  00E894  CFF3 F026          	movff	prodl,___flmul@temp
  4009  00E898  CFF4 F027          	movff	prodh,___flmul@temp+1
  4010  00E89C  5026               	movf	___flmul@temp,w,c
  4011  00E89E  261C               	addwf	___flmul@grs,f,c
  4012  00E8A0  5027               	movf	___flmul@temp+1,w,c
  4013  00E8A2  221D               	addwfc	___flmul@grs+1,f,c
  4014  00E8A4  0E00               	movlw	0
  4015  00E8A6  221E               	addwfc	___flmul@grs+2,f,c
  4016  00E8A8  0E00               	movlw	0
  4017  00E8AA  221F               	addwfc	___flmul@grs+3,f,c
  4018  00E8AC  5015               	movf	___flmul@a+2,w,c
  4019  00E8AE  0210               	mulwf	___flmul@b+1,c
  4020  00E8B0  CFF3 F026          	movff	prodl,___flmul@temp
  4021  00E8B4  CFF4 F027          	movff	prodh,___flmul@temp+1
  4022  00E8B8  5026               	movf	___flmul@temp,w,c
  4023  00E8BA  2622               	addwf	___flmul@prod,f,c
  4024  00E8BC  5027               	movf	___flmul@temp+1,w,c
  4025  00E8BE  2223               	addwfc	___flmul@prod+1,f,c
  4026  00E8C0  0E00               	movlw	0
  4027  00E8C2  2224               	addwfc	___flmul@prod+2,f,c
  4028  00E8C4  0E00               	movlw	0
  4029  00E8C6  2225               	addwfc	___flmul@prod+3,f,c
  4030  00E8C8  5014               	movf	___flmul@a+1,w,c
  4031  00E8CA  0211               	mulwf	___flmul@b+2,c
  4032  00E8CC  CFF3 F026          	movff	prodl,___flmul@temp
  4033  00E8D0  CFF4 F027          	movff	prodh,___flmul@temp+1
  4034  00E8D4  5026               	movf	___flmul@temp,w,c
  4035  00E8D6  2622               	addwf	___flmul@prod,f,c
  4036  00E8D8  5027               	movf	___flmul@temp+1,w,c
  4037  00E8DA  2223               	addwfc	___flmul@prod+1,f,c
  4038  00E8DC  0E00               	movlw	0
  4039  00E8DE  2224               	addwfc	___flmul@prod+2,f,c
  4040  00E8E0  0E00               	movlw	0
  4041  00E8E2  2225               	addwfc	___flmul@prod+3,f,c
  4042  00E8E4  5015               	movf	___flmul@a+2,w,c
  4043  00E8E6  0211               	mulwf	___flmul@b+2,c
  4044  00E8E8  CFF3 F026          	movff	prodl,___flmul@temp
  4045  00E8EC  CFF4 F027          	movff	prodh,___flmul@temp+1
  4046  00E8F0  5026               	movf	___flmul@temp,w,c
  4047  00E8F2  6E17               	movwf	??___flmul& (0+255),c
  4048  00E8F4  5027               	movf	___flmul@temp+1,w,c
  4049  00E8F6  6E18               	movwf	(??___flmul+1)& (0+255),c
  4050  00E8F8  6A19               	clrf	(??___flmul+2)& (0+255),c
  4051  00E8FA  6A1A               	clrf	(??___flmul+3)& (0+255),c
  4052  00E8FC  C019  F01A         	movff	??___flmul+2,??___flmul+3
  4053  00E900  C018  F019         	movff	??___flmul+1,??___flmul+2
  4054  00E904  C017  F018         	movff	??___flmul,??___flmul+1
  4055  00E908  6A17               	clrf	??___flmul,c
  4056  00E90A  5017               	movf	??___flmul,w,c
  4057  00E90C  2622               	addwf	___flmul@prod,f,c
  4058  00E90E  5018               	movf	??___flmul+1,w,c
  4059  00E910  2223               	addwfc	___flmul@prod+1,f,c
  4060  00E912  5019               	movf	??___flmul+2,w,c
  4061  00E914  2224               	addwfc	___flmul@prod+2,f,c
  4062  00E916  501A               	movf	??___flmul+3,w,c
  4063  00E918  2225               	addwfc	___flmul@prod+3,f,c
  4064  00E91A  C01C  F017         	movff	___flmul@grs,??___flmul
  4065  00E91E  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  4066  00E922  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  4067  00E926  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  4068  00E92A  0E19               	movlw	25
  4069  00E92C  D005               	goto	u4790
  4070  00E92E                     u4795:
  4071  00E92E  90D8               	bcf	status,0,c
  4072  00E930  321A               	rrcf	??___flmul+3,f,c
  4073  00E932  3219               	rrcf	??___flmul+2,f,c
  4074  00E934  3218               	rrcf	??___flmul+1,f,c
  4075  00E936  3217               	rrcf	??___flmul,f,c
  4076  00E938                     u4790:
  4077  00E938  2EE8               	decfsz	wreg,f,c
  4078  00E93A  D7F9               	goto	u4795
  4079  00E93C  5017               	movf	??___flmul,w,c
  4080  00E93E  2622               	addwf	___flmul@prod,f,c
  4081  00E940  5018               	movf	??___flmul+1,w,c
  4082  00E942  2223               	addwfc	___flmul@prod+1,f,c
  4083  00E944  5019               	movf	??___flmul+2,w,c
  4084  00E946  2224               	addwfc	___flmul@prod+2,f,c
  4085  00E948  501A               	movf	??___flmul+3,w,c
  4086  00E94A  2225               	addwfc	___flmul@prod+3,f,c
  4087  00E94C  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  4088  00E950  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  4089  00E954  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  4090  00E958  6A1C               	clrf	___flmul@grs,c
  4091  00E95A  5020               	movf	___flmul@aexp,w,c
  4092  00E95C  C021  F017         	movff	___flmul@bexp,??___flmul
  4093  00E960  6A18               	clrf	(??___flmul+1)& (0+255),c
  4094  00E962  2617               	addwf	??___flmul,f,c
  4095  00E964  0E00               	movlw	0
  4096  00E966  2218               	addwfc	??___flmul+1,f,c
  4097  00E968  0E82               	movlw	130
  4098  00E96A  2417               	addwf	??___flmul,w,c
  4099  00E96C  6E26               	movwf	___flmul@temp,c
  4100  00E96E  0EFF               	movlw	255
  4101  00E970  2018               	addwfc	??___flmul+1,w,c
  4102  00E972  6E27               	movwf	___flmul@temp+1,c
  4103  00E974  D00F               	goto	l5233
  4104  00E976                     l5227:
  4105  00E976  90D8               	bcf	status,0,c
  4106  00E978  3622               	rlcf	___flmul@prod,f,c
  4107  00E97A  3623               	rlcf	___flmul@prod+1,f,c
  4108  00E97C  3624               	rlcf	___flmul@prod+2,f,c
  4109  00E97E  3625               	rlcf	___flmul@prod+3,f,c
  4110  00E980  BE1F               	btfsc	___flmul@grs+3,7,c
  4111  00E982  8022               	bsf	___flmul@prod,0,c
  4112  00E984  90D8               	bcf	status,0,c
  4113  00E986  361C               	rlcf	___flmul@grs,f,c
  4114  00E988  361D               	rlcf	___flmul@grs+1,f,c
  4115  00E98A  361E               	rlcf	___flmul@grs+2,f,c
  4116  00E98C  361F               	rlcf	___flmul@grs+3,f,c
  4117  00E98E  0626               	decf	___flmul@temp,f,c
  4118  00E990  A0D8               	btfss	status,0,c
  4119  00E992  0627               	decf	___flmul@temp+1,f,c
  4120  00E994                     l5233:
  4121  00E994  AE24               	btfss	___flmul@prod+2,7,c
  4122  00E996  D7EF               	goto	l5227
  4123  00E998  0E00               	movlw	0
  4124  00E99A  6E20               	movwf	___flmul@aexp,c
  4125  00E99C  AE1F               	btfss	___flmul@grs+3,7,c
  4126  00E99E  D017               	goto	l1315
  4127  00E9A0  0EFF               	movlw	255
  4128  00E9A2  141C               	andwf	___flmul@grs,w,c
  4129  00E9A4  6E17               	movwf	??___flmul& (0+255),c
  4130  00E9A6  0EFF               	movlw	255
  4131  00E9A8  141D               	andwf	___flmul@grs+1,w,c
  4132  00E9AA  6E18               	movwf	(??___flmul+1)& (0+255),c
  4133  00E9AC  0EFF               	movlw	255
  4134  00E9AE  141E               	andwf	___flmul@grs+2,w,c
  4135  00E9B0  6E19               	movwf	(??___flmul+2)& (0+255),c
  4136  00E9B2  0E7F               	movlw	127
  4137  00E9B4  141F               	andwf	___flmul@grs+3,w,c
  4138  00E9B6  6E1A               	movwf	(??___flmul+3)& (0+255),c
  4139  00E9B8  5017               	movf	??___flmul,w,c
  4140  00E9BA  1018               	iorwf	??___flmul+1,w,c
  4141  00E9BC  1019               	iorwf	??___flmul+2,w,c
  4142  00E9BE  101A               	iorwf	??___flmul+3,w,c
  4143  00E9C0  B4D8               	btfsc	status,2,c
  4144  00E9C2  D003               	goto	l1316
  4145  00E9C4                     u4830:
  4146  00E9C4  0E01               	movlw	1
  4147  00E9C6  6E20               	movwf	___flmul@aexp,c
  4148  00E9C8  D002               	goto	l1315
  4149  00E9CA                     l1316:
  4150  00E9CA  B022               	btfsc	___flmul@prod,0,c
  4151  00E9CC  D7FB               	goto	u4830
  4152  00E9CE                     l1315:
  4153  00E9CE  5020               	movf	___flmul@aexp,w,c
  4154  00E9D0  B4D8               	btfsc	status,2,c
  4155  00E9D2  D01F               	goto	l5253
  4156  00E9D4  0E01               	movlw	1
  4157  00E9D6  2622               	addwf	___flmul@prod,f,c
  4158  00E9D8  0E00               	movlw	0
  4159  00E9DA  2223               	addwfc	___flmul@prod+1,f,c
  4160  00E9DC  2224               	addwfc	___flmul@prod+2,f,c
  4161  00E9DE  2225               	addwfc	___flmul@prod+3,f,c
  4162  00E9E0  A025               	btfss	___flmul@prod+3,0,c
  4163  00E9E2  D017               	goto	l5253
  4164  00E9E4  C022  F017         	movff	___flmul@prod,??___flmul
  4165  00E9E8  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  4166  00E9EC  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  4167  00E9F0  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  4168  00E9F4  341A               	rlcf	??___flmul+3,w,c
  4169  00E9F6  321A               	rrcf	??___flmul+3,f,c
  4170  00E9F8  3219               	rrcf	??___flmul+2,f,c
  4171  00E9FA  3218               	rrcf	??___flmul+1,f,c
  4172  00E9FC  3217               	rrcf	??___flmul,f,c
  4173  00E9FE  C017  F022         	movff	??___flmul,___flmul@prod
  4174  00EA02  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  4175  00EA06  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  4176  00EA0A  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  4177  00EA0E  4A26               	infsnz	___flmul@temp,f,c
  4178  00EA10  2A27               	incf	___flmul@temp+1,f,c
  4179  00EA12                     l5253:
  4180  00EA12  BE27               	btfsc	___flmul@temp+1,7,c
  4181  00EA14  D00D               	goto	l5257
  4182  00EA16  5027               	movf	___flmul@temp+1,w,c
  4183  00EA18  E103               	bnz	u4870
  4184  00EA1A  2826               	incf	___flmul@temp,w,c
  4185  00EA1C  A0D8               	btfss	status,0,c
  4186  00EA1E  D008               	goto	l5257
  4187  00EA20                     u4870:
  4188  00EA20  0E00               	movlw	0
  4189  00EA22  6E22               	movwf	___flmul@prod,c
  4190  00EA24  0E00               	movlw	0
  4191  00EA26  6E23               	movwf	___flmul@prod+1,c
  4192  00EA28  0E80               	movlw	128
  4193  00EA2A  6E24               	movwf	___flmul@prod+2,c
  4194  00EA2C  0E7F               	movlw	127
  4195  00EA2E  D020               	goto	L5
  4196  00EA30                     l5257:
  4197  00EA30  BE27               	btfsc	___flmul@temp+1,7,c
  4198  00EA32  D005               	goto	u4880
  4199  00EA34  5027               	movf	___flmul@temp+1,w,c
  4200  00EA36  E10E               	bnz	l1323
  4201  00EA38  0426               	decf	___flmul@temp,w,c
  4202  00EA3A  B0D8               	btfsc	status,0,c
  4203  00EA3C  D00B               	goto	l1323
  4204  00EA3E                     u4880:
  4205  00EA3E  0E00               	movlw	0
  4206  00EA40  6E22               	movwf	___flmul@prod,c
  4207  00EA42  0E00               	movlw	0
  4208  00EA44  6E23               	movwf	___flmul@prod+1,c
  4209  00EA46  0E00               	movlw	0
  4210  00EA48  6E24               	movwf	___flmul@prod+2,c
  4211  00EA4A  0E00               	movlw	0
  4212  00EA4C  6E25               	movwf	___flmul@prod+3,c
  4213  00EA4E  0E00               	movlw	0
  4214  00EA50  6E1B               	movwf	___flmul@sign,c
  4215  00EA52  D00F               	goto	l5269
  4216  00EA54                     l1323:
  4217  00EA54  C026  F021         	movff	___flmul@temp,___flmul@bexp
  4218  00EA58  0EFF               	movlw	255
  4219  00EA5A  1622               	andwf	___flmul@prod,f,c
  4220  00EA5C  0EFF               	movlw	255
  4221  00EA5E  1623               	andwf	___flmul@prod+1,f,c
  4222  00EA60  0E7F               	movlw	127
  4223  00EA62  1624               	andwf	___flmul@prod+2,f,c
  4224  00EA64  0E00               	movlw	0
  4225  00EA66  1625               	andwf	___flmul@prod+3,f,c
  4226  00EA68  B021               	btfsc	___flmul@bexp,0,c
  4227  00EA6A  8E24               	bsf	___flmul@prod+2,7,c
  4228  00EA6C  90D8               	bcf	status,0,c
  4229  00EA6E  3021               	rrcf	___flmul@bexp,w,c
  4230  00EA70                     L5:
  4231  00EA70  6E25               	movwf	___flmul@prod+3,c
  4232  00EA72                     l5269:
  4233  00EA72  501B               	movf	___flmul@sign,w,c
  4234  00EA74  1225               	iorwf	___flmul@prod+3,f,c
  4235  00EA76  C022  F00F         	movff	___flmul@prod,?___flmul
  4236  00EA7A  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  4237  00EA7E  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  4238  00EA82  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  4239  00EA86  0012               	return		;funcret
  4240  00EA88                     __end_of___flmul:
  4241                           	opt callstack 0
  4242                           
  4243 ;; *************** function ___fladd *****************
  4244 ;; Defined at:
  4245 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcadd.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  b               4   39[COMRAM] unsigned char 
  4248 ;;  a               4   43[COMRAM] unsigned char 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  grs             1   54[COMRAM] unsigned char 
  4251 ;;  bexp            1   53[COMRAM] unsigned char 
  4252 ;;  aexp            1   52[COMRAM] unsigned char 
  4253 ;;  signs           1   51[COMRAM] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  4   39[COMRAM] unsigned char 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4263 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;Total ram usage:       16 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_start
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text5
  4277  00E42A                     __ptext5:
  4278                           	opt callstack 0
  4279  00E42A                     ___fladd:
  4280                           	opt callstack 29
  4281                           
  4282                           ;incstack = 0
  4283  00E42A  502B               	movf	___fladd@b+3,w,c
  4284  00E42C  0B80               	andlw	128
  4285  00E42E  6E34               	movwf	___fladd@signs,c
  4286  00E430  502B               	movf	___fladd@b+3,w,c
  4287  00E432  242B               	addwf	___fladd@b+3,w,c
  4288  00E434  6E36               	movwf	___fladd@bexp,c
  4289  00E436  BE2A               	btfsc	___fladd@b+2,7,c
  4290  00E438  8036               	bsf	___fladd@bexp,0,c
  4291  00E43A  5036               	movf	___fladd@bexp,w,c
  4292  00E43C  B4D8               	btfsc	status,2,c
  4293  00E43E  D00D               	goto	l4959
  4294  00E440  2836               	incf	___fladd@bexp,w,c
  4295  00E442  A4D8               	btfss	status,2,c
  4296  00E444  D008               	goto	l4955
  4297  00E446  0E00               	movlw	0
  4298  00E448  6E28               	movwf	___fladd@b,c
  4299  00E44A  0E00               	movlw	0
  4300  00E44C  6E29               	movwf	___fladd@b+1,c
  4301  00E44E  0E00               	movlw	0
  4302  00E450  6E2A               	movwf	___fladd@b+2,c
  4303  00E452  0E00               	movlw	0
  4304  00E454  6E2B               	movwf	___fladd@b+3,c
  4305  00E456                     l4955:
  4306  00E456  8E2A               	bsf	___fladd@b+2,7,c
  4307  00E458  D006               	goto	L6
  4308  00E45A                     l4959:
  4309  00E45A  0E00               	movlw	0
  4310  00E45C  6E28               	movwf	___fladd@b,c
  4311  00E45E  0E00               	movlw	0
  4312  00E460  6E29               	movwf	___fladd@b+1,c
  4313  00E462  0E00               	movlw	0
  4314  00E464  6E2A               	movwf	___fladd@b+2,c
  4315  00E466                     L6:
  4316  00E466  0E00               	movlw	0
  4317  00E468  6E2B               	movwf	___fladd@b+3,c
  4318  00E46A  502F               	movf	___fladd@a+3,w,c
  4319  00E46C  0B80               	andlw	128
  4320  00E46E  6E35               	movwf	___fladd@aexp,c
  4321  00E470  5034               	movf	___fladd@signs,w,c
  4322  00E472  1835               	xorwf	___fladd@aexp,w,c
  4323  00E474  A4D8               	btfss	status,2,c
  4324  00E476  8C34               	bsf	___fladd@signs,6,c
  4325  00E478  502F               	movf	___fladd@a+3,w,c
  4326  00E47A  242F               	addwf	___fladd@a+3,w,c
  4327  00E47C  6E35               	movwf	___fladd@aexp,c
  4328  00E47E  BE2E               	btfsc	___fladd@a+2,7,c
  4329  00E480  8035               	bsf	___fladd@aexp,0,c
  4330  00E482  5035               	movf	___fladd@aexp,w,c
  4331  00E484  B4D8               	btfsc	status,2,c
  4332  00E486  D00D               	goto	l4983
  4333  00E488  2835               	incf	___fladd@aexp,w,c
  4334  00E48A  A4D8               	btfss	status,2,c
  4335  00E48C  D008               	goto	l4979
  4336  00E48E  0E00               	movlw	0
  4337  00E490  6E2C               	movwf	___fladd@a,c
  4338  00E492  0E00               	movlw	0
  4339  00E494  6E2D               	movwf	___fladd@a+1,c
  4340  00E496  0E00               	movlw	0
  4341  00E498  6E2E               	movwf	___fladd@a+2,c
  4342  00E49A  0E00               	movlw	0
  4343  00E49C  6E2F               	movwf	___fladd@a+3,c
  4344  00E49E                     l4979:
  4345  00E49E  8E2E               	bsf	___fladd@a+2,7,c
  4346  00E4A0  D006               	goto	L7
  4347  00E4A2                     l4983:
  4348  00E4A2  0E00               	movlw	0
  4349  00E4A4  6E2C               	movwf	___fladd@a,c
  4350  00E4A6  0E00               	movlw	0
  4351  00E4A8  6E2D               	movwf	___fladd@a+1,c
  4352  00E4AA  0E00               	movlw	0
  4353  00E4AC  6E2E               	movwf	___fladd@a+2,c
  4354  00E4AE                     L7:
  4355  00E4AE  0E00               	movlw	0
  4356  00E4B0  6E2F               	movwf	___fladd@a+3,c
  4357  00E4B2  5036               	movf	___fladd@bexp,w,c
  4358  00E4B4  5C35               	subwf	___fladd@aexp,w,c
  4359  00E4B6  B0D8               	btfsc	status,0,c
  4360  00E4B8  D022               	goto	l5021
  4361  00E4BA  AC34               	btfss	___fladd@signs,6,c
  4362  00E4BC  D002               	goto	l4991
  4363  00E4BE  0E80               	movlw	128
  4364  00E4C0  1A34               	xorwf	___fladd@signs,f,c
  4365  00E4C2                     l4991:
  4366  00E4C2  C036  F037         	movff	___fladd@bexp,___fladd@grs
  4367  00E4C6  C035  F036         	movff	___fladd@aexp,___fladd@bexp
  4368  00E4CA  C037  F035         	movff	___fladd@grs,___fladd@aexp
  4369  00E4CE  C028  F037         	movff	___fladd@b,___fladd@grs
  4370  00E4D2  C02C  F028         	movff	___fladd@a,___fladd@b
  4371  00E4D6  C037  F02C         	movff	___fladd@grs,___fladd@a
  4372  00E4DA  C029  F037         	movff	___fladd@b+1,___fladd@grs
  4373  00E4DE  C02D  F029         	movff	___fladd@a+1,___fladd@b+1
  4374  00E4E2  C037  F02D         	movff	___fladd@grs,___fladd@a+1
  4375  00E4E6  C02A  F037         	movff	___fladd@b+2,___fladd@grs
  4376  00E4EA  C02E  F02A         	movff	___fladd@a+2,___fladd@b+2
  4377  00E4EE  C037  F02E         	movff	___fladd@grs,___fladd@a+2
  4378  00E4F2  C02B  F037         	movff	___fladd@b+3,___fladd@grs
  4379  00E4F6  C02F  F02B         	movff	___fladd@a+3,___fladd@b+3
  4380  00E4FA  C037  F02F         	movff	___fladd@grs,___fladd@a+3
  4381  00E4FE                     l5021:
  4382  00E4FE  0E00               	movlw	0
  4383  00E500  6E37               	movwf	___fladd@grs,c
  4384  00E502  5036               	movf	___fladd@bexp,w,c
  4385  00E504  C035  F030         	movff	___fladd@aexp,??___fladd
  4386  00E508  6A31               	clrf	(??___fladd+1)& (0+255),c
  4387  00E50A  5E30               	subwf	??___fladd,f,c
  4388  00E50C  0E00               	movlw	0
  4389  00E50E  5A31               	subwfb	??___fladd+1,f,c
  4390  00E510  BE31               	btfsc	??___fladd+1,7,c
  4391  00E512  D02C               	goto	l1221
  4392  00E514  5031               	movf	??___fladd+1,w,c
  4393  00E516  E104               	bnz	u4410
  4394  00E518  0E1A               	movlw	26
  4395  00E51A  5C30               	subwf	??___fladd,w,c
  4396  00E51C  A0D8               	btfss	status,0,c
  4397  00E51E  D026               	goto	l1221
  4398  00E520                     u4410:
  4399  00E520  5028               	movf	___fladd@b,w,c
  4400  00E522  1029               	iorwf	___fladd@b+1,w,c
  4401  00E524  102A               	iorwf	___fladd@b+2,w,c
  4402  00E526  102B               	iorwf	___fladd@b+3,w,c
  4403  00E528  B4D8               	btfsc	status,2,c
  4404  00E52A  D002               	goto	u4420
  4405  00E52C  0E01               	movlw	1
  4406  00E52E  D001               	goto	u4430
  4407  00E530                     u4420:
  4408  00E530  0E00               	movlw	0
  4409  00E532                     u4430:
  4410  00E532  6E37               	movwf	___fladd@grs,c
  4411  00E534  0E00               	movlw	0
  4412  00E536  6E28               	movwf	___fladd@b,c
  4413  00E538  0E00               	movlw	0
  4414  00E53A  6E29               	movwf	___fladd@b+1,c
  4415  00E53C  0E00               	movlw	0
  4416  00E53E  6E2A               	movwf	___fladd@b+2,c
  4417  00E540  0E00               	movlw	0
  4418  00E542  6E2B               	movwf	___fladd@b+3,c
  4419  00E544  C035  F036         	movff	___fladd@aexp,___fladd@bexp
  4420  00E548  D015               	goto	u4460
  4421  00E54A                     l1222:
  4422  00E54A  A037               	btfss	___fladd@grs,0,c
  4423  00E54C  D005               	goto	l5033
  4424  00E54E  90D8               	bcf	status,0,c
  4425  00E550  3037               	rrcf	___fladd@grs,w,c
  4426  00E552  0901               	iorlw	1
  4427  00E554  6E37               	movwf	___fladd@grs,c
  4428  00E556  D002               	goto	l5035
  4429  00E558                     l5033:
  4430  00E558  90D8               	bcf	status,0,c
  4431  00E55A  3237               	rrcf	___fladd@grs,f,c
  4432  00E55C                     l5035:
  4433  00E55C  B028               	btfsc	___fladd@b,0,c
  4434  00E55E  8E37               	bsf	___fladd@grs,7,c
  4435  00E560  342B               	rlcf	___fladd@b+3,w,c
  4436  00E562  322B               	rrcf	___fladd@b+3,f,c
  4437  00E564  322A               	rrcf	___fladd@b+2,f,c
  4438  00E566  3229               	rrcf	___fladd@b+1,f,c
  4439  00E568  3228               	rrcf	___fladd@b,f,c
  4440  00E56A  2A36               	incf	___fladd@bexp,f,c
  4441  00E56C                     l1221:
  4442  00E56C  5035               	movf	___fladd@aexp,w,c
  4443  00E56E  5C36               	subwf	___fladd@bexp,w,c
  4444  00E570  A0D8               	btfss	status,0,c
  4445  00E572  D7EB               	goto	l1222
  4446  00E574                     u4460:
  4447  00E574  BC34               	btfsc	___fladd@signs,6,c
  4448  00E576  D028               	goto	l5067
  4449  00E578  5036               	movf	___fladd@bexp,w,c
  4450  00E57A  A4D8               	btfss	status,2,c
  4451  00E57C  D009               	goto	l5049
  4452  00E57E  0E00               	movlw	0
  4453  00E580  6E28               	movwf	?___fladd,c
  4454  00E582  0E00               	movlw	0
  4455  00E584  6E29               	movwf	?___fladd+1,c
  4456  00E586  0E00               	movlw	0
  4457  00E588  6E2A               	movwf	?___fladd+2,c
  4458  00E58A  0E00               	movlw	0
  4459  00E58C  6E2B               	movwf	?___fladd+3,c
  4460  00E58E  0012               	return	
  4461  00E590                     l5049:
  4462  00E590  502C               	movf	___fladd@a,w,c
  4463  00E592  2628               	addwf	___fladd@b,f,c
  4464  00E594  502D               	movf	___fladd@a+1,w,c
  4465  00E596  2229               	addwfc	___fladd@b+1,f,c
  4466  00E598  502E               	movf	___fladd@a+2,w,c
  4467  00E59A  222A               	addwfc	___fladd@b+2,f,c
  4468  00E59C  502F               	movf	___fladd@a+3,w,c
  4469  00E59E  222B               	addwfc	___fladd@b+3,f,c
  4470  00E5A0  A02B               	btfss	___fladd@b+3,0,c
  4471  00E5A2  D071               	goto	u4590
  4472  00E5A4  A037               	btfss	___fladd@grs,0,c
  4473  00E5A6  D005               	goto	l5057
  4474  00E5A8  90D8               	bcf	status,0,c
  4475  00E5AA  3037               	rrcf	___fladd@grs,w,c
  4476  00E5AC  0901               	iorlw	1
  4477  00E5AE  6E37               	movwf	___fladd@grs,c
  4478  00E5B0  D002               	goto	l5059
  4479  00E5B2                     l5057:
  4480  00E5B2  90D8               	bcf	status,0,c
  4481  00E5B4  3237               	rrcf	___fladd@grs,f,c
  4482  00E5B6                     l5059:
  4483  00E5B6  B028               	btfsc	___fladd@b,0,c
  4484  00E5B8  8E37               	bsf	___fladd@grs,7,c
  4485  00E5BA  342B               	rlcf	___fladd@b+3,w,c
  4486  00E5BC  322B               	rrcf	___fladd@b+3,f,c
  4487  00E5BE  322A               	rrcf	___fladd@b+2,f,c
  4488  00E5C0  3229               	rrcf	___fladd@b+1,f,c
  4489  00E5C2  3228               	rrcf	___fladd@b,f,c
  4490  00E5C4  2A36               	incf	___fladd@bexp,f,c
  4491  00E5C6  D05F               	goto	u4590
  4492  00E5C8                     l5067:
  4493  00E5C8  502C               	movf	___fladd@a,w,c
  4494  00E5CA  5C28               	subwf	___fladd@b,w,c
  4495  00E5CC  502D               	movf	___fladd@a+1,w,c
  4496  00E5CE  5829               	subwfb	___fladd@b+1,w,c
  4497  00E5D0  502E               	movf	___fladd@a+2,w,c
  4498  00E5D2  582A               	subwfb	___fladd@b+2,w,c
  4499  00E5D4  502B               	movf	___fladd@b+3,w,c
  4500  00E5D6  0A80               	xorlw	128
  4501  00E5D8  6E30               	movwf	??___fladd& (0+255),c
  4502  00E5DA  502F               	movf	___fladd@a+3,w,c
  4503  00E5DC  0A80               	xorlw	128
  4504  00E5DE  5830               	subwfb	??___fladd& (0+255),w,c
  4505  00E5E0  B0D8               	btfsc	status,0,c
  4506  00E5E2  D025               	goto	l5077
  4507  00E5E4  5028               	movf	___fladd@b,w,c
  4508  00E5E6  5C2C               	subwf	___fladd@a,w,c
  4509  00E5E8  6E30               	movwf	??___fladd& (0+255),c
  4510  00E5EA  5029               	movf	___fladd@b+1,w,c
  4511  00E5EC  582D               	subwfb	___fladd@a+1,w,c
  4512  00E5EE  6E31               	movwf	(??___fladd+1)& (0+255),c
  4513  00E5F0  502A               	movf	___fladd@b+2,w,c
  4514  00E5F2  582E               	subwfb	___fladd@a+2,w,c
  4515  00E5F4  6E32               	movwf	(??___fladd+2)& (0+255),c
  4516  00E5F6  502B               	movf	___fladd@b+3,w,c
  4517  00E5F8  582F               	subwfb	___fladd@a+3,w,c
  4518  00E5FA  6E33               	movwf	(??___fladd+3)& (0+255),c
  4519  00E5FC  0EFF               	movlw	255
  4520  00E5FE  2430               	addwf	??___fladd,w,c
  4521  00E600  6E28               	movwf	___fladd@b,c
  4522  00E602  0EFF               	movlw	255
  4523  00E604  2031               	addwfc	??___fladd+1,w,c
  4524  00E606  6E29               	movwf	___fladd@b+1,c
  4525  00E608  0EFF               	movlw	255
  4526  00E60A  2032               	addwfc	??___fladd+2,w,c
  4527  00E60C  6E2A               	movwf	___fladd@b+2,c
  4528  00E60E  0EFF               	movlw	255
  4529  00E610  2033               	addwfc	??___fladd+3,w,c
  4530  00E612  6E2B               	movwf	___fladd@b+3,c
  4531  00E614  0E80               	movlw	128
  4532  00E616  1A34               	xorwf	___fladd@signs,f,c
  4533  00E618  6C37               	negf	___fladd@grs,c
  4534  00E61A  5037               	movf	___fladd@grs,w,c
  4535  00E61C  A4D8               	btfss	status,2,c
  4536  00E61E  D00F               	goto	l1237
  4537  00E620  0E01               	movlw	1
  4538  00E622  2628               	addwf	___fladd@b,f,c
  4539  00E624  0E00               	movlw	0
  4540  00E626  2229               	addwfc	___fladd@b+1,f,c
  4541  00E628  222A               	addwfc	___fladd@b+2,f,c
  4542  00E62A  222B               	addwfc	___fladd@b+3,f,c
  4543  00E62C  D008               	goto	l1237
  4544  00E62E                     l5077:
  4545  00E62E  502C               	movf	___fladd@a,w,c
  4546  00E630  5E28               	subwf	___fladd@b,f,c
  4547  00E632  502D               	movf	___fladd@a+1,w,c
  4548  00E634  5A29               	subwfb	___fladd@b+1,f,c
  4549  00E636  502E               	movf	___fladd@a+2,w,c
  4550  00E638  5A2A               	subwfb	___fladd@b+2,f,c
  4551  00E63A  502F               	movf	___fladd@a+3,w,c
  4552  00E63C  5A2B               	subwfb	___fladd@b+3,f,c
  4553  00E63E                     l1237:
  4554  00E63E  5028               	movf	___fladd@b,w,c
  4555  00E640  1029               	iorwf	___fladd@b+1,w,c
  4556  00E642  102A               	iorwf	___fladd@b+2,w,c
  4557  00E644  102B               	iorwf	___fladd@b+3,w,c
  4558  00E646  A4D8               	btfss	status,2,c
  4559  00E648  D01C               	goto	l5101
  4560  00E64A  5037               	movf	___fladd@grs,w,c
  4561  00E64C  A4D8               	btfss	status,2,c
  4562  00E64E  D019               	goto	l5101
  4563  00E650  0E00               	movlw	0
  4564  00E652  6E28               	movwf	?___fladd,c
  4565  00E654  0E00               	movlw	0
  4566  00E656  6E29               	movwf	?___fladd+1,c
  4567  00E658  0E00               	movlw	0
  4568  00E65A  6E2A               	movwf	?___fladd+2,c
  4569  00E65C  0E00               	movlw	0
  4570  00E65E  6E2B               	movwf	?___fladd+3,c
  4571  00E660  0012               	return	
  4572  00E662                     l5085:
  4573  00E662  90D8               	bcf	status,0,c
  4574  00E664  3628               	rlcf	___fladd@b,f,c
  4575  00E666  3629               	rlcf	___fladd@b+1,f,c
  4576  00E668  362A               	rlcf	___fladd@b+2,f,c
  4577  00E66A  362B               	rlcf	___fladd@b+3,f,c
  4578  00E66C  BE37               	btfsc	___fladd@grs,7,c
  4579  00E66E  8028               	bsf	___fladd@b,0,c
  4580  00E670  A037               	btfss	___fladd@grs,0,c
  4581  00E672  D002               	goto	l5095
  4582  00E674  80D8               	bsf	status,0,c
  4583  00E676  D001               	goto	L8
  4584  00E678                     l5095:
  4585  00E678  90D8               	bcf	status,0,c
  4586  00E67A                     L8:
  4587  00E67A  3637               	rlcf	___fladd@grs,f,c
  4588  00E67C  5036               	movf	___fladd@bexp,w,c
  4589  00E67E  A4D8               	btfss	status,2,c
  4590  00E680  0636               	decf	___fladd@bexp,f,c
  4591  00E682                     l5101:
  4592  00E682  AE2A               	btfss	___fladd@b+2,7,c
  4593  00E684  D7EE               	goto	l5085
  4594  00E686                     u4590:
  4595  00E686  0E00               	movlw	0
  4596  00E688  6E35               	movwf	___fladd@aexp,c
  4597  00E68A  AE37               	btfss	___fladd@grs,7,c
  4598  00E68C  D00B               	goto	l1246
  4599  00E68E  C037  F030         	movff	___fladd@grs,??___fladd
  4600  00E692  0E7F               	movlw	127
  4601  00E694  1630               	andwf	??___fladd,f,c
  4602  00E696  B4D8               	btfsc	status,2,c
  4603  00E698  D003               	goto	l1247
  4604  00E69A                     u4610:
  4605  00E69A  0E01               	movlw	1
  4606  00E69C  6E35               	movwf	___fladd@aexp,c
  4607  00E69E  D002               	goto	l1246
  4608  00E6A0                     l1247:
  4609  00E6A0  B028               	btfsc	___fladd@b,0,c
  4610  00E6A2  D7FB               	goto	u4610
  4611  00E6A4                     l1246:
  4612  00E6A4  5035               	movf	___fladd@aexp,w,c
  4613  00E6A6  B4D8               	btfsc	status,2,c
  4614  00E6A8  D020               	goto	l5121
  4615  00E6AA  0E01               	movlw	1
  4616  00E6AC  2628               	addwf	___fladd@b,f,c
  4617  00E6AE  0E00               	movlw	0
  4618  00E6B0  2229               	addwfc	___fladd@b+1,f,c
  4619  00E6B2  222A               	addwfc	___fladd@b+2,f,c
  4620  00E6B4  222B               	addwfc	___fladd@b+3,f,c
  4621  00E6B6  A02B               	btfss	___fladd@b+3,0,c
  4622  00E6B8  D018               	goto	l5121
  4623  00E6BA  C028  F030         	movff	___fladd@b,??___fladd
  4624  00E6BE  C029  F031         	movff	___fladd@b+1,??___fladd+1
  4625  00E6C2  C02A  F032         	movff	___fladd@b+2,??___fladd+2
  4626  00E6C6  C02B  F033         	movff	___fladd@b+3,??___fladd+3
  4627  00E6CA  3433               	rlcf	??___fladd+3,w,c
  4628  00E6CC  3233               	rrcf	??___fladd+3,f,c
  4629  00E6CE  3232               	rrcf	??___fladd+2,f,c
  4630  00E6D0  3231               	rrcf	??___fladd+1,f,c
  4631  00E6D2  3230               	rrcf	??___fladd,f,c
  4632  00E6D4  C030  F028         	movff	??___fladd,___fladd@b
  4633  00E6D8  C031  F029         	movff	??___fladd+1,___fladd@b+1
  4634  00E6DC  C032  F02A         	movff	??___fladd+2,___fladd@b+2
  4635  00E6E0  C033  F02B         	movff	??___fladd+3,___fladd@b+3
  4636  00E6E4  2836               	incf	___fladd@bexp,w,c
  4637  00E6E6  A4D8               	btfss	status,2,c
  4638  00E6E8  2A36               	incf	___fladd@bexp,f,c
  4639  00E6EA                     l5121:
  4640  00E6EA  2836               	incf	___fladd@bexp,w,c
  4641  00E6EC  B4D8               	btfsc	status,2,c
  4642  00E6EE  D003               	goto	u4670
  4643  00E6F0  5036               	movf	___fladd@bexp,w,c
  4644  00E6F2  A4D8               	btfss	status,2,c
  4645  00E6F4  D00D               	goto	l5129
  4646  00E6F6                     u4670:
  4647  00E6F6  0E00               	movlw	0
  4648  00E6F8  6E28               	movwf	___fladd@b,c
  4649  00E6FA  0E00               	movlw	0
  4650  00E6FC  6E29               	movwf	___fladd@b+1,c
  4651  00E6FE  0E00               	movlw	0
  4652  00E700  6E2A               	movwf	___fladd@b+2,c
  4653  00E702  0E00               	movlw	0
  4654  00E704  6E2B               	movwf	___fladd@b+3,c
  4655  00E706  5036               	movf	___fladd@bexp,w,c
  4656  00E708  A4D8               	btfss	status,2,c
  4657  00E70A  D002               	goto	l5129
  4658  00E70C  0E00               	movlw	0
  4659  00E70E  6E34               	movwf	___fladd@signs,c
  4660  00E710                     l5129:
  4661  00E710  A036               	btfss	___fladd@bexp,0,c
  4662  00E712  D002               	goto	l5133
  4663  00E714  8E2A               	bsf	___fladd@b+2,7,c
  4664  00E716  D001               	goto	l5135
  4665  00E718                     l5133:
  4666  00E718  9E2A               	bcf	___fladd@b+2,7,c
  4667  00E71A                     l5135:
  4668  00E71A  90D8               	bcf	status,0,c
  4669  00E71C  3036               	rrcf	___fladd@bexp,w,c
  4670  00E71E  6E2B               	movwf	___fladd@b+3,c
  4671  00E720  BE34               	btfsc	___fladd@signs,7,c
  4672  00E722  8E2B               	bsf	___fladd@b+3,7,c
  4673  00E724  C028  F028         	movff	___fladd@b,?___fladd
  4674  00E728  C029  F029         	movff	___fladd@b+1,?___fladd+1
  4675  00E72C  C02A  F02A         	movff	___fladd@b+2,?___fladd+2
  4676  00E730  C02B  F02B         	movff	___fladd@b+3,?___fladd+3
  4677  00E734  0012               	return		;funcret
  4678  00E736                     __end_of___fladd:
  4679                           	opt callstack 0
  4680                           
  4681 ;; *************** function _selectLog *****************
  4682 ;; Defined at:
  4683 ;;		line 741 in file "main.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  menu            2  113[COMRAM] PTR unsigned char 
  4686 ;;		 -> main@menu(1), 
  4687 ;;  displayRun      2  115[COMRAM] PTR struct .
  4688 ;;		 -> main@displayRun(43), 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;Total ram usage:        6 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:   11
  4707 ;; This function calls:
  4708 ;;		_Read_eep
  4709 ;;		_lcdInst
  4710 ;;		_printf
  4711 ;; This function is called by:
  4712 ;;		_main
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text6
  4717  00D356                     __ptext6:
  4718                           	opt callstack 0
  4719  00D356                     _selectLog:
  4720                           	opt callstack 19
  4721                           
  4722                           ;main.c: 742:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  4723                           
  4724                           ;incstack = 0
  4725  00D356  0E01               	movlw	1
  4726  00D358  ECEA  F061         	call	_lcdInst
  4727  00D35C  0E11               	movlw	17
  4728  00D35E  6E76               	movwf	??_selectLog& (0+255),c
  4729  00D360  0E3A               	movlw	58
  4730  00D362                     u6427:
  4731  00D362  2EE8               	decfsz	wreg,f,c
  4732  00D364  D7FE               	bra	u6427
  4733  00D366  2E76               	decfsz	??_selectLog& (0+255),f,c
  4734  00D368  D7FC               	bra	u6427
  4735  00D36A  D000               	nop2	
  4736  00D36C  0E80               	movlw	128
  4737  00D36E  ECEA  F061         	call	_lcdInst
  4738                           
  4739                           ;main.c: 744:     printf("Choose log to");
  4740  00D372  0EE7               	movlw	low STR_23
  4741  00D374  6E66               	movwf	printf@fmt,c
  4742  00D376  0EFE               	movlw	high STR_23
  4743  00D378  6E67               	movwf	printf@fmt+1,c
  4744  00D37A  EC55  F062         	call	_printf	;wreg free
  4745  00D37E  0EC0               	movlw	192
  4746  00D380  ECEA  F061         	call	_lcdInst
  4747                           
  4748                           ;main.c: 746:     printf("view:");
  4749  00D384  0EED               	movlw	low STR_28
  4750  00D386  6E66               	movwf	printf@fmt,c
  4751  00D388  0EFF               	movlw	high STR_28
  4752  00D38A  6E67               	movwf	printf@fmt+1,c
  4753  00D38C  EC55  F062         	call	_printf	;wreg free
  4754  00D390  0E90               	movlw	144
  4755  00D392  ECEA  F061         	call	_lcdInst
  4756                           
  4757                           ;main.c: 748:     printf("(1) (2) (3) (4)");
  4758  00D396  0E6C               	movlw	low STR_25
  4759  00D398  6E66               	movwf	printf@fmt,c
  4760  00D39A  0EFE               	movlw	high STR_25
  4761  00D39C  6E67               	movwf	printf@fmt+1,c
  4762  00D39E  EC55  F062         	call	_printf	;wreg free
  4763  00D3A2  0ED0               	movlw	208
  4764  00D3A4  ECEA  F061         	call	_lcdInst
  4765                           
  4766                           ;main.c: 750:     printf("(D) Main menu");
  4767  00D3A8  0E1F               	movlw	low STR_11
  4768  00D3AA  6E66               	movwf	printf@fmt,c
  4769  00D3AC  0EFF               	movlw	high STR_11
  4770  00D3AE  6E67               	movwf	printf@fmt+1,c
  4771  00D3B0  EC55  F062         	call	_printf	;wreg free
  4772  00D3B4                     l379:
  4773  00D3B4  A281               	btfss	3969,1,c	;volatile
  4774  00D3B6  D7FE               	goto	l379
  4775                           
  4776                           ;main.c: 752:     keypress = (PORTB & 0xF0) >> 4;
  4777  00D3B8  3881               	swapf	3969,w,c	;volatile
  4778  00D3BA  0B0F               	andlw	15
  4779  00D3BC  0B0F               	andlw	15
  4780  00D3BE  0100               	movlb	0	; () banked
  4781  00D3C0  6FFD               	movwf	_keypress& (0+255),b	;volatile
  4782                           
  4783                           ;main.c: 753:     switch (keypress){
  4784  00D3C2  D06A               	goto	l6231
  4785  00D3C4                     l6171:
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;main.c: 755:             for (i=0;i<sizeof(run);i++){
  4789  00D3C4  0E00               	movlw	0
  4790  00D3C6  6FFE               	movwf	_i& (0+255),b	;volatile
  4791  00D3C8                     l6173:
  4792                           
  4793                           ; BSR set to: 0
  4794  00D3C8  0E2A               	movlw	42
  4795  00D3CA  65FE               	cpfsgt	_i& (0+255),b	;volatile
  4796  00D3CC  D001               	goto	l6177
  4797  00D3CE  D00F               	goto	l6183
  4798  00D3D0                     l6177:
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;main.c: 756:                 *((char *)displayRun + i) = Read_eep(i);
  4802  00D3D0  51FE               	movf	_i& (0+255),w,b	;volatile
  4803  00D3D2  2474               	addwf	selectLog@displayRun,w,c
  4804  00D3D4  6ED9               	movwf	fsr2l,c
  4805  00D3D6  0E00               	movlw	0
  4806  00D3D8  2075               	addwfc	selectLog@displayRun+1,w,c
  4807  00D3DA  6EDA               	movwf	fsr2h,c
  4808  00D3DC  C0FE  F001         	movff	_i,Read_eep@badd	;volatile
  4809  00D3E0  6A02               	clrf	Read_eep@badd+1,c
  4810  00D3E2  EC13  F062         	call	_Read_eep	;wreg free
  4811  00D3E6  6EDF               	movwf	indf2,c
  4812                           
  4813                           ;main.c: 757:             }
  4814  00D3E8  0100               	movlb	0	; () banked
  4815  00D3EA  2BFE               	incf	_i& (0+255),f,b	;volatile
  4816  00D3EC  D7ED               	goto	l6173
  4817  00D3EE                     l6183:
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;main.c: 758:             *menu = 3;
  4821  00D3EE  C072  FFD9         	movff	selectLog@menu,fsr2l
  4822  00D3F2  C073  FFDA         	movff	selectLog@menu+1,fsr2h
  4823  00D3F6  0E03               	movlw	3
  4824  00D3F8  D04D               	goto	L9
  4825  00D3FA                     l6185:
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;main.c: 761:             for (i=0;i<sizeof(run);i++){
  4829  00D3FA  0E00               	movlw	0
  4830  00D3FC  6FFE               	movwf	_i& (0+255),b	;volatile
  4831  00D3FE                     l6187:
  4832                           
  4833                           ; BSR set to: 0
  4834  00D3FE  0E2A               	movlw	42
  4835  00D400  65FE               	cpfsgt	_i& (0+255),b	;volatile
  4836  00D402  D001               	goto	l6191
  4837  00D404  D7F4               	goto	l6183
  4838  00D406                     l6191:
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;main.c: 762:                 *((char *)displayRun + i) = Read_eep(sizeof(run) + i);
  4842  00D406  51FE               	movf	_i& (0+255),w,b	;volatile
  4843  00D408  2474               	addwf	selectLog@displayRun,w,c
  4844  00D40A  6ED9               	movwf	fsr2l,c
  4845  00D40C  0E00               	movlw	0
  4846  00D40E  2075               	addwfc	selectLog@displayRun+1,w,c
  4847  00D410  6EDA               	movwf	fsr2h,c
  4848  00D412  0E2B               	movlw	43
  4849  00D414  25FE               	addwf	_i& (0+255),w,b	;volatile
  4850  00D416  6E01               	movwf	Read_eep@badd,c
  4851  00D418  6A02               	clrf	Read_eep@badd+1,c
  4852  00D41A  0E00               	movlw	0
  4853  00D41C  2202               	addwfc	Read_eep@badd+1,f,c
  4854  00D41E  EC13  F062         	call	_Read_eep	;wreg free
  4855  00D422  6EDF               	movwf	indf2,c
  4856                           
  4857                           ;main.c: 763:             }
  4858  00D424  0100               	movlb	0	; () banked
  4859  00D426  2BFE               	incf	_i& (0+255),f,b	;volatile
  4860  00D428  D7EA               	goto	l6187
  4861  00D42A                     l6199:
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;main.c: 767:             for (i=0;i<sizeof(run);i++){
  4865  00D42A  0E00               	movlw	0
  4866  00D42C  6FFE               	movwf	_i& (0+255),b	;volatile
  4867  00D42E                     l6201:
  4868                           
  4869                           ; BSR set to: 0
  4870  00D42E  0E2A               	movlw	42
  4871  00D430  65FE               	cpfsgt	_i& (0+255),b	;volatile
  4872  00D432  D001               	goto	l6205
  4873  00D434  D7DC               	goto	l6183
  4874  00D436                     l6205:
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;main.c: 768:                 *((char *)displayRun + i) = Read_eep(2*sizeof(run) + i);
  4878  00D436  51FE               	movf	_i& (0+255),w,b	;volatile
  4879  00D438  2474               	addwf	selectLog@displayRun,w,c
  4880  00D43A  6ED9               	movwf	fsr2l,c
  4881  00D43C  0E00               	movlw	0
  4882  00D43E  2075               	addwfc	selectLog@displayRun+1,w,c
  4883  00D440  6EDA               	movwf	fsr2h,c
  4884  00D442  0E56               	movlw	86
  4885  00D444  25FE               	addwf	_i& (0+255),w,b	;volatile
  4886  00D446  6E01               	movwf	Read_eep@badd,c
  4887  00D448  6A02               	clrf	Read_eep@badd+1,c
  4888  00D44A  0E00               	movlw	0
  4889  00D44C  2202               	addwfc	Read_eep@badd+1,f,c
  4890  00D44E  EC13  F062         	call	_Read_eep	;wreg free
  4891  00D452  6EDF               	movwf	indf2,c
  4892                           
  4893                           ;main.c: 769:             }
  4894  00D454  0100               	movlb	0	; () banked
  4895  00D456  2BFE               	incf	_i& (0+255),f,b	;volatile
  4896  00D458  D7EA               	goto	l6201
  4897  00D45A                     l6213:
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;main.c: 773:             for (i=0;i<sizeof(run);i++){
  4901  00D45A  0E00               	movlw	0
  4902  00D45C  6FFE               	movwf	_i& (0+255),b	;volatile
  4903  00D45E                     l6215:
  4904                           
  4905                           ; BSR set to: 0
  4906  00D45E  0E2A               	movlw	42
  4907  00D460  65FE               	cpfsgt	_i& (0+255),b	;volatile
  4908  00D462  D001               	goto	l6219
  4909  00D464  D7C4               	goto	l6183
  4910  00D466                     l6219:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;main.c: 774:                 *((char *)displayRun + i) = Read_eep(3*sizeof(run) + i);
  4914  00D466  51FE               	movf	_i& (0+255),w,b	;volatile
  4915  00D468  2474               	addwf	selectLog@displayRun,w,c
  4916  00D46A  6ED9               	movwf	fsr2l,c
  4917  00D46C  0E00               	movlw	0
  4918  00D46E  2075               	addwfc	selectLog@displayRun+1,w,c
  4919  00D470  6EDA               	movwf	fsr2h,c
  4920  00D472  0E81               	movlw	129
  4921  00D474  25FE               	addwf	_i& (0+255),w,b	;volatile
  4922  00D476  6E01               	movwf	Read_eep@badd,c
  4923  00D478  6A02               	clrf	Read_eep@badd+1,c
  4924  00D47A  0E00               	movlw	0
  4925  00D47C  2202               	addwfc	Read_eep@badd+1,f,c
  4926  00D47E  EC13  F062         	call	_Read_eep	;wreg free
  4927  00D482  6EDF               	movwf	indf2,c
  4928                           
  4929                           ;main.c: 775:             }
  4930  00D484  0100               	movlb	0	; () banked
  4931  00D486  2BFE               	incf	_i& (0+255),f,b	;volatile
  4932  00D488  D7EA               	goto	l6215
  4933  00D48A                     l6227:
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;main.c: 779:             *menu = 0;
  4937  00D48A  C072  FFD9         	movff	selectLog@menu,fsr2l
  4938  00D48E  C073  FFDA         	movff	selectLog@menu+1,fsr2h
  4939  00D492  0E00               	movlw	0
  4940  00D494                     L9:
  4941  00D494  6EDF               	movwf	indf2,c
  4942                           
  4943                           ;main.c: 780:             break;
  4944  00D496  D017               	goto	l397
  4945  00D498                     l6231:
  4946                           
  4947                           ; BSR set to: 0
  4948  00D498  51FD               	movf	_keypress& (0+255),w,b	;volatile
  4949  00D49A  6E76               	movwf	??_selectLog& (0+255),c
  4950  00D49C  6A77               	clrf	(??_selectLog+1)& (0+255),c
  4951                           
  4952                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4953                           ; Switch size 1, requested type "simple"
  4954                           ; Number of cases is 1, Range of values is 0 to 0
  4955                           ; switch strategies available:
  4956                           ; Name         Instructions Cycles
  4957                           ; simple_byte            4     3 (average)
  4958                           ;	Chosen strategy is simple_byte
  4959  00D49E  5077               	movf	??_selectLog+1,w,c
  4960  00D4A0  0A00               	xorlw	0	; case 0
  4961  00D4A2  A4D8               	btfss	status,2,c
  4962  00D4A4  D010               	goto	l397
  4963                           
  4964                           ; BSR set to: 0
  4965                           ; Switch size 1, requested type "simple"
  4966                           ; Number of cases is 5, Range of values is 0 to 15
  4967                           ; switch strategies available:
  4968                           ; Name         Instructions Cycles
  4969                           ; simple_byte           16     9 (average)
  4970                           ;	Chosen strategy is simple_byte
  4971  00D4A6  5076               	movf	??_selectLog,w,c
  4972  00D4A8  0A00               	xorlw	0	; case 0
  4973  00D4AA  B4D8               	btfsc	status,2,c
  4974  00D4AC  D78B               	goto	l6171
  4975  00D4AE  0A01               	xorlw	1	; case 1
  4976  00D4B0  B4D8               	btfsc	status,2,c
  4977  00D4B2  D7A3               	goto	l6185
  4978  00D4B4  0A03               	xorlw	3	; case 2
  4979  00D4B6  B4D8               	btfsc	status,2,c
  4980  00D4B8  D7B8               	goto	l6199
  4981  00D4BA  0A06               	xorlw	6	; case 4
  4982  00D4BC  B4D8               	btfsc	status,2,c
  4983  00D4BE  D7CD               	goto	l6213
  4984  00D4C0  0A0B               	xorlw	11	; case 15
  4985  00D4C2  B4D8               	btfsc	status,2,c
  4986  00D4C4  D7E2               	goto	l6227
  4987  00D4C6                     l397:
  4988  00D4C6  A281               	btfss	3969,1,c	;volatile
  4989  00D4C8  0012               	return	
  4990  00D4CA  D7FD               	goto	l397
  4991  00D4CC                     __end_of_selectLog:
  4992                           	opt callstack 0
  4993                           
  4994 ;; *************** function _Read_eep *****************
  4995 ;; Defined at:
  4996 ;;		line 686 in file "main.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  badd            2    0[COMRAM] unsigned int 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      unsigned char 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;Total ram usage:        2 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_selectLog
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text7
  5024  00C426                     __ptext7:
  5025                           	opt callstack 0
  5026  00C426                     _Read_eep:
  5027                           	opt callstack 29
  5028                           
  5029                           ;main.c: 687:  EEADRH = (badd >> 8) & 0x03;
  5030                           
  5031                           ;incstack = 0
  5032  00C426  5002               	movf	Read_eep@badd+1,w,c
  5033  00C428  0B03               	andlw	3
  5034  00C42A  6EAA               	movwf	4010,c	;volatile
  5035                           
  5036                           ;main.c: 688:  EEADR = (badd & 0x0ff);
  5037  00C42C  C001  FFA9         	movff	Read_eep@badd,4009	;volatile
  5038                           
  5039                           ;main.c: 689:    EECON1bits.CFGS = 0;
  5040  00C430  9CA6               	bcf	4006,6,c	;volsfr
  5041                           
  5042                           ;main.c: 690:  EECON1bits.EEPGD = 0;
  5043  00C432  9EA6               	bcf	4006,7,c	;volsfr
  5044                           
  5045                           ;main.c: 691:  EECON1bits.RD = 1;
  5046  00C434  80A6               	bsf	4006,0,c	;volsfr
  5047                           
  5048                           ;main.c: 692:  __nop();
  5049  00C436  F000               	nop	
  5050                           
  5051                           ;main.c: 693:  __nop();
  5052  00C438  F000               	nop	
  5053                           
  5054                           ;main.c: 694:  return ( EEDATA );
  5055  00C43A  50A8               	movf	4008,w,c	;volatile
  5056  00C43C  0012               	return		;funcret
  5057  00C43E                     __end_of_Read_eep:
  5058                           	opt callstack 0
  5059                           
  5060 ;; *************** function _saveRun *****************
  5061 ;; Defined at:
  5062 ;;		line 697 in file "main.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  menu            2  113[COMRAM] PTR unsigned char 
  5065 ;;		 -> main@menu(1), 
  5066 ;;  currentRun      2  115[COMRAM] PTR struct .
  5067 ;;		 -> main@currentRun(43), 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;		None
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  1    wreg      void 
  5072 ;; Registers used:
  5073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5079 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;Total ram usage:        6 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:   11
  5086 ;; This function calls:
  5087 ;;		_Write_eep
  5088 ;;		_lcdInst
  5089 ;;		_printf
  5090 ;; This function is called by:
  5091 ;;		_main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text8
  5096  00D4CC                     __ptext8:
  5097                           	opt callstack 0
  5098  00D4CC                     _saveRun:
  5099                           	opt callstack 19
  5100                           
  5101                           ;main.c: 698:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  5102                           
  5103                           ;incstack = 0
  5104  00D4CC  0E01               	movlw	1
  5105  00D4CE  ECEA  F061         	call	_lcdInst
  5106  00D4D2  0E11               	movlw	17
  5107  00D4D4  6E76               	movwf	??_saveRun& (0+255),c
  5108  00D4D6  0E3A               	movlw	58
  5109  00D4D8                     u6437:
  5110  00D4D8  2EE8               	decfsz	wreg,f,c
  5111  00D4DA  D7FE               	bra	u6437
  5112  00D4DC  2E76               	decfsz	??_saveRun& (0+255),f,c
  5113  00D4DE  D7FC               	bra	u6437
  5114  00D4E0  D000               	nop2	
  5115  00D4E2  0E80               	movlw	128
  5116  00D4E4  ECEA  F061         	call	_lcdInst
  5117                           
  5118                           ;main.c: 700:     printf("Choose log to");
  5119  00D4E8  0EE7               	movlw	low STR_23
  5120  00D4EA  6E66               	movwf	printf@fmt,c
  5121  00D4EC  0EFE               	movlw	high STR_23
  5122  00D4EE  6E67               	movwf	printf@fmt+1,c
  5123  00D4F0  EC55  F062         	call	_printf	;wreg free
  5124  00D4F4  0EC0               	movlw	192
  5125  00D4F6  ECEA  F061         	call	_lcdInst
  5126                           
  5127                           ;main.c: 702:     printf("overwrite:");
  5128  00D4FA  0E86               	movlw	low STR_24
  5129  00D4FC  6E66               	movwf	printf@fmt,c
  5130  00D4FE  0EFF               	movlw	high STR_24
  5131  00D500  6E67               	movwf	printf@fmt+1,c
  5132  00D502  EC55  F062         	call	_printf	;wreg free
  5133  00D506  0E90               	movlw	144
  5134  00D508  ECEA  F061         	call	_lcdInst
  5135                           
  5136                           ;main.c: 704:     printf("(1) (2) (3) (4)");
  5137  00D50C  0E6C               	movlw	low STR_25
  5138  00D50E  6E66               	movwf	printf@fmt,c
  5139  00D510  0EFE               	movlw	high STR_25
  5140  00D512  6E67               	movwf	printf@fmt+1,c
  5141  00D514  EC55  F062         	call	_printf	;wreg free
  5142  00D518  0ED0               	movlw	208
  5143  00D51A  ECEA  F061         	call	_lcdInst
  5144                           
  5145                           ;main.c: 706:     printf("(D) Back");
  5146  00D51E  0EBA               	movlw	low STR_26
  5147  00D520  6E66               	movwf	printf@fmt,c
  5148  00D522  0EFF               	movlw	high STR_26
  5149  00D524  6E67               	movwf	printf@fmt+1,c
  5150  00D526  EC55  F062         	call	_printf	;wreg free
  5151  00D52A                     l355:
  5152  00D52A  A281               	btfss	3969,1,c	;volatile
  5153  00D52C  D7FE               	goto	l355
  5154                           
  5155                           ;main.c: 708:     keypress = (PORTB & 0xF0) >> 4;
  5156  00D52E  3881               	swapf	3969,w,c	;volatile
  5157  00D530  0B0F               	andlw	15
  5158  00D532  0B0F               	andlw	15
  5159  00D534  0100               	movlb	0	; () banked
  5160  00D536  6FFD               	movwf	_keypress& (0+255),b	;volatile
  5161                           
  5162                           ;main.c: 709:     switch (keypress){
  5163  00D538  D06E               	goto	l6141
  5164  00D53A                     l6081:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;main.c: 711:             for (i=0;i<sizeof(run);i++){
  5168  00D53A  0E00               	movlw	0
  5169  00D53C  6FFE               	movwf	_i& (0+255),b	;volatile
  5170  00D53E                     l6083:
  5171                           
  5172                           ; BSR set to: 0
  5173  00D53E  0E2A               	movlw	42
  5174  00D540  65FE               	cpfsgt	_i& (0+255),b	;volatile
  5175  00D542  D001               	goto	l6087
  5176  00D544  D010               	goto	l6093
  5177  00D546                     l6087:
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;main.c: 712:                 Write_eep(i, *((char *)currentRun + i));
  5181  00D546  C0FE  F001         	movff	_i,Write_eep@badd	;volatile
  5182  00D54A  6A02               	clrf	Write_eep@badd+1,c
  5183  00D54C  51FE               	movf	_i& (0+255),w,b	;volatile
  5184  00D54E  2474               	addwf	saveRun@currentRun,w,c
  5185  00D550  6ED9               	movwf	fsr2l,c
  5186  00D552  0E00               	movlw	0
  5187  00D554  2075               	addwfc	saveRun@currentRun+1,w,c
  5188  00D556  6EDA               	movwf	fsr2h,c
  5189  00D558  50DF               	movf	indf2,w,c
  5190  00D55A  6E03               	movwf	Write_eep@bdat,c
  5191  00D55C  EC3A  F063         	call	_Write_eep	;wreg free
  5192                           
  5193                           ;main.c: 713:             }
  5194  00D560  0100               	movlb	0	; () banked
  5195  00D562  2BFE               	incf	_i& (0+255),f,b	;volatile
  5196  00D564  D7EC               	goto	l6083
  5197  00D566                     l6093:
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;main.c: 714:             *menu = 7;
  5201  00D566  C072  FFD9         	movff	saveRun@menu,fsr2l
  5202  00D56A  C073  FFDA         	movff	saveRun@menu+1,fsr2h
  5203  00D56E  0E07               	movlw	7
  5204  00D570  D050               	goto	L10
  5205  00D572                     l6095:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;main.c: 717:             for (i=0;i<sizeof(run);i++){
  5209  00D572  0E00               	movlw	0
  5210  00D574  6FFE               	movwf	_i& (0+255),b	;volatile
  5211  00D576                     l6097:
  5212                           
  5213                           ; BSR set to: 0
  5214  00D576  0E2A               	movlw	42
  5215  00D578  65FE               	cpfsgt	_i& (0+255),b	;volatile
  5216  00D57A  D001               	goto	l6101
  5217  00D57C  D7F4               	goto	l6093
  5218  00D57E                     l6101:
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;main.c: 718:                 Write_eep(sizeof(run) + i, *((char *)currentRun + i));
  5222  00D57E  0E2B               	movlw	43
  5223  00D580  25FE               	addwf	_i& (0+255),w,b	;volatile
  5224  00D582  6E01               	movwf	Write_eep@badd,c
  5225  00D584  6A02               	clrf	Write_eep@badd+1,c
  5226  00D586  0E00               	movlw	0
  5227  00D588  2202               	addwfc	Write_eep@badd+1,f,c
  5228  00D58A  51FE               	movf	_i& (0+255),w,b	;volatile
  5229  00D58C  2474               	addwf	saveRun@currentRun,w,c
  5230  00D58E  6ED9               	movwf	fsr2l,c
  5231  00D590  0E00               	movlw	0
  5232  00D592  2075               	addwfc	saveRun@currentRun+1,w,c
  5233  00D594  6EDA               	movwf	fsr2h,c
  5234  00D596  50DF               	movf	indf2,w,c
  5235  00D598  6E03               	movwf	Write_eep@bdat,c
  5236  00D59A  EC3A  F063         	call	_Write_eep	;wreg free
  5237                           
  5238                           ;main.c: 719:             }
  5239  00D59E  0100               	movlb	0	; () banked
  5240  00D5A0  2BFE               	incf	_i& (0+255),f,b	;volatile
  5241  00D5A2  D7E9               	goto	l6097
  5242  00D5A4                     l6109:
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;main.c: 723:             for (i=0;i<sizeof(run);i++){
  5246  00D5A4  0E00               	movlw	0
  5247  00D5A6  6FFE               	movwf	_i& (0+255),b	;volatile
  5248  00D5A8                     l6111:
  5249                           
  5250                           ; BSR set to: 0
  5251  00D5A8  0E2A               	movlw	42
  5252  00D5AA  65FE               	cpfsgt	_i& (0+255),b	;volatile
  5253  00D5AC  D001               	goto	l6115
  5254  00D5AE  D7DB               	goto	l6093
  5255  00D5B0                     l6115:
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;main.c: 724:                 Write_eep(2*sizeof(run) + i, *((char *)currentRun + i));
  5259  00D5B0  0E56               	movlw	86
  5260  00D5B2  25FE               	addwf	_i& (0+255),w,b	;volatile
  5261  00D5B4  6E01               	movwf	Write_eep@badd,c
  5262  00D5B6  6A02               	clrf	Write_eep@badd+1,c
  5263  00D5B8  0E00               	movlw	0
  5264  00D5BA  2202               	addwfc	Write_eep@badd+1,f,c
  5265  00D5BC  51FE               	movf	_i& (0+255),w,b	;volatile
  5266  00D5BE  2474               	addwf	saveRun@currentRun,w,c
  5267  00D5C0  6ED9               	movwf	fsr2l,c
  5268  00D5C2  0E00               	movlw	0
  5269  00D5C4  2075               	addwfc	saveRun@currentRun+1,w,c
  5270  00D5C6  6EDA               	movwf	fsr2h,c
  5271  00D5C8  50DF               	movf	indf2,w,c
  5272  00D5CA  6E03               	movwf	Write_eep@bdat,c
  5273  00D5CC  EC3A  F063         	call	_Write_eep	;wreg free
  5274                           
  5275                           ;main.c: 725:             }
  5276  00D5D0  0100               	movlb	0	; () banked
  5277  00D5D2  2BFE               	incf	_i& (0+255),f,b	;volatile
  5278  00D5D4  D7E9               	goto	l6111
  5279  00D5D6                     l6123:
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;main.c: 729:             for (i=0;i<sizeof(run);i++){
  5283  00D5D6  0E00               	movlw	0
  5284  00D5D8  6FFE               	movwf	_i& (0+255),b	;volatile
  5285  00D5DA                     l6125:
  5286                           
  5287                           ; BSR set to: 0
  5288  00D5DA  0E2A               	movlw	42
  5289  00D5DC  65FE               	cpfsgt	_i& (0+255),b	;volatile
  5290  00D5DE  D001               	goto	l6129
  5291  00D5E0  D7C2               	goto	l6093
  5292  00D5E2                     l6129:
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;main.c: 730:                 Write_eep(3*sizeof(run) + i, *((char *)currentRun + i));
  5296  00D5E2  0E81               	movlw	129
  5297  00D5E4  25FE               	addwf	_i& (0+255),w,b	;volatile
  5298  00D5E6  6E01               	movwf	Write_eep@badd,c
  5299  00D5E8  6A02               	clrf	Write_eep@badd+1,c
  5300  00D5EA  0E00               	movlw	0
  5301  00D5EC  2202               	addwfc	Write_eep@badd+1,f,c
  5302  00D5EE  51FE               	movf	_i& (0+255),w,b	;volatile
  5303  00D5F0  2474               	addwf	saveRun@currentRun,w,c
  5304  00D5F2  6ED9               	movwf	fsr2l,c
  5305  00D5F4  0E00               	movlw	0
  5306  00D5F6  2075               	addwfc	saveRun@currentRun+1,w,c
  5307  00D5F8  6EDA               	movwf	fsr2h,c
  5308  00D5FA  50DF               	movf	indf2,w,c
  5309  00D5FC  6E03               	movwf	Write_eep@bdat,c
  5310  00D5FE  EC3A  F063         	call	_Write_eep	;wreg free
  5311                           
  5312                           ;main.c: 731:             }
  5313  00D602  0100               	movlb	0	; () banked
  5314  00D604  2BFE               	incf	_i& (0+255),f,b	;volatile
  5315  00D606  D7E9               	goto	l6125
  5316  00D608                     l6137:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;main.c: 735:             *menu = 2;
  5320  00D608  C072  FFD9         	movff	saveRun@menu,fsr2l
  5321  00D60C  C073  FFDA         	movff	saveRun@menu+1,fsr2h
  5322  00D610  0E02               	movlw	2
  5323  00D612                     L10:
  5324  00D612  6EDF               	movwf	indf2,c
  5325                           
  5326                           ;main.c: 736:             break;
  5327  00D614  D017               	goto	l373
  5328  00D616                     l6141:
  5329                           
  5330                           ; BSR set to: 0
  5331  00D616  51FD               	movf	_keypress& (0+255),w,b	;volatile
  5332  00D618  6E76               	movwf	??_saveRun& (0+255),c
  5333  00D61A  6A77               	clrf	(??_saveRun+1)& (0+255),c
  5334                           
  5335                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5336                           ; Switch size 1, requested type "simple"
  5337                           ; Number of cases is 1, Range of values is 0 to 0
  5338                           ; switch strategies available:
  5339                           ; Name         Instructions Cycles
  5340                           ; simple_byte            4     3 (average)
  5341                           ;	Chosen strategy is simple_byte
  5342  00D61C  5077               	movf	??_saveRun+1,w,c
  5343  00D61E  0A00               	xorlw	0	; case 0
  5344  00D620  A4D8               	btfss	status,2,c
  5345  00D622  D010               	goto	l373
  5346                           
  5347                           ; BSR set to: 0
  5348                           ; Switch size 1, requested type "simple"
  5349                           ; Number of cases is 5, Range of values is 0 to 15
  5350                           ; switch strategies available:
  5351                           ; Name         Instructions Cycles
  5352                           ; simple_byte           16     9 (average)
  5353                           ;	Chosen strategy is simple_byte
  5354  00D624  5076               	movf	??_saveRun,w,c
  5355  00D626  0A00               	xorlw	0	; case 0
  5356  00D628  B4D8               	btfsc	status,2,c
  5357  00D62A  D787               	goto	l6081
  5358  00D62C  0A01               	xorlw	1	; case 1
  5359  00D62E  B4D8               	btfsc	status,2,c
  5360  00D630  D7A0               	goto	l6095
  5361  00D632  0A03               	xorlw	3	; case 2
  5362  00D634  B4D8               	btfsc	status,2,c
  5363  00D636  D7B6               	goto	l6109
  5364  00D638  0A06               	xorlw	6	; case 4
  5365  00D63A  B4D8               	btfsc	status,2,c
  5366  00D63C  D7CC               	goto	l6123
  5367  00D63E  0A0B               	xorlw	11	; case 15
  5368  00D640  B4D8               	btfsc	status,2,c
  5369  00D642  D7E2               	goto	l6137
  5370  00D644                     l373:
  5371  00D644  A281               	btfss	3969,1,c	;volatile
  5372  00D646  0012               	return	
  5373  00D648  D7FD               	goto	l373
  5374  00D64A                     __end_of_saveRun:
  5375                           	opt callstack 0
  5376                           
  5377 ;; *************** function _Write_eep *****************
  5378 ;; Defined at:
  5379 ;;		line 668 in file "main.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  badd            2    0[COMRAM] unsigned int 
  5382 ;;  bdat            1    2[COMRAM] unsigned char 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  GIE_BIT_VAL     1    3[COMRAM] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5394 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;Total ram usage:        4 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_saveRun
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text9
  5408  00C674                     __ptext9:
  5409                           	opt callstack 0
  5410  00C674                     _Write_eep:
  5411                           	opt callstack 29
  5412                           
  5413                           ;main.c: 670:  EEADRH = (badd >> 8) & 0x03;
  5414                           
  5415                           ;incstack = 0
  5416  00C674  5002               	movf	Write_eep@badd+1,w,c
  5417  00C676  0B03               	andlw	3
  5418  00C678  6EAA               	movwf	4010,c	;volatile
  5419                           
  5420                           ;main.c: 671:  EEADR = (badd & 0x0ff);
  5421  00C67A  C001  FFA9         	movff	Write_eep@badd,4009	;volatile
  5422                           
  5423                           ;main.c: 672:  EEDATA = bdat;
  5424  00C67E  C003  FFA8         	movff	Write_eep@bdat,4008	;volatile
  5425                           
  5426                           ;main.c: 673:    EECON1bits.EEPGD = 0;
  5427  00C682  9EA6               	bcf	4006,7,c	;volsfr
  5428                           
  5429                           ;main.c: 674:  EECON1bits.CFGS = 0;
  5430  00C684  9CA6               	bcf	4006,6,c	;volsfr
  5431                           
  5432                           ;main.c: 675:  EECON1bits.WREN = 1;
  5433  00C686  84A6               	bsf	4006,2,c	;volsfr
  5434                           
  5435                           ;main.c: 676:  GIE_BIT_VAL = INTCONbits.GIE;
  5436  00C688  0E00               	movlw	0
  5437  00C68A  BEF2               	btfsc	4082,7,c	;volatile
  5438  00C68C  0E01               	movlw	1
  5439  00C68E  6E04               	movwf	Write_eep@GIE_BIT_VAL,c
  5440                           
  5441                           ;main.c: 677:  INTCONbits.GIE = 0;
  5442  00C690  9EF2               	bcf	4082,7,c	;volatile
  5443                           
  5444                           ;main.c: 678:  EECON2 = 0x55;
  5445  00C692  0E55               	movlw	85
  5446  00C694  6EA7               	movwf	4007,c	;volsfr
  5447                           
  5448                           ;main.c: 679:  EECON2 = 0xAA;
  5449  00C696  0EAA               	movlw	170
  5450  00C698  6EA7               	movwf	4007,c	;volsfr
  5451                           
  5452                           ;main.c: 680:  EECON1bits.WR = 1;
  5453  00C69A  82A6               	bsf	4006,1,c	;volsfr
  5454  00C69C                     l346:
  5455  00C69C  B2A6               	btfsc	4006,1,c	;volsfr
  5456  00C69E  D7FE               	goto	l346
  5457                           
  5458                           ;main.c: 682:  INTCONbits.GIE = GIE_BIT_VAL;
  5459  00C6A0  B004               	btfsc	Write_eep@GIE_BIT_VAL,0,c
  5460  00C6A2  D002               	bra	u4285
  5461  00C6A4  9EF2               	bcf	4082,7,c	;volatile
  5462  00C6A6  D001               	bra	u4286
  5463  00C6A8                     u4285:
  5464  00C6A8  8EF2               	bsf	4082,7,c	;volatile
  5465  00C6AA                     u4286:
  5466                           
  5467                           ;main.c: 683:  EECON1bits.WREN = 0;
  5468  00C6AA  94A6               	bcf	4006,2,c	;volsfr
  5469  00C6AC  0012               	return		;funcret
  5470  00C6AE                     __end_of_Write_eep:
  5471                           	opt callstack 0
  5472                           
  5473 ;; *************** function _runInfoMenu *****************
  5474 ;; Defined at:
  5475 ;;		line 598 in file "main.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  menu            2  113[COMRAM] PTR unsigned char 
  5478 ;;		 -> main@menu(1), 
  5479 ;;  displayRun      2  115[COMRAM] PTR struct .
  5480 ;;		 -> main@displayRun(43), 
  5481 ;;  logs            1  117[COMRAM] _Bool 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      void 
  5486 ;; Registers used:
  5487 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5493 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;Total ram usage:        7 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:   11
  5500 ;; This function calls:
  5501 ;;		___awdiv
  5502 ;;		___awmod
  5503 ;;		_lcdInst
  5504 ;;		_printf
  5505 ;; This function is called by:
  5506 ;;		_main
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           	psect	text10
  5511  00D64A                     __ptext10:
  5512                           	opt callstack 0
  5513  00D64A                     _runInfoMenu:
  5514                           	opt callstack 19
  5515                           
  5516                           ;main.c: 599:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  5517                           
  5518                           ;incstack = 0
  5519  00D64A  0E01               	movlw	1
  5520  00D64C  ECEA  F061         	call	_lcdInst
  5521  00D650  0E11               	movlw	17
  5522  00D652  6E77               	movwf	??_runInfoMenu& (0+255),c
  5523  00D654  0E3A               	movlw	58
  5524  00D656                     u6447:
  5525  00D656  2EE8               	decfsz	wreg,f,c
  5526  00D658  D7FE               	bra	u6447
  5527  00D65A  2E77               	decfsz	??_runInfoMenu& (0+255),f,c
  5528  00D65C  D7FC               	bra	u6447
  5529  00D65E  D000               	nop2	
  5530  00D660  0E80               	movlw	128
  5531  00D662  ECEA  F061         	call	_lcdInst
  5532                           
  5533                           ;main.c: 601:     printf("Op time:%u:", displayRun->opTime/60);
  5534  00D666  0E6E               	movlw	low STR_12
  5535  00D668  6E66               	movwf	printf@fmt,c
  5536  00D66A  0EFF               	movlw	high STR_12
  5537  00D66C  6E67               	movwf	printf@fmt+1,c
  5538  00D66E  EE20 F001          	lfsr	2,1
  5539  00D672  5074               	movf	runInfoMenu@displayRun,w,c
  5540  00D674  26D9               	addwf	fsr2l,f,c
  5541  00D676  5075               	movf	runInfoMenu@displayRun+1,w,c
  5542  00D678  22DA               	addwfc	fsr2h,f,c
  5543  00D67A  50DF               	movf	indf2,w,c
  5544  00D67C  6E77               	movwf	??_runInfoMenu& (0+255),c
  5545  00D67E  5077               	movf	??_runInfoMenu,w,c
  5546  00D680  6E01               	movwf	___awdiv@dividend,c
  5547  00D682  6A02               	clrf	___awdiv@dividend+1,c
  5548  00D684  0E00               	movlw	0
  5549  00D686  6E04               	movwf	___awdiv@divisor+1,c
  5550  00D688  0E3C               	movlw	60
  5551  00D68A  6E03               	movwf	___awdiv@divisor,c
  5552  00D68C  EC22  F065         	call	___awdiv	;wreg free
  5553  00D690  C001  F068         	movff	?___awdiv,?_printf+2
  5554  00D694  C002  F069         	movff	?___awdiv+1,?_printf+3
  5555  00D698  EC55  F062         	call	_printf	;wreg free
  5556                           
  5557                           ;main.c: 602:     if (displayRun->opTime%60 < 10){
  5558  00D69C  EE20 F001          	lfsr	2,1
  5559  00D6A0  5074               	movf	runInfoMenu@displayRun,w,c
  5560  00D6A2  26D9               	addwf	fsr2l,f,c
  5561  00D6A4  5075               	movf	runInfoMenu@displayRun+1,w,c
  5562  00D6A6  22DA               	addwfc	fsr2h,f,c
  5563  00D6A8  50DF               	movf	indf2,w,c
  5564  00D6AA  6E77               	movwf	??_runInfoMenu& (0+255),c
  5565  00D6AC  5077               	movf	??_runInfoMenu,w,c
  5566  00D6AE  6E01               	movwf	___awmod@dividend,c
  5567  00D6B0  6A02               	clrf	___awmod@dividend+1,c
  5568  00D6B2  0E00               	movlw	0
  5569  00D6B4  6E04               	movwf	___awmod@divisor+1,c
  5570  00D6B6  0E3C               	movlw	60
  5571  00D6B8  6E03               	movwf	___awmod@divisor,c
  5572  00D6BA  ECA9  F064         	call	___awmod	;wreg free
  5573  00D6BE  BE02               	btfsc	?___awmod+1,7,c
  5574  00D6C0  D006               	goto	u5740
  5575  00D6C2  5002               	movf	?___awmod+1,w,c
  5576  00D6C4  E10A               	bnz	l310
  5577  00D6C6  0E0A               	movlw	10
  5578  00D6C8  5C01               	subwf	?___awmod,w,c
  5579  00D6CA  B0D8               	btfsc	status,0,c
  5580  00D6CC  D006               	goto	l310
  5581  00D6CE                     u5740:
  5582                           
  5583                           ;main.c: 603:         printf("0");
  5584  00D6CE  0EFC               	movlw	low STR_13
  5585  00D6D0  6E66               	movwf	printf@fmt,c
  5586  00D6D2  0EFF               	movlw	high STR_13
  5587  00D6D4  6E67               	movwf	printf@fmt+1,c
  5588  00D6D6  EC55  F062         	call	_printf	;wreg free
  5589  00D6DA                     l310:
  5590                           
  5591                           ;main.c: 605:     printf("%u", displayRun->opTime%60);
  5592  00D6DA  0EA4               	movlw	low (STR_6+8)
  5593  00D6DC  6E66               	movwf	printf@fmt,c
  5594  00D6DE  0EFF               	movlw	high (STR_6+8)
  5595  00D6E0  6E67               	movwf	printf@fmt+1,c
  5596  00D6E2  EE20 F001          	lfsr	2,1
  5597  00D6E6  5074               	movf	runInfoMenu@displayRun,w,c
  5598  00D6E8  26D9               	addwf	fsr2l,f,c
  5599  00D6EA  5075               	movf	runInfoMenu@displayRun+1,w,c
  5600  00D6EC  22DA               	addwfc	fsr2h,f,c
  5601  00D6EE  50DF               	movf	indf2,w,c
  5602  00D6F0  6E77               	movwf	??_runInfoMenu& (0+255),c
  5603  00D6F2  5077               	movf	??_runInfoMenu,w,c
  5604  00D6F4  6E01               	movwf	___awmod@dividend,c
  5605  00D6F6  6A02               	clrf	___awmod@dividend+1,c
  5606  00D6F8  0E00               	movlw	0
  5607  00D6FA  6E04               	movwf	___awmod@divisor+1,c
  5608  00D6FC  0E3C               	movlw	60
  5609  00D6FE  6E03               	movwf	___awmod@divisor,c
  5610  00D700  ECA9  F064         	call	___awmod	;wreg free
  5611  00D704  C001  F068         	movff	?___awmod,?_printf+2
  5612  00D708  C002  F069         	movff	?___awmod+1,?_printf+3
  5613  00D70C  EC55  F062         	call	_printf	;wreg free
  5614  00D710  0EC0               	movlw	192
  5615  00D712  ECEA  F061         	call	_lcdInst
  5616                           
  5617                           ;main.c: 607:     printf("# supplied:%u", displayRun->tiresSupplied);
  5618  00D716  0E03               	movlw	low STR_15
  5619  00D718  6E66               	movwf	printf@fmt,c
  5620  00D71A  0EFF               	movlw	high STR_15
  5621  00D71C  6E67               	movwf	printf@fmt+1,c
  5622  00D71E  EE20 F002          	lfsr	2,2
  5623  00D722  5074               	movf	runInfoMenu@displayRun,w,c
  5624  00D724  26D9               	addwf	fsr2l,f,c
  5625  00D726  5075               	movf	runInfoMenu@displayRun+1,w,c
  5626  00D728  22DA               	addwfc	fsr2h,f,c
  5627  00D72A  50DF               	movf	indf2,w,c
  5628  00D72C  6E77               	movwf	??_runInfoMenu& (0+255),c
  5629  00D72E  5077               	movf	??_runInfoMenu,w,c
  5630  00D730  6E68               	movwf	?_printf+2,c
  5631  00D732  6A69               	clrf	?_printf+3,c
  5632  00D734  EC55  F062         	call	_printf	;wreg free
  5633  00D738  0E90               	movlw	144
  5634  00D73A  ECEA  F061         	call	_lcdInst
  5635                           
  5636                           ;main.c: 609:     printf("# of poles:%u", displayRun->totalPoleNum);
  5637  00D73E  0E11               	movlw	low STR_16
  5638  00D740  6E66               	movwf	printf@fmt,c
  5639  00D742  0EFF               	movlw	high STR_16
  5640  00D744  6E67               	movwf	printf@fmt+1,c
  5641  00D746  C074  FFD9         	movff	runInfoMenu@displayRun,fsr2l
  5642  00D74A  C075  FFDA         	movff	runInfoMenu@displayRun+1,fsr2h
  5643  00D74E  50DF               	movf	indf2,w,c
  5644  00D750  6E77               	movwf	??_runInfoMenu& (0+255),c
  5645  00D752  5077               	movf	??_runInfoMenu,w,c
  5646  00D754  6E68               	movwf	?_printf+2,c
  5647  00D756  6A69               	clrf	?_printf+3,c
  5648  00D758  EC55  F062         	call	_printf	;wreg free
  5649  00D75C  0ED0               	movlw	208
  5650  00D75E  ECEA  F061         	call	_lcdInst
  5651                           
  5652                           ;main.c: 611:     if (displayRun->totalPoleNum != 0){
  5653  00D762  C074  FFD9         	movff	runInfoMenu@displayRun,fsr2l
  5654  00D766  C075  FFDA         	movff	runInfoMenu@displayRun+1,fsr2h
  5655  00D76A  50DF               	movf	indf2,w,c
  5656  00D76C  B4D8               	btfsc	status,2,c
  5657  00D76E  D006               	goto	l311
  5658                           
  5659                           ;main.c: 612:         printf("(C)Poles ");
  5660  00D770  0EA7               	movlw	low STR_17
  5661  00D772  6E66               	movwf	printf@fmt,c
  5662  00D774  0EFF               	movlw	high STR_17
  5663  00D776  6E67               	movwf	printf@fmt+1,c
  5664  00D778  EC55  F062         	call	_printf	;wreg free
  5665  00D77C                     l311:
  5666                           
  5667                           ;main.c: 614:     printf("(D)Back");
  5668  00D77C  0EE5               	movlw	low STR_18
  5669  00D77E  6E66               	movwf	printf@fmt,c
  5670  00D780  0EFF               	movlw	high STR_18
  5671  00D782  6E67               	movwf	printf@fmt+1,c
  5672  00D784  EC55  F062         	call	_printf	;wreg free
  5673  00D788                     l312:
  5674  00D788  A281               	btfss	3969,1,c	;volatile
  5675  00D78A  D7FE               	goto	l312
  5676                           
  5677                           ;main.c: 616:     keypress = (PORTB & 0xF0) >> 4;
  5678  00D78C  3881               	swapf	3969,w,c	;volatile
  5679  00D78E  0B0F               	andlw	15
  5680  00D790  0B0F               	andlw	15
  5681  00D792  0100               	movlb	0	; () banked
  5682  00D794  6FFD               	movwf	_keypress& (0+255),b	;volatile
  5683                           
  5684                           ;main.c: 617:     switch (keypress){
  5685  00D796  D01D               	goto	l6005
  5686  00D798                     l5993:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;main.c: 619:             if (displayRun->totalPoleNum != 0){
  5690  00D798  C074  FFD9         	movff	runInfoMenu@displayRun,fsr2l
  5691  00D79C  C075  FFDA         	movff	runInfoMenu@displayRun+1,fsr2h
  5692  00D7A0  50DF               	movf	indf2,w,c
  5693  00D7A2  B4D8               	btfsc	status,2,c
  5694  00D7A4  D024               	goto	l322
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;main.c: 620:                 *menu = 4;
  5698  00D7A6  C072  FFD9         	movff	runInfoMenu@menu,fsr2l
  5699  00D7AA  C073  FFDA         	movff	runInfoMenu@menu+1,fsr2h
  5700  00D7AE  0E04               	movlw	4
  5701  00D7B0  D00E               	goto	L12
  5702  00D7B2                     l5997:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;main.c: 624:             if (logs){
  5706  00D7B2  5076               	movf	runInfoMenu@logs,w,c
  5707  00D7B4  B4D8               	btfsc	status,2,c
  5708  00D7B6  D006               	goto	l6001
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;main.c: 625:                 *menu = 6;
  5712  00D7B8  C072  FFD9         	movff	runInfoMenu@menu,fsr2l
  5713  00D7BC  C073  FFDA         	movff	runInfoMenu@menu+1,fsr2h
  5714  00D7C0  0E06               	movlw	6
  5715  00D7C2  D005               	goto	L12
  5716  00D7C4                     l6001:
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;main.c: 627:                 *menu = 7;
  5720  00D7C4  C072  FFD9         	movff	runInfoMenu@menu,fsr2l
  5721  00D7C8  C073  FFDA         	movff	runInfoMenu@menu+1,fsr2h
  5722  00D7CC  0E07               	movlw	7
  5723  00D7CE                     L12:
  5724  00D7CE  6EDF               	movwf	indf2,c
  5725  00D7D0  D00E               	goto	l322
  5726  00D7D2                     l6005:
  5727                           
  5728                           ; BSR set to: 0
  5729  00D7D2  51FD               	movf	_keypress& (0+255),w,b	;volatile
  5730  00D7D4  6E77               	movwf	??_runInfoMenu& (0+255),c
  5731  00D7D6  6A78               	clrf	(??_runInfoMenu+1)& (0+255),c
  5732                           
  5733                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5734                           ; Switch size 1, requested type "simple"
  5735                           ; Number of cases is 1, Range of values is 0 to 0
  5736                           ; switch strategies available:
  5737                           ; Name         Instructions Cycles
  5738                           ; simple_byte            4     3 (average)
  5739                           ;	Chosen strategy is simple_byte
  5740  00D7D8  5078               	movf	??_runInfoMenu+1,w,c
  5741  00D7DA  0A00               	xorlw	0	; case 0
  5742  00D7DC  A4D8               	btfss	status,2,c
  5743  00D7DE  D007               	goto	l322
  5744                           
  5745                           ; BSR set to: 0
  5746                           ; Switch size 1, requested type "simple"
  5747                           ; Number of cases is 2, Range of values is 11 to 15
  5748                           ; switch strategies available:
  5749                           ; Name         Instructions Cycles
  5750                           ; simple_byte            7     4 (average)
  5751                           ;	Chosen strategy is simple_byte
  5752  00D7E0  5077               	movf	??_runInfoMenu,w,c
  5753  00D7E2  0A0B               	xorlw	11	; case 11
  5754  00D7E4  B4D8               	btfsc	status,2,c
  5755  00D7E6  D7D8               	goto	l5993
  5756  00D7E8  0A04               	xorlw	4	; case 15
  5757  00D7EA  B4D8               	btfsc	status,2,c
  5758  00D7EC  D7E2               	goto	l5997
  5759  00D7EE                     l322:
  5760  00D7EE  A281               	btfss	3969,1,c	;volatile
  5761  00D7F0  0012               	return	
  5762  00D7F2  D7FD               	goto	l322
  5763  00D7F4                     __end_of_runInfoMenu:
  5764                           	opt callstack 0
  5765                           
  5766 ;; *************** function ___awmod *****************
  5767 ;; Defined at:
  5768 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  dividend        2    0[COMRAM] int 
  5771 ;;  divisor         2    2[COMRAM] int 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  sign            1    5[COMRAM] unsigned char 
  5774 ;;  counter         1    4[COMRAM] unsigned char 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  2    0[COMRAM] int 
  5777 ;; Registers used:
  5778 ;;		wreg, status,2, status,0
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;Total ram usage:        6 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_runInfoMenu
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text11
  5798  00C952                     __ptext11:
  5799                           	opt callstack 0
  5800  00C952                     ___awmod:
  5801                           	opt callstack 29
  5802                           
  5803                           ;incstack = 0
  5804  00C952  0E00               	movlw	0
  5805  00C954  6E06               	movwf	___awmod@sign,c
  5806  00C956  AE02               	btfss	___awmod@dividend+1,7,c
  5807  00C958  D006               	goto	l5283
  5808  00C95A  6C01               	negf	___awmod@dividend,c
  5809  00C95C  1E02               	comf	___awmod@dividend+1,f,c
  5810  00C95E  B0D8               	btfsc	status,0,c
  5811  00C960  2A02               	incf	___awmod@dividend+1,f,c
  5812  00C962  0E01               	movlw	1
  5813  00C964  6E06               	movwf	___awmod@sign,c
  5814  00C966                     l5283:
  5815  00C966  AE04               	btfss	___awmod@divisor+1,7,c
  5816  00C968  D004               	goto	l5287
  5817  00C96A  6C03               	negf	___awmod@divisor,c
  5818  00C96C  1E04               	comf	___awmod@divisor+1,f,c
  5819  00C96E  B0D8               	btfsc	status,0,c
  5820  00C970  2A04               	incf	___awmod@divisor+1,f,c
  5821  00C972                     l5287:
  5822  00C972  5003               	movf	___awmod@divisor,w,c
  5823  00C974  1004               	iorwf	___awmod@divisor+1,w,c
  5824  00C976  B4D8               	btfsc	status,2,c
  5825  00C978  D018               	goto	l5303
  5826  00C97A  0E01               	movlw	1
  5827  00C97C  6E05               	movwf	___awmod@counter,c
  5828  00C97E  D004               	goto	l5293
  5829  00C980                     l5291:
  5830  00C980  90D8               	bcf	status,0,c
  5831  00C982  3603               	rlcf	___awmod@divisor,f,c
  5832  00C984  3604               	rlcf	___awmod@divisor+1,f,c
  5833  00C986  2A05               	incf	___awmod@counter,f,c
  5834  00C988                     l5293:
  5835  00C988  AE04               	btfss	___awmod@divisor+1,7,c
  5836  00C98A  D7FA               	goto	l5291
  5837  00C98C                     u4930:
  5838  00C98C  5003               	movf	___awmod@divisor,w,c
  5839  00C98E  5C01               	subwf	___awmod@dividend,w,c
  5840  00C990  5004               	movf	___awmod@divisor+1,w,c
  5841  00C992  5802               	subwfb	___awmod@dividend+1,w,c
  5842  00C994  A0D8               	btfss	status,0,c
  5843  00C996  D004               	goto	l5299
  5844  00C998  5003               	movf	___awmod@divisor,w,c
  5845  00C99A  5E01               	subwf	___awmod@dividend,f,c
  5846  00C99C  5004               	movf	___awmod@divisor+1,w,c
  5847  00C99E  5A02               	subwfb	___awmod@dividend+1,f,c
  5848  00C9A0                     l5299:
  5849  00C9A0  90D8               	bcf	status,0,c
  5850  00C9A2  3204               	rrcf	___awmod@divisor+1,f,c
  5851  00C9A4  3203               	rrcf	___awmod@divisor,f,c
  5852  00C9A6  2E05               	decfsz	___awmod@counter,f,c
  5853  00C9A8  D7F1               	goto	u4930
  5854  00C9AA                     l5303:
  5855  00C9AA  5006               	movf	___awmod@sign,w,c
  5856  00C9AC  B4D8               	btfsc	status,2,c
  5857  00C9AE  D004               	goto	l5307
  5858  00C9B0  6C01               	negf	___awmod@dividend,c
  5859  00C9B2  1E02               	comf	___awmod@dividend+1,f,c
  5860  00C9B4  B0D8               	btfsc	status,0,c
  5861  00C9B6  2A02               	incf	___awmod@dividend+1,f,c
  5862  00C9B8                     l5307:
  5863  00C9B8  C001  F001         	movff	___awmod@dividend,?___awmod
  5864  00C9BC  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5865  00C9C0  0012               	return		;funcret
  5866  00C9C2                     __end_of___awmod:
  5867                           	opt callstack 0
  5868                           
  5869 ;; *************** function _runFinishedMenu *****************
  5870 ;; Defined at:
  5871 ;;		line 570 in file "main.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  menu            2  113[COMRAM] PTR unsigned char 
  5874 ;;		 -> main@menu(1), 
  5875 ;;  logs            2  115[COMRAM] PTR _Bool 
  5876 ;;		 -> main@logs(1), 
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;		None
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      void 
  5881 ;; Registers used:
  5882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5888 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;Total ram usage:        6 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:   11
  5895 ;; This function calls:
  5896 ;;		_lcdInst
  5897 ;;		_printf
  5898 ;; This function is called by:
  5899 ;;		_main
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           	psect	text12
  5904  00CD74                     __ptext12:
  5905                           	opt callstack 0
  5906  00CD74                     _runFinishedMenu:
  5907                           	opt callstack 19
  5908                           
  5909                           ;main.c: 571:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  5910                           
  5911                           ;incstack = 0
  5912  00CD74  0E01               	movlw	1
  5913  00CD76  ECEA  F061         	call	_lcdInst
  5914  00CD7A  0E11               	movlw	17
  5915  00CD7C  6E76               	movwf	??_runFinishedMenu& (0+255),c
  5916  00CD7E  0E3A               	movlw	58
  5917  00CD80                     u6457:
  5918  00CD80  2EE8               	decfsz	wreg,f,c
  5919  00CD82  D7FE               	bra	u6457
  5920  00CD84  2E76               	decfsz	??_runFinishedMenu& (0+255),f,c
  5921  00CD86  D7FC               	bra	u6457
  5922  00CD88  D000               	nop2	
  5923  00CD8A  0E80               	movlw	128
  5924  00CD8C  ECEA  F061         	call	_lcdInst
  5925                           
  5926                           ;main.c: 573:     printf("Run completed!");
  5927  00CD90  0E9C               	movlw	low STR_8
  5928  00CD92  6E66               	movwf	printf@fmt,c
  5929  00CD94  0EFE               	movlw	high STR_8
  5930  00CD96  6E67               	movwf	printf@fmt+1,c
  5931  00CD98  EC55  F062         	call	_printf	;wreg free
  5932  00CD9C  0EC0               	movlw	192
  5933  00CD9E  ECEA  F061         	call	_lcdInst
  5934                           
  5935                           ;main.c: 575:     printf("(B) Run info");
  5936  00CDA2  0E61               	movlw	low STR_9
  5937  00CDA4  6E66               	movwf	printf@fmt,c
  5938  00CDA6  0EFF               	movlw	high STR_9
  5939  00CDA8  6E67               	movwf	printf@fmt+1,c
  5940  00CDAA  EC55  F062         	call	_printf	;wreg free
  5941  00CDAE  0E90               	movlw	144
  5942  00CDB0  ECEA  F061         	call	_lcdInst
  5943                           
  5944                           ;main.c: 577:     printf("(C) Save run");
  5945  00CDB4  0E54               	movlw	low STR_10
  5946  00CDB6  6E66               	movwf	printf@fmt,c
  5947  00CDB8  0EFF               	movlw	high STR_10
  5948  00CDBA  6E67               	movwf	printf@fmt+1,c
  5949  00CDBC  EC55  F062         	call	_printf	;wreg free
  5950  00CDC0  0ED0               	movlw	208
  5951  00CDC2  ECEA  F061         	call	_lcdInst
  5952                           
  5953                           ;main.c: 579:     printf("(D) Main menu");
  5954  00CDC6  0E1F               	movlw	low STR_11
  5955  00CDC8  6E66               	movwf	printf@fmt,c
  5956  00CDCA  0EFF               	movlw	high STR_11
  5957  00CDCC  6E67               	movwf	printf@fmt+1,c
  5958  00CDCE  EC55  F062         	call	_printf	;wreg free
  5959  00CDD2                     l296:
  5960  00CDD2  A281               	btfss	3969,1,c	;volatile
  5961  00CDD4  D7FE               	goto	l296
  5962                           
  5963                           ;main.c: 582:     keypress = (PORTB & 0xF0) >> 4;
  5964  00CDD6  3881               	swapf	3969,w,c	;volatile
  5965  00CDD8  0B0F               	andlw	15
  5966  00CDDA  0B0F               	andlw	15
  5967  00CDDC  0100               	movlb	0	; () banked
  5968  00CDDE  6FFD               	movwf	_keypress& (0+255),b	;volatile
  5969                           
  5970                           ;main.c: 583:     switch (keypress){
  5971  00CDE0  D019               	goto	l5959
  5972  00CDE2                     l5951:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;main.c: 585:             *menu = 3;
  5976  00CDE2  C072  FFD9         	movff	runFinishedMenu@menu,fsr2l
  5977  00CDE6  C073  FFDA         	movff	runFinishedMenu@menu+1,fsr2h
  5978  00CDEA  0E03               	movlw	3
  5979  00CDEC  D011               	goto	L14
  5980  00CDEE                     l5953:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;main.c: 588:             *menu = 5;
  5984  00CDEE  C072  FFD9         	movff	runFinishedMenu@menu,fsr2l
  5985  00CDF2  C073  FFDA         	movff	runFinishedMenu@menu+1,fsr2h
  5986  00CDF6  0E05               	movlw	5
  5987  00CDF8  D00B               	goto	L14
  5988  00CDFA                     l5955:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;main.c: 591:             *logs = 1;
  5992  00CDFA  C074  FFD9         	movff	runFinishedMenu@logs,fsr2l
  5993  00CDFE  C075  FFDA         	movff	runFinishedMenu@logs+1,fsr2h
  5994  00CE02  0E01               	movlw	1
  5995  00CE04  6EDF               	movwf	indf2,c
  5996                           
  5997                           ;main.c: 592:             *menu = 0;
  5998  00CE06  C072  FFD9         	movff	runFinishedMenu@menu,fsr2l
  5999  00CE0A  C073  FFDA         	movff	runFinishedMenu@menu+1,fsr2h
  6000  00CE0E  0E00               	movlw	0
  6001  00CE10                     L14:
  6002  00CE10  6EDF               	movwf	indf2,c
  6003                           
  6004                           ;main.c: 593:             break;
  6005  00CE12  D011               	goto	l304
  6006  00CE14                     l5959:
  6007                           
  6008                           ; BSR set to: 0
  6009  00CE14  51FD               	movf	_keypress& (0+255),w,b	;volatile
  6010  00CE16  6E76               	movwf	??_runFinishedMenu& (0+255),c
  6011  00CE18  6A77               	clrf	(??_runFinishedMenu+1)& (0+255),c
  6012                           
  6013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6014                           ; Switch size 1, requested type "simple"
  6015                           ; Number of cases is 1, Range of values is 0 to 0
  6016                           ; switch strategies available:
  6017                           ; Name         Instructions Cycles
  6018                           ; simple_byte            4     3 (average)
  6019                           ;	Chosen strategy is simple_byte
  6020  00CE1A  5077               	movf	??_runFinishedMenu+1,w,c
  6021  00CE1C  0A00               	xorlw	0	; case 0
  6022  00CE1E  A4D8               	btfss	status,2,c
  6023  00CE20  D00A               	goto	l304
  6024                           
  6025                           ; BSR set to: 0
  6026                           ; Switch size 1, requested type "simple"
  6027                           ; Number of cases is 3, Range of values is 7 to 15
  6028                           ; switch strategies available:
  6029                           ; Name         Instructions Cycles
  6030                           ; simple_byte           10     6 (average)
  6031                           ;	Chosen strategy is simple_byte
  6032  00CE22  5076               	movf	??_runFinishedMenu,w,c
  6033  00CE24  0A07               	xorlw	7	; case 7
  6034  00CE26  B4D8               	btfsc	status,2,c
  6035  00CE28  D7DC               	goto	l5951
  6036  00CE2A  0A0C               	xorlw	12	; case 11
  6037  00CE2C  B4D8               	btfsc	status,2,c
  6038  00CE2E  D7DF               	goto	l5953
  6039  00CE30  0A04               	xorlw	4	; case 15
  6040  00CE32  B4D8               	btfsc	status,2,c
  6041  00CE34  D7E2               	goto	l5955
  6042  00CE36                     l304:
  6043  00CE36  A281               	btfss	3969,1,c	;volatile
  6044  00CE38  0012               	return	
  6045  00CE3A  D7FD               	goto	l304
  6046  00CE3C                     __end_of_runFinishedMenu:
  6047                           	opt callstack 0
  6048                           
  6049 ;; *************** function _runFinished *****************
  6050 ;; Defined at:
  6051 ;;		line 526 in file "main.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;  menu            2  113[COMRAM] PTR unsigned char 
  6054 ;;		 -> main@menu(1), 
  6055 ;;  currentRun      2  115[COMRAM] PTR struct .
  6056 ;;		 -> main@currentRun(43), 
  6057 ;;  polePage        2  117[COMRAM] PTR unsigned char 
  6058 ;;		 -> main@polePage(1), 
  6059 ;;  displayRun      2  119[COMRAM] PTR struct .
  6060 ;;		 -> main@displayRun(43), 
  6061 ;;  logs            2  121[COMRAM] PTR _Bool 
  6062 ;;		 -> main@logs(1), 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;  i               1    9[BANK0 ] unsigned char 
  6065 ;;  endSec          2    7[BANK0 ] int 
  6066 ;;  startSec        2    5[BANK0 ] int 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      void 
  6069 ;; Registers used:
  6070 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6076 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Totals:        10      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;Total ram usage:       20 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:   11
  6083 ;; This function calls:
  6084 ;;		_I2C_Master_Read
  6085 ;;		_I2C_Master_Start
  6086 ;;		_I2C_Master_Stop
  6087 ;;		_I2C_Master_Write
  6088 ;;		___wmul
  6089 ;;		_bcdToDec
  6090 ;;		_lcdInst
  6091 ;;		_printf
  6092 ;;		_writeByteToDriveArduino
  6093 ;; This function is called by:
  6094 ;;		_main
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           	psect	text13
  6099  00DB54                     __ptext13:
  6100                           	opt callstack 0
  6101  00DB54                     _runFinished:
  6102                           	opt callstack 19
  6103                           
  6104                           ;main.c: 528:     int endSec = 0;
  6105                           
  6106                           ;incstack = 0
  6107  00DB54  0E00               	movlw	0
  6108  00DB56  0100               	movlb	0	; () banked
  6109  00DB58  6F88               	movwf	(runFinished@endSec+1)& (0+255),b
  6110  00DB5A  0E00               	movlw	0
  6111  00DB5C  6F87               	movwf	runFinished@endSec& (0+255),b
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;main.c: 530:  writeByteToDriveArduino(6);
  6115  00DB5E  0E06               	movlw	6
  6116  00DB60  ECA5  F062         	call	_writeByteToDriveArduino
  6117                           
  6118                           ;main.c: 531:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  6119  00DB64  0E01               	movlw	1
  6120  00DB66  ECEA  F061         	call	_lcdInst
  6121  00DB6A  0E11               	movlw	17
  6122  00DB6C  0100               	movlb	0	; () banked
  6123  00DB6E  6F80               	movwf	??_runFinished& (0+255),b
  6124  00DB70  0E3A               	movlw	58
  6125  00DB72                     u6467:
  6126  00DB72  2EE8               	decfsz	wreg,f,c
  6127  00DB74  D7FE               	bra	u6467
  6128  00DB76  2F80               	decfsz	??_runFinished& (0+255),f,b
  6129  00DB78  D7FC               	bra	u6467
  6130  00DB7A  F000               	nop	
  6131  00DB7C  0E80               	movlw	128
  6132  00DB7E  ECEA  F061         	call	_lcdInst
  6133                           
  6134                           ;main.c: 533:     printf("Finished");
  6135  00DB82  0EB1               	movlw	low STR_7
  6136  00DB84  6E66               	movwf	printf@fmt,c
  6137  00DB86  0EFF               	movlw	high STR_7
  6138  00DB88  6E67               	movwf	printf@fmt+1,c
  6139  00DB8A  EC55  F062         	call	_printf	;wreg free
  6140                           
  6141                           ;main.c: 535:     LATAbits.LATA4 = 0;
  6142  00DB8E  9889               	bcf	3977,4,c	;volatile
  6143                           
  6144                           ;main.c: 536:     LATCbits.LATC1 = 0;
  6145  00DB90  928B               	bcf	3979,1,c	;volatile
  6146                           
  6147                           ;main.c: 537:     TRISB = 0xff;
  6148  00DB92  6893               	setf	3987,c	;volatile
  6149                           
  6150                           ;main.c: 538:     LATB = 0x00;
  6151  00DB94  0E00               	movlw	0
  6152  00DB96  6E8A               	movwf	3978,c	;volatile
  6153                           
  6154                           ;main.c: 539:     currentRun->tiresSupplied = 0;
  6155  00DB98  EE20 F002          	lfsr	2,2
  6156  00DB9C  5074               	movf	runFinished@currentRun,w,c
  6157  00DB9E  26D9               	addwf	fsr2l,f,c
  6158  00DBA0  5075               	movf	runFinished@currentRun+1,w,c
  6159  00DBA2  22DA               	addwfc	fsr2h,f,c
  6160  00DBA4  0E00               	movlw	0
  6161  00DBA6  6EDF               	movwf	indf2,c
  6162                           
  6163                           ;main.c: 540:     for (i=0; i<currentRun->totalPoleNum; i++){
  6164  00DBA8  0E00               	movlw	0
  6165  00DBAA  0100               	movlb	0	; () banked
  6166  00DBAC  6FFE               	movwf	_i& (0+255),b	;volatile
  6167  00DBAE  D022               	goto	l5897
  6168  00DBB0                     l5893:
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;main.c: 541:         currentRun->tiresSupplied = currentRun->tiresSupplied + currentRun
      +                          ->poleArray[i].tiresDeployed;
  6172  00DBB0  EE20 F002          	lfsr	2,2
  6173  00DBB4  5074               	movf	runFinished@currentRun,w,c
  6174  00DBB6  26D9               	addwf	fsr2l,f,c
  6175  00DBB8  5075               	movf	runFinished@currentRun+1,w,c
  6176  00DBBA  22DA               	addwfc	fsr2h,f,c
  6177  00DBBC  51FE               	movf	_i& (0+255),w,b	;volatile
  6178  00DBBE  0D04               	mullw	4
  6179  00DBC0  C074  F080         	movff	runFinished@currentRun,??_runFinished
  6180  00DBC4  C075  F081         	movff	runFinished@currentRun+1,??_runFinished+1
  6181  00DBC8  50F3               	movf	prodl,w,c
  6182  00DBCA  2780               	addwf	??_runFinished& (0+255),f,b
  6183  00DBCC  50F4               	movf	prodh,w,c
  6184  00DBCE  2381               	addwfc	(??_runFinished+1)& (0+255),f,b
  6185  00DBD0  0E03               	movlw	3
  6186  00DBD2  2580               	addwf	??_runFinished& (0+255),w,b
  6187  00DBD4  6EE1               	movwf	fsr1l,c
  6188  00DBD6  0E00               	movlw	0
  6189  00DBD8  2181               	addwfc	(??_runFinished+1)& (0+255),w,b
  6190  00DBDA  6EE2               	movwf	fsr1h,c
  6191  00DBDC  50E7               	movf	indf1,w,c
  6192  00DBDE  6F82               	movwf	(??_runFinished+2)& (0+255),b
  6193  00DBE0  EE10 F002          	lfsr	1,2
  6194  00DBE4  5074               	movf	runFinished@currentRun,w,c
  6195  00DBE6  26E1               	addwf	fsr1l,f,c
  6196  00DBE8  5075               	movf	runFinished@currentRun+1,w,c
  6197  00DBEA  22E2               	addwfc	fsr1h,f,c
  6198  00DBEC  50E7               	movf	indf1,w,c
  6199  00DBEE  2582               	addwf	(??_runFinished+2)& (0+255),w,b
  6200  00DBF0  6EDF               	movwf	indf2,c
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;main.c: 542:     }
  6204  00DBF2  2BFE               	incf	_i& (0+255),f,b	;volatile
  6205  00DBF4                     l5897:
  6206                           
  6207                           ; BSR set to: 0
  6208  00DBF4  C074  FFD9         	movff	runFinished@currentRun,fsr2l
  6209  00DBF8  C075  FFDA         	movff	runFinished@currentRun+1,fsr2h
  6210  00DBFC  50DE               	movf	postinc2,w,c
  6211  00DBFE  5DFE               	subwf	_i& (0+255),w,b	;volatile
  6212  00DC00  A0D8               	btfss	status,0,c
  6213  00DC02  D7D6               	goto	l5893
  6214  00DC04                     u5680:
  6215  00DC04  B482               	btfsc	3970,2,c	;volatile
  6216  00DC06  D7FE               	goto	u5680
  6217                           
  6218                           ;main.c: 546:     I2C_Master_Start();
  6219  00DC08  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  6220                           
  6221                           ;main.c: 547:     I2C_Master_Write(0b11010000);
  6222  00DC0C  0E00               	movlw	0
  6223  00DC0E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  6224  00DC10  0ED0               	movlw	208
  6225  00DC12  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  6226  00DC14  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  6227                           
  6228                           ;main.c: 548:     I2C_Master_Write(0x00);
  6229  00DC18  0E00               	movlw	0
  6230  00DC1A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  6231  00DC1C  0E00               	movlw	0
  6232  00DC1E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  6233  00DC20  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  6234                           
  6235                           ;main.c: 549:     I2C_Master_Stop();
  6236  00DC24  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  6237                           
  6238                           ;main.c: 552:     I2C_Master_Start();
  6239  00DC28  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  6240                           
  6241                           ;main.c: 553:     I2C_Master_Write(0b11010001);
  6242  00DC2C  0E00               	movlw	0
  6243  00DC2E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  6244  00DC30  0ED1               	movlw	209
  6245  00DC32  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  6246  00DC34  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  6247                           
  6248                           ;main.c: 554:     for(unsigned char i = 0; i < 6; i++){
  6249  00DC38  0E00               	movlw	0
  6250  00DC3A  0100               	movlb	0	; () banked
  6251  00DC3C  6F89               	movwf	runFinished@i& (0+255),b
  6252  00DC3E                     l5907:
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;main.c: 555:         endTime[i] = I2C_Master_Read(0);
  6256  00DC3E  0E00               	movlw	0
  6257  00DC40  EC30  F062         	call	_I2C_Master_Read
  6258  00DC44  0100               	movlb	0	; () banked
  6259  00DC46  6F80               	movwf	??_runFinished& (0+255),b
  6260  00DC48  6B81               	clrf	(??_runFinished+1)& (0+255),b
  6261  00DC4A  5189               	movf	runFinished@i& (0+255),w,b
  6262  00DC4C  0D02               	mullw	2
  6263  00DC4E  0E00               	movlw	low _endTime
  6264  00DC50  24F3               	addwf	prodl,w,c
  6265  00DC52  6ED9               	movwf	fsr2l,c
  6266  00DC54  0E01               	movlw	high _endTime
  6267  00DC56  20F4               	addwfc	prodh,w,c
  6268  00DC58  6EDA               	movwf	fsr2h,c
  6269  00DC5A  C080  FFDE         	movff	??_runFinished,postinc2
  6270  00DC5E  C081  FFDD         	movff	??_runFinished+1,postdec2
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;main.c: 556:     }
  6274  00DC62  2B89               	incf	runFinished@i& (0+255),f,b
  6275                           
  6276                           ; BSR set to: 0
  6277  00DC64  0E05               	movlw	5
  6278  00DC66  6589               	cpfsgt	runFinished@i& (0+255),b
  6279  00DC68  D7EA               	goto	l5907
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;main.c: 557:     endTime[6] = I2C_Master_Read(1);
  6283  00DC6A  0E01               	movlw	1
  6284  00DC6C  EC30  F062         	call	_I2C_Master_Read
  6285  00DC70  0100               	movlb	0	; () banked
  6286  00DC72  6F80               	movwf	??_runFinished& (0+255),b
  6287  00DC74  5180               	movf	??_runFinished& (0+255),w,b
  6288  00DC76  0101               	movlb	1	; () banked
  6289  00DC78  6F0C               	movwf	(_endTime+12)& (0+255),b	;volatile
  6290  00DC7A  6B0D               	clrf	(_endTime+13)& (0+255),b	;volatile
  6291                           
  6292                           ;main.c: 558:     I2C_Master_Stop();
  6293  00DC7C  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  6294                           
  6295                           ;main.c: 560:     startSec = bcdToDec(startTime[0]) + bcdToDec(startTime[1])*60 + bcdToD
      +                          ec(startTime[2])*3600;
  6296  00DC80  0101               	movlb	1	; () banked
  6297  00DC82  510E               	movf	_startTime& (0+255),w,b	;volatile
  6298  00DC84  EC68  F062         	call	_bcdToDec
  6299  00DC88  0100               	movlb	0	; () banked
  6300  00DC8A  6F80               	movwf	??_runFinished& (0+255),b
  6301  00DC8C  0101               	movlb	1	; () banked
  6302  00DC8E  5110               	movf	(_startTime+2)& (0+255),w,b	;volatile
  6303  00DC90  EC68  F062         	call	_bcdToDec
  6304  00DC94  0100               	movlb	0	; () banked
  6305  00DC96  6F81               	movwf	(??_runFinished+1)& (0+255),b
  6306  00DC98  5181               	movf	(??_runFinished+1)& (0+255),w,b
  6307  00DC9A  0D3C               	mullw	60
  6308  00DC9C  CFF3 F082          	movff	prodl,??_runFinished+2
  6309  00DCA0  CFF4 F083          	movff	prodh,??_runFinished+3
  6310  00DCA4  0101               	movlb	1	; () banked
  6311  00DCA6  5112               	movf	(_startTime+4)& (0+255),w,b	;volatile
  6312  00DCA8  EC68  F062         	call	_bcdToDec
  6313  00DCAC  0100               	movlb	0	; () banked
  6314  00DCAE  6F84               	movwf	(??_runFinished+4)& (0+255),b
  6315  00DCB0  5184               	movf	(??_runFinished+4)& (0+255),w,b
  6316  00DCB2  6E0B               	movwf	___wmul@multiplier,c
  6317  00DCB4  6A0C               	clrf	___wmul@multiplier+1,c
  6318  00DCB6  0E0E               	movlw	14
  6319  00DCB8  6E0E               	movwf	___wmul@multiplicand+1,c
  6320  00DCBA  0E10               	movlw	16
  6321  00DCBC  6E0D               	movwf	___wmul@multiplicand,c
  6322  00DCBE  EC42  F062         	call	___wmul	;wreg free
  6323  00DCC2  500B               	movf	?___wmul,w,c
  6324  00DCC4  0100               	movlb	0	; () banked
  6325  00DCC6  2782               	addwf	(??_runFinished+2)& (0+255),f,b
  6326  00DCC8  500C               	movf	?___wmul+1,w,c
  6327  00DCCA  2383               	addwfc	(??_runFinished+3)& (0+255),f,b
  6328  00DCCC  5180               	movf	??_runFinished& (0+255),w,b
  6329  00DCCE  2582               	addwf	(??_runFinished+2)& (0+255),w,b
  6330  00DCD0  6F85               	movwf	runFinished@startSec& (0+255),b
  6331  00DCD2  0E00               	movlw	0
  6332  00DCD4  2183               	addwfc	(??_runFinished+3)& (0+255),w,b
  6333  00DCD6  6F86               	movwf	(runFinished@startSec+1)& (0+255),b
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;main.c: 561:     endSec = bcdToDec(endTime[0]) + bcdToDec(endTime[1])*60 + bcdToDec(end
      +                          Time[2])*3600;
  6337  00DCD8  0101               	movlb	1	; () banked
  6338  00DCDA  5100               	movf	_endTime& (0+255),w,b	;volatile
  6339  00DCDC  EC68  F062         	call	_bcdToDec
  6340  00DCE0  0100               	movlb	0	; () banked
  6341  00DCE2  6F80               	movwf	??_runFinished& (0+255),b
  6342  00DCE4  0101               	movlb	1	; () banked
  6343  00DCE6  5102               	movf	(_endTime+2)& (0+255),w,b	;volatile
  6344  00DCE8  EC68  F062         	call	_bcdToDec
  6345  00DCEC  0100               	movlb	0	; () banked
  6346  00DCEE  6F81               	movwf	(??_runFinished+1)& (0+255),b
  6347  00DCF0  5181               	movf	(??_runFinished+1)& (0+255),w,b
  6348  00DCF2  0D3C               	mullw	60
  6349  00DCF4  CFF3 F082          	movff	prodl,??_runFinished+2
  6350  00DCF8  CFF4 F083          	movff	prodh,??_runFinished+3
  6351  00DCFC  0101               	movlb	1	; () banked
  6352  00DCFE  5104               	movf	(_endTime+4)& (0+255),w,b	;volatile
  6353  00DD00  EC68  F062         	call	_bcdToDec
  6354  00DD04  0100               	movlb	0	; () banked
  6355  00DD06  6F84               	movwf	(??_runFinished+4)& (0+255),b
  6356  00DD08  5184               	movf	(??_runFinished+4)& (0+255),w,b
  6357  00DD0A  6E0B               	movwf	___wmul@multiplier,c
  6358  00DD0C  6A0C               	clrf	___wmul@multiplier+1,c
  6359  00DD0E  0E0E               	movlw	14
  6360  00DD10  6E0E               	movwf	___wmul@multiplicand+1,c
  6361  00DD12  0E10               	movlw	16
  6362  00DD14  6E0D               	movwf	___wmul@multiplicand,c
  6363  00DD16  EC42  F062         	call	___wmul	;wreg free
  6364  00DD1A  500B               	movf	?___wmul,w,c
  6365  00DD1C  0100               	movlb	0	; () banked
  6366  00DD1E  2782               	addwf	(??_runFinished+2)& (0+255),f,b
  6367  00DD20  500C               	movf	?___wmul+1,w,c
  6368  00DD22  2383               	addwfc	(??_runFinished+3)& (0+255),f,b
  6369  00DD24  5180               	movf	??_runFinished& (0+255),w,b
  6370  00DD26  2582               	addwf	(??_runFinished+2)& (0+255),w,b
  6371  00DD28  6F87               	movwf	runFinished@endSec& (0+255),b
  6372  00DD2A  0E00               	movlw	0
  6373  00DD2C  2183               	addwfc	(??_runFinished+3)& (0+255),w,b
  6374  00DD2E  6F88               	movwf	(runFinished@endSec+1)& (0+255),b
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;main.c: 562:     currentRun->opTime = (unsigned char)(endSec - startSec);
  6378  00DD30  EE20 F001          	lfsr	2,1
  6379  00DD34  5074               	movf	runFinished@currentRun,w,c
  6380  00DD36  26D9               	addwf	fsr2l,f,c
  6381  00DD38  5075               	movf	runFinished@currentRun+1,w,c
  6382  00DD3A  22DA               	addwfc	fsr2h,f,c
  6383  00DD3C  5185               	movf	runFinished@startSec& (0+255),w,b
  6384  00DD3E  5D87               	subwf	runFinished@endSec& (0+255),w,b
  6385  00DD40  6EDF               	movwf	indf2,c
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;main.c: 563:     *polePage = 0;
  6389  00DD42  C076  FFD9         	movff	runFinished@polePage,fsr2l
  6390  00DD46  C077  FFDA         	movff	runFinished@polePage+1,fsr2h
  6391  00DD4A  0E00               	movlw	0
  6392  00DD4C  6EDF               	movwf	indf2,c
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;main.c: 564:     *logs = 0;
  6396  00DD4E  C07A  FFD9         	movff	runFinished@logs,fsr2l
  6397  00DD52  C07B  FFDA         	movff	runFinished@logs+1,fsr2h
  6398  00DD56  0E00               	movlw	0
  6399  00DD58  6EDF               	movwf	indf2,c
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;main.c: 565:     *displayRun = *currentRun;
  6403  00DD5A  C074  FFD9         	movff	runFinished@currentRun,fsr2l
  6404  00DD5E  C075  FFDA         	movff	runFinished@currentRun+1,fsr2h
  6405  00DD62  C078  FFE1         	movff	runFinished@displayRun,fsr1l
  6406  00DD66  C079  FFE2         	movff	runFinished@displayRun+1,fsr1h
  6407  00DD6A  0E2A               	movlw	42
  6408  00DD6C                     u5711:
  6409  00DD6C  CFDB FFE3          	movff	plusw2,plusw1
  6410  00DD70  06E8               	decf	wreg,f,c
  6411  00DD72  E2FC               	bc	u5711
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;main.c: 567:     *menu = 7;
  6415  00DD74  C072  FFD9         	movff	runFinished@menu,fsr2l
  6416  00DD78  C073  FFDA         	movff	runFinished@menu+1,fsr2h
  6417  00DD7C  0E07               	movlw	7
  6418  00DD7E  6EDF               	movwf	indf2,c
  6419                           
  6420                           ; BSR set to: 0
  6421  00DD80  0012               	return		;funcret
  6422  00DD82                     __end_of_runFinished:
  6423                           	opt callstack 0
  6424                           
  6425 ;; *************** function _writeByteToDriveArduino *****************
  6426 ;; Defined at:
  6427 ;;		line 43 in file "main.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;  byteToWrite     1    wreg     unsigned char 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  byteToWrite     1    3[COMRAM] unsigned char 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  1    wreg      void 
  6434 ;; Registers used:
  6435 ;;		wreg, status,2, status,0, cstack
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;Total ram usage:        1 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:    2
  6448 ;; This function calls:
  6449 ;;		_I2C_Master_Start
  6450 ;;		_I2C_Master_Stop
  6451 ;;		_I2C_Master_Write
  6452 ;; This function is called by:
  6453 ;;		_start
  6454 ;;		_runFinished
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text14
  6459  00C54A                     __ptext14:
  6460                           	opt callstack 0
  6461  00C54A                     _writeByteToDriveArduino:
  6462                           	opt callstack 27
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;incstack = 0
  6466                           ;writeByteToDriveArduino@byteToWrite stored from wreg
  6467  00C54A  6E04               	movwf	writeByteToDriveArduino@byteToWrite,c
  6468                           
  6469                           ;main.c: 44:  _delay((unsigned long)((100)*(10000000/4000000.0)));
  6470  00C54C  0E53               	movlw	83
  6471  00C54E                     u6477:
  6472  00C54E  2EE8               	decfsz	wreg,f,c
  6473  00C550  D7FE               	bra	u6477
  6474  00C552  F000               	nop	
  6475  00C554                     l135:
  6476  00C554  B482               	btfsc	3970,2,c	;volatile
  6477  00C556  D7FE               	goto	l135
  6478                           
  6479                           ;main.c: 46:     I2C_Master_Start();
  6480  00C558  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  6481                           
  6482                           ;main.c: 47:     I2C_Master_Write(0b00010000);
  6483  00C55C  0E00               	movlw	0
  6484  00C55E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  6485  00C560  0E10               	movlw	16
  6486  00C562  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  6487  00C564  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  6488                           
  6489                           ;main.c: 48:     I2C_Master_Write(byteToWrite);
  6490  00C568  C004  F002         	movff	writeByteToDriveArduino@byteToWrite,I2C_Master_Write@byteToWrite
  6491  00C56C  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  6492  00C56E  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  6493                           
  6494                           ;main.c: 49:     I2C_Master_Stop();
  6495  00C572  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  6496  00C576  0012               	return		;funcret
  6497  00C578                     __end_of_writeByteToDriveArduino:
  6498                           	opt callstack 0
  6499                           
  6500 ;; *************** function _bcdToDec *****************
  6501 ;; Defined at:
  6502 ;;		line 522 in file "main.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  val             1    wreg     unsigned char 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  val             1    9[COMRAM] unsigned char 
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  1    wreg      unsigned char 
  6509 ;; Registers used:
  6510 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;Total ram usage:        2 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    1
  6523 ;; This function calls:
  6524 ;;		___awdiv
  6525 ;; This function is called by:
  6526 ;;		_runFinished
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text15
  6531  00C4D0                     __ptext15:
  6532                           	opt callstack 0
  6533  00C4D0                     _bcdToDec:
  6534                           	opt callstack 28
  6535                           
  6536                           ;incstack = 0
  6537                           ;bcdToDec@val stored from wreg
  6538  00C4D0  6E0A               	movwf	bcdToDec@val,c
  6539                           
  6540                           ;main.c: 523:   return( (val/16*10) + (val%16) );
  6541  00C4D2  C00A  F009         	movff	bcdToDec@val,??_bcdToDec
  6542  00C4D6  0E0F               	movlw	15
  6543  00C4D8  1609               	andwf	??_bcdToDec,f,c
  6544  00C4DA  C00A  F001         	movff	bcdToDec@val,___awdiv@dividend
  6545  00C4DE  6A02               	clrf	___awdiv@dividend+1,c
  6546  00C4E0  0E00               	movlw	0
  6547  00C4E2  6E04               	movwf	___awdiv@divisor+1,c
  6548  00C4E4  0E10               	movlw	16
  6549  00C4E6  6E03               	movwf	___awdiv@divisor,c
  6550  00C4E8  EC22  F065         	call	___awdiv	;wreg free
  6551  00C4EC  5001               	movf	?___awdiv,w,c
  6552  00C4EE  0D0A               	mullw	10
  6553  00C4F0  50F3               	movf	prodl,w,c
  6554  00C4F2  2409               	addwf	??_bcdToDec,w,c
  6555  00C4F4  0012               	return		;funcret
  6556  00C4F6                     __end_of_bcdToDec:
  6557                           	opt callstack 0
  6558                           
  6559 ;; *************** function ___awdiv *****************
  6560 ;; Defined at:
  6561 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;  dividend        2    0[COMRAM] int 
  6564 ;;  divisor         2    2[COMRAM] int 
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;  quotient        2    6[COMRAM] int 
  6567 ;;  sign            1    5[COMRAM] unsigned char 
  6568 ;;  counter         1    4[COMRAM] unsigned char 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  2    0[COMRAM] int 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;Total ram usage:        8 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_bcdToDec
  6588 ;;		_runInfoMenu
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text16
  6593  00CA44                     __ptext16:
  6594                           	opt callstack 0
  6595  00CA44                     ___awdiv:
  6596                           	opt callstack 29
  6597                           
  6598                           ;incstack = 0
  6599  00CA44  0E00               	movlw	0
  6600  00CA46  6E06               	movwf	___awdiv@sign,c
  6601  00CA48  AE04               	btfss	___awdiv@divisor+1,7,c
  6602  00CA4A  D006               	goto	l4701
  6603  00CA4C  6C03               	negf	___awdiv@divisor,c
  6604  00CA4E  1E04               	comf	___awdiv@divisor+1,f,c
  6605  00CA50  B0D8               	btfsc	status,0,c
  6606  00CA52  2A04               	incf	___awdiv@divisor+1,f,c
  6607  00CA54  0E01               	movlw	1
  6608  00CA56  6E06               	movwf	___awdiv@sign,c
  6609  00CA58                     l4701:
  6610  00CA58  AE02               	btfss	___awdiv@dividend+1,7,c
  6611  00CA5A  D006               	goto	l4707
  6612  00CA5C  6C01               	negf	___awdiv@dividend,c
  6613  00CA5E  1E02               	comf	___awdiv@dividend+1,f,c
  6614  00CA60  B0D8               	btfsc	status,0,c
  6615  00CA62  2A02               	incf	___awdiv@dividend+1,f,c
  6616  00CA64  0E01               	movlw	1
  6617  00CA66  1A06               	xorwf	___awdiv@sign,f,c
  6618  00CA68                     l4707:
  6619  00CA68  0E00               	movlw	0
  6620  00CA6A  6E08               	movwf	___awdiv@quotient+1,c
  6621  00CA6C  0E00               	movlw	0
  6622  00CA6E  6E07               	movwf	___awdiv@quotient,c
  6623  00CA70  5003               	movf	___awdiv@divisor,w,c
  6624  00CA72  1004               	iorwf	___awdiv@divisor+1,w,c
  6625  00CA74  B4D8               	btfsc	status,2,c
  6626  00CA76  D01C               	goto	l4729
  6627  00CA78  0E01               	movlw	1
  6628  00CA7A  6E05               	movwf	___awdiv@counter,c
  6629  00CA7C  D004               	goto	l4715
  6630  00CA7E                     l4713:
  6631  00CA7E  90D8               	bcf	status,0,c
  6632  00CA80  3603               	rlcf	___awdiv@divisor,f,c
  6633  00CA82  3604               	rlcf	___awdiv@divisor+1,f,c
  6634  00CA84  2A05               	incf	___awdiv@counter,f,c
  6635  00CA86                     l4715:
  6636  00CA86  AE04               	btfss	___awdiv@divisor+1,7,c
  6637  00CA88  D7FA               	goto	l4713
  6638  00CA8A                     u3960:
  6639  00CA8A  90D8               	bcf	status,0,c
  6640  00CA8C  3607               	rlcf	___awdiv@quotient,f,c
  6641  00CA8E  3608               	rlcf	___awdiv@quotient+1,f,c
  6642  00CA90  5003               	movf	___awdiv@divisor,w,c
  6643  00CA92  5C01               	subwf	___awdiv@dividend,w,c
  6644  00CA94  5004               	movf	___awdiv@divisor+1,w,c
  6645  00CA96  5802               	subwfb	___awdiv@dividend+1,w,c
  6646  00CA98  A0D8               	btfss	status,0,c
  6647  00CA9A  D005               	goto	l4725
  6648  00CA9C  5003               	movf	___awdiv@divisor,w,c
  6649  00CA9E  5E01               	subwf	___awdiv@dividend,f,c
  6650  00CAA0  5004               	movf	___awdiv@divisor+1,w,c
  6651  00CAA2  5A02               	subwfb	___awdiv@dividend+1,f,c
  6652  00CAA4  8007               	bsf	___awdiv@quotient,0,c
  6653  00CAA6                     l4725:
  6654  00CAA6  90D8               	bcf	status,0,c
  6655  00CAA8  3204               	rrcf	___awdiv@divisor+1,f,c
  6656  00CAAA  3203               	rrcf	___awdiv@divisor,f,c
  6657  00CAAC  2E05               	decfsz	___awdiv@counter,f,c
  6658  00CAAE  D7ED               	goto	u3960
  6659  00CAB0                     l4729:
  6660  00CAB0  5006               	movf	___awdiv@sign,w,c
  6661  00CAB2  B4D8               	btfsc	status,2,c
  6662  00CAB4  D004               	goto	l4733
  6663  00CAB6  6C07               	negf	___awdiv@quotient,c
  6664  00CAB8  1E08               	comf	___awdiv@quotient+1,f,c
  6665  00CABA  B0D8               	btfsc	status,0,c
  6666  00CABC  2A08               	incf	___awdiv@quotient+1,f,c
  6667  00CABE                     l4733:
  6668  00CABE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  6669  00CAC2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  6670  00CAC6  0012               	return		;funcret
  6671  00CAC8                     __end_of___awdiv:
  6672                           	opt callstack 0
  6673                           
  6674 ;; *************** function _poleInfo *****************
  6675 ;; Defined at:
  6676 ;;		line 634 in file "main.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  menu            2  113[COMRAM] PTR unsigned char 
  6679 ;;		 -> main@menu(1), 
  6680 ;;  displayRun      2  115[COMRAM] PTR struct .
  6681 ;;		 -> main@displayRun(43), 
  6682 ;;  polePage        2  117[COMRAM] PTR unsigned char 
  6683 ;;		 -> main@polePage(1), 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;		None
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      void 
  6688 ;; Registers used:
  6689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6695 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;Total ram usage:       14 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:   11
  6702 ;; This function calls:
  6703 ;;		___lwdiv
  6704 ;;		___lwmod
  6705 ;;		_lcdInst
  6706 ;;		_printf
  6707 ;; This function is called by:
  6708 ;;		_main
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text17
  6713  00E1EA                     __ptext17:
  6714                           	opt callstack 0
  6715  00E1EA                     _poleInfo:
  6716                           	opt callstack 19
  6717                           
  6718                           ;main.c: 635:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  6719                           
  6720                           ;incstack = 0
  6721  00E1EA  0E01               	movlw	1
  6722  00E1EC  ECEA  F061         	call	_lcdInst
  6723  00E1F0  0E11               	movlw	17
  6724  00E1F2  6E78               	movwf	??_poleInfo& (0+255),c
  6725  00E1F4  0E3A               	movlw	58
  6726  00E1F6                     u6487:
  6727  00E1F6  2EE8               	decfsz	wreg,f,c
  6728  00E1F8  D7FE               	bra	u6487
  6729  00E1FA  2E78               	decfsz	??_poleInfo& (0+255),f,c
  6730  00E1FC  D7FC               	bra	u6487
  6731  00E1FE  D000               	nop2	
  6732  00E200  0E80               	movlw	128
  6733  00E202  ECEA  F061         	call	_lcdInst
  6734                           
  6735                           ;main.c: 637:     printf("Pole #%u", *polePage + 1);
  6736  00E206  0ECC               	movlw	low STR_19
  6737  00E208  6E66               	movwf	printf@fmt,c
  6738  00E20A  0EFF               	movlw	high STR_19
  6739  00E20C  6E67               	movwf	printf@fmt+1,c
  6740  00E20E  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6741  00E212  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6742  00E216  50DF               	movf	indf2,w,c
  6743  00E218  6E78               	movwf	??_poleInfo& (0+255),c
  6744  00E21A  0E01               	movlw	1
  6745  00E21C  2478               	addwf	??_poleInfo,w,c
  6746  00E21E  6E68               	movwf	?_printf+2,c
  6747  00E220  6A69               	clrf	?_printf+3,c
  6748  00E222  0E00               	movlw	0
  6749  00E224  2269               	addwfc	?_printf+3,f,c
  6750  00E226  EC55  F062         	call	_printf	;wreg free
  6751  00E22A  0EC0               	movlw	192
  6752  00E22C  ECEA  F061         	call	_lcdInst
  6753                           
  6754                           ;main.c: 639:     printf("Deploy:%u After:%u", displayRun->poleArray[*polePage].tiresDep
      +                          loyed, displayRun->poleArray[*polePage].tiresAfter);
  6755  00E230  0E04               	movlw	low STR_20
  6756  00E232  6E66               	movwf	printf@fmt,c
  6757  00E234  0EFE               	movlw	high STR_20
  6758  00E236  6E67               	movwf	printf@fmt+1,c
  6759  00E238  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6760  00E23C  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6761  00E240  50DF               	movf	indf2,w,c
  6762  00E242  6E78               	movwf	??_poleInfo& (0+255),c
  6763  00E244  5078               	movf	??_poleInfo,w,c
  6764  00E246  0D04               	mullw	4
  6765  00E248  C074  F079         	movff	poleInfo@displayRun,??_poleInfo+1
  6766  00E24C  C075  F07A         	movff	poleInfo@displayRun+1,??_poleInfo+2
  6767  00E250  50F3               	movf	prodl,w,c
  6768  00E252  2679               	addwf	??_poleInfo+1,f,c
  6769  00E254  50F4               	movf	prodh,w,c
  6770  00E256  227A               	addwfc	??_poleInfo+2,f,c
  6771  00E258  0E03               	movlw	3
  6772  00E25A  2479               	addwf	??_poleInfo+1,w,c
  6773  00E25C  6ED9               	movwf	fsr2l,c
  6774  00E25E  0E00               	movlw	0
  6775  00E260  207A               	addwfc	??_poleInfo+2,w,c
  6776  00E262  6EDA               	movwf	fsr2h,c
  6777  00E264  50DF               	movf	indf2,w,c
  6778  00E266  6E7B               	movwf	(??_poleInfo+3)& (0+255),c
  6779  00E268  507B               	movf	??_poleInfo+3,w,c
  6780  00E26A  6E68               	movwf	?_printf+2,c
  6781  00E26C  6A69               	clrf	?_printf+3,c
  6782  00E26E  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6783  00E272  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6784  00E276  50DF               	movf	indf2,w,c
  6785  00E278  6E7C               	movwf	(??_poleInfo+4)& (0+255),c
  6786  00E27A  507C               	movf	??_poleInfo+4,w,c
  6787  00E27C  0D04               	mullw	4
  6788  00E27E  C074  F07D         	movff	poleInfo@displayRun,??_poleInfo+5
  6789  00E282  C075  F07E         	movff	poleInfo@displayRun+1,??_poleInfo+6
  6790  00E286  50F3               	movf	prodl,w,c
  6791  00E288  267D               	addwf	??_poleInfo+5,f,c
  6792  00E28A  50F4               	movf	prodh,w,c
  6793  00E28C  227E               	addwfc	??_poleInfo+6,f,c
  6794  00E28E  0E04               	movlw	4
  6795  00E290  247D               	addwf	??_poleInfo+5,w,c
  6796  00E292  6ED9               	movwf	fsr2l,c
  6797  00E294  0E00               	movlw	0
  6798  00E296  207E               	addwfc	??_poleInfo+6,w,c
  6799  00E298  6EDA               	movwf	fsr2h,c
  6800  00E29A  50DF               	movf	indf2,w,c
  6801  00E29C  6E7F               	movwf	(??_poleInfo+7)& (0+255),c
  6802  00E29E  507F               	movf	??_poleInfo+7,w,c
  6803  00E2A0  6E6A               	movwf	?_printf+4,c
  6804  00E2A2  6A6B               	clrf	?_printf+5,c
  6805  00E2A4  EC55  F062         	call	_printf	;wreg free
  6806  00E2A8  0E90               	movlw	144
  6807  00E2AA  ECEA  F061         	call	_lcdInst
  6808                           
  6809                           ;main.c: 641:     printf("Distance:%hu.%hucm", displayRun->poleArray[*polePage].dist/10,
      +                           displayRun->poleArray[*polePage].dist%10);
  6810  00E2AE  0EF1               	movlw	low STR_21
  6811  00E2B0  6E66               	movwf	printf@fmt,c
  6812  00E2B2  0EFD               	movlw	high STR_21
  6813  00E2B4  6E67               	movwf	printf@fmt+1,c
  6814  00E2B6  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6815  00E2BA  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6816  00E2BE  50DF               	movf	indf2,w,c
  6817  00E2C0  6E78               	movwf	??_poleInfo& (0+255),c
  6818  00E2C2  5078               	movf	??_poleInfo,w,c
  6819  00E2C4  0D04               	mullw	4
  6820  00E2C6  C074  F079         	movff	poleInfo@displayRun,??_poleInfo+1
  6821  00E2CA  C075  F07A         	movff	poleInfo@displayRun+1,??_poleInfo+2
  6822  00E2CE  50F3               	movf	prodl,w,c
  6823  00E2D0  2679               	addwf	??_poleInfo+1,f,c
  6824  00E2D2  50F4               	movf	prodh,w,c
  6825  00E2D4  227A               	addwfc	??_poleInfo+2,f,c
  6826  00E2D6  0E05               	movlw	5
  6827  00E2D8  2479               	addwf	??_poleInfo+1,w,c
  6828  00E2DA  6ED9               	movwf	fsr2l,c
  6829  00E2DC  0E00               	movlw	0
  6830  00E2DE  207A               	addwfc	??_poleInfo+2,w,c
  6831  00E2E0  6EDA               	movwf	fsr2h,c
  6832  00E2E2  CFDE F001          	movff	postinc2,___lwdiv@dividend
  6833  00E2E6  CFDD F002          	movff	postdec2,___lwdiv@dividend+1
  6834  00E2EA  0E00               	movlw	0
  6835  00E2EC  6E04               	movwf	___lwdiv@divisor+1,c
  6836  00E2EE  0E0A               	movlw	10
  6837  00E2F0  6E03               	movwf	___lwdiv@divisor,c
  6838  00E2F2  ECBC  F063         	call	___lwdiv	;wreg free
  6839  00E2F6  C001  F068         	movff	?___lwdiv,?_printf+2
  6840  00E2FA  C002  F069         	movff	?___lwdiv+1,?_printf+3
  6841  00E2FE  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6842  00E302  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6843  00E306  50DF               	movf	indf2,w,c
  6844  00E308  6E7B               	movwf	(??_poleInfo+3)& (0+255),c
  6845  00E30A  507B               	movf	??_poleInfo+3,w,c
  6846  00E30C  0D04               	mullw	4
  6847  00E30E  C074  F07C         	movff	poleInfo@displayRun,??_poleInfo+4
  6848  00E312  C075  F07D         	movff	poleInfo@displayRun+1,??_poleInfo+5
  6849  00E316  50F3               	movf	prodl,w,c
  6850  00E318  267C               	addwf	??_poleInfo+4,f,c
  6851  00E31A  50F4               	movf	prodh,w,c
  6852  00E31C  227D               	addwfc	??_poleInfo+5,f,c
  6853  00E31E  0E05               	movlw	5
  6854  00E320  247C               	addwf	??_poleInfo+4,w,c
  6855  00E322  6ED9               	movwf	fsr2l,c
  6856  00E324  0E00               	movlw	0
  6857  00E326  207D               	addwfc	??_poleInfo+5,w,c
  6858  00E328  6EDA               	movwf	fsr2h,c
  6859  00E32A  CFDE F001          	movff	postinc2,___lwmod@dividend
  6860  00E32E  CFDD F002          	movff	postdec2,___lwmod@dividend+1
  6861  00E332  0E00               	movlw	0
  6862  00E334  6E04               	movwf	___lwmod@divisor+1,c
  6863  00E336  0E0A               	movlw	10
  6864  00E338  6E03               	movwf	___lwmod@divisor,c
  6865  00E33A  EC76  F063         	call	___lwmod	;wreg free
  6866  00E33E  C001  F06A         	movff	?___lwmod,?_printf+4
  6867  00E342  C002  F06B         	movff	?___lwmod+1,?_printf+5
  6868  00E346  EC55  F062         	call	_printf	;wreg free
  6869  00E34A  0ED0               	movlw	208
  6870  00E34C  ECEA  F061         	call	_lcdInst
  6871                           
  6872                           ;main.c: 643:     printf("<*  (D)Back   #>");
  6873  00E350  0E39               	movlw	low STR_22
  6874  00E352  6E66               	movwf	printf@fmt,c
  6875  00E354  0EFE               	movlw	high STR_22
  6876  00E356  6E67               	movwf	printf@fmt+1,c
  6877  00E358  EC55  F062         	call	_printf	;wreg free
  6878  00E35C                     l328:
  6879  00E35C  A281               	btfss	3969,1,c	;volatile
  6880  00E35E  D7FE               	goto	l328
  6881                           
  6882                           ;main.c: 645:     keypress = (PORTB & 0xF0) >> 4;
  6883  00E360  3881               	swapf	3969,w,c	;volatile
  6884  00E362  0B0F               	andlw	15
  6885  00E364  0B0F               	andlw	15
  6886  00E366  0100               	movlb	0	; () banked
  6887  00E368  6FFD               	movwf	_keypress& (0+255),b	;volatile
  6888                           
  6889                           ;main.c: 646:     switch (keypress){
  6890  00E36A  D04B               	goto	l6051
  6891  00E36C                     l6035:
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;main.c: 648:             *menu = 3;
  6895  00E36C  C072  FFD9         	movff	poleInfo@menu,fsr2l
  6896  00E370  C073  FFDA         	movff	poleInfo@menu+1,fsr2h
  6897  00E374  0E03               	movlw	3
  6898  00E376  D00C               	goto	L15
  6899  00E378                     l6037:
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;main.c: 651:             if (*polePage == 0){
  6903  00E378  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6904  00E37C  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6905  00E380  50DF               	movf	indf2,w,c
  6906  00E382  A4D8               	btfss	status,2,c
  6907  00E384  D007               	goto	l6041
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;main.c: 652:                 *polePage = displayRun->totalPoleNum - 1;
  6911  00E386  C074  FFD9         	movff	poleInfo@displayRun,fsr2l
  6912  00E38A  C075  FFDA         	movff	poleInfo@displayRun+1,fsr2h
  6913  00E38E  D006               	goto	L16
  6914  00E390                     L15:
  6915  00E390  6EDF               	movwf	indf2,c
  6916                           
  6917                           ;main.c: 653:             } else {
  6918  00E392  D048               	goto	l340
  6919  00E394                     l6041:
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;main.c: 654:                 *polePage = *polePage - 1;
  6923  00E394  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6924  00E398  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6925  00E39C                     L16:
  6926  00E39C  50DF               	movf	indf2,w,c
  6927  00E39E  6E78               	movwf	??_poleInfo& (0+255),c
  6928  00E3A0  0478               	decf	??_poleInfo,w,c
  6929  00E3A2  D02A               	goto	L17
  6930  00E3A4                     l6043:
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;main.c: 658:             if (*polePage == displayRun->totalPoleNum - 1){
  6934  00E3A4  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6935  00E3A8  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6936  00E3AC  50DF               	movf	indf2,w,c
  6937  00E3AE  6E78               	movwf	??_poleInfo& (0+255),c
  6938  00E3B0  6A79               	clrf	(??_poleInfo+1)& (0+255),c
  6939  00E3B2  0EFF               	movlw	255
  6940  00E3B4  6E7A               	movwf	(??_poleInfo+2)& (0+255),c
  6941  00E3B6  0EFF               	movlw	255
  6942  00E3B8  6E7B               	movwf	(??_poleInfo+3)& (0+255),c
  6943  00E3BA  C074  FFD9         	movff	poleInfo@displayRun,fsr2l
  6944  00E3BE  C075  FFDA         	movff	poleInfo@displayRun+1,fsr2h
  6945  00E3C2  50DF               	movf	indf2,w,c
  6946  00E3C4  6E7C               	movwf	(??_poleInfo+4)& (0+255),c
  6947  00E3C6  6A7D               	clrf	(??_poleInfo+5)& (0+255),c
  6948  00E3C8  507A               	movf	??_poleInfo+2,w,c
  6949  00E3CA  267C               	addwf	??_poleInfo+4,f,c
  6950  00E3CC  507B               	movf	??_poleInfo+3,w,c
  6951  00E3CE  227D               	addwfc	??_poleInfo+5,f,c
  6952  00E3D0  5078               	movf	??_poleInfo,w,c
  6953  00E3D2  187C               	xorwf	??_poleInfo+4,w,c
  6954  00E3D4  E10A               	bnz	l6047
  6955  00E3D6  5079               	movf	??_poleInfo+1,w,c
  6956  00E3D8  187D               	xorwf	??_poleInfo+5,w,c
  6957  00E3DA  A4D8               	btfss	status,2,c
  6958  00E3DC  D006               	goto	l6047
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;main.c: 659:                 *polePage = 0;
  6962  00E3DE  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6963  00E3E2  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6964  00E3E6  0E00               	movlw	0
  6965  00E3E8  D7D3               	goto	L15
  6966  00E3EA                     l6047:
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;main.c: 661:                 *polePage = *polePage + 1;
  6970  00E3EA  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6971  00E3EE  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6972  00E3F2  50DF               	movf	indf2,w,c
  6973  00E3F4  6E78               	movwf	??_poleInfo& (0+255),c
  6974  00E3F6  2878               	incf	??_poleInfo,w,c
  6975  00E3F8                     L17:
  6976  00E3F8  C076  FFD9         	movff	poleInfo@polePage,fsr2l
  6977  00E3FC  C077  FFDA         	movff	poleInfo@polePage+1,fsr2h
  6978  00E400  D7C7               	goto	L15
  6979  00E402                     l6051:
  6980                           
  6981                           ; BSR set to: 0
  6982  00E402  51FD               	movf	_keypress& (0+255),w,b	;volatile
  6983  00E404  6E78               	movwf	??_poleInfo& (0+255),c
  6984  00E406  6A79               	clrf	(??_poleInfo+1)& (0+255),c
  6985                           
  6986                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6987                           ; Switch size 1, requested type "simple"
  6988                           ; Number of cases is 1, Range of values is 0 to 0
  6989                           ; switch strategies available:
  6990                           ; Name         Instructions Cycles
  6991                           ; simple_byte            4     3 (average)
  6992                           ;	Chosen strategy is simple_byte
  6993  00E408  5079               	movf	??_poleInfo+1,w,c
  6994  00E40A  0A00               	xorlw	0	; case 0
  6995  00E40C  A4D8               	btfss	status,2,c
  6996  00E40E  D00A               	goto	l340
  6997                           
  6998                           ; BSR set to: 0
  6999                           ; Switch size 1, requested type "simple"
  7000                           ; Number of cases is 3, Range of values is 12 to 15
  7001                           ; switch strategies available:
  7002                           ; Name         Instructions Cycles
  7003                           ; simple_byte           10     6 (average)
  7004                           ;	Chosen strategy is simple_byte
  7005  00E410  5078               	movf	??_poleInfo,w,c
  7006  00E412  0A0C               	xorlw	12	; case 12
  7007  00E414  B4D8               	btfsc	status,2,c
  7008  00E416  D7B0               	goto	l6037
  7009  00E418  0A02               	xorlw	2	; case 14
  7010  00E41A  B4D8               	btfsc	status,2,c
  7011  00E41C  D7C3               	goto	l6043
  7012  00E41E  0A01               	xorlw	1	; case 15
  7013  00E420  B4D8               	btfsc	status,2,c
  7014  00E422  D7A4               	goto	l6035
  7015  00E424                     l340:
  7016  00E424  A281               	btfss	3969,1,c	;volatile
  7017  00E426  0012               	return	
  7018  00E428  D7FD               	goto	l340
  7019  00E42A                     __end_of_poleInfo:
  7020                           	opt callstack 0
  7021                           
  7022 ;; *************** function ___lwmod *****************
  7023 ;; Defined at:
  7024 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwmod.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  dividend        2    0[COMRAM] unsigned int 
  7027 ;;  divisor         2    2[COMRAM] unsigned int 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  counter         1    4[COMRAM] unsigned char 
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  2    0[COMRAM] unsigned int 
  7032 ;; Registers used:
  7033 ;;		wreg, status,2, status,0
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7039 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;Total ram usage:        5 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_start
  7049 ;;		_poleInfo
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text18
  7054  00C6EC                     __ptext18:
  7055                           	opt callstack 0
  7056  00C6EC                     ___lwmod:
  7057                           	opt callstack 29
  7058                           
  7059                           ;incstack = 0
  7060  00C6EC  5003               	movf	___lwmod@divisor,w,c
  7061  00C6EE  1004               	iorwf	___lwmod@divisor+1,w,c
  7062  00C6F0  B4D8               	btfsc	status,2,c
  7063  00C6F2  D018               	goto	l1193
  7064  00C6F4  0E01               	movlw	1
  7065  00C6F6  6E05               	movwf	___lwmod@counter,c
  7066  00C6F8  D004               	goto	l5383
  7067  00C6FA                     l5381:
  7068  00C6FA  90D8               	bcf	status,0,c
  7069  00C6FC  3603               	rlcf	___lwmod@divisor,f,c
  7070  00C6FE  3604               	rlcf	___lwmod@divisor+1,f,c
  7071  00C700  2A05               	incf	___lwmod@counter,f,c
  7072  00C702                     l5383:
  7073  00C702  AE04               	btfss	___lwmod@divisor+1,7,c
  7074  00C704  D7FA               	goto	l5381
  7075  00C706                     u5070:
  7076  00C706  5003               	movf	___lwmod@divisor,w,c
  7077  00C708  5C01               	subwf	___lwmod@dividend,w,c
  7078  00C70A  5004               	movf	___lwmod@divisor+1,w,c
  7079  00C70C  5802               	subwfb	___lwmod@dividend+1,w,c
  7080  00C70E  A0D8               	btfss	status,0,c
  7081  00C710  D004               	goto	l5389
  7082  00C712  5003               	movf	___lwmod@divisor,w,c
  7083  00C714  5E01               	subwf	___lwmod@dividend,f,c
  7084  00C716  5004               	movf	___lwmod@divisor+1,w,c
  7085  00C718  5A02               	subwfb	___lwmod@dividend+1,f,c
  7086  00C71A                     l5389:
  7087  00C71A  90D8               	bcf	status,0,c
  7088  00C71C  3204               	rrcf	___lwmod@divisor+1,f,c
  7089  00C71E  3203               	rrcf	___lwmod@divisor,f,c
  7090  00C720  2E05               	decfsz	___lwmod@counter,f,c
  7091  00C722  D7F1               	goto	u5070
  7092  00C724                     l1193:
  7093  00C724  C001  F001         	movff	___lwmod@dividend,?___lwmod
  7094  00C728  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  7095  00C72C  0012               	return		;funcret
  7096  00C72E                     __end_of___lwmod:
  7097                           	opt callstack 0
  7098                           
  7099 ;; *************** function ___lwdiv *****************
  7100 ;; Defined at:
  7101 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  dividend        2    0[COMRAM] unsigned int 
  7104 ;;  divisor         2    2[COMRAM] unsigned int 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  quotient        2    4[COMRAM] unsigned int 
  7107 ;;  counter         1    6[COMRAM] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  2    0[COMRAM] unsigned int 
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, status,0
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;Total ram usage:        7 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; This function calls:
  7124 ;;		Nothing
  7125 ;; This function is called by:
  7126 ;;		_start
  7127 ;;		_poleInfo
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text19
  7132  00C778                     __ptext19:
  7133                           	opt callstack 0
  7134  00C778                     ___lwdiv:
  7135                           	opt callstack 29
  7136                           
  7137                           ;incstack = 0
  7138  00C778  0E00               	movlw	0
  7139  00C77A  6E06               	movwf	___lwdiv@quotient+1,c
  7140  00C77C  0E00               	movlw	0
  7141  00C77E  6E05               	movwf	___lwdiv@quotient,c
  7142  00C780  5003               	movf	___lwdiv@divisor,w,c
  7143  00C782  1004               	iorwf	___lwdiv@divisor+1,w,c
  7144  00C784  B4D8               	btfsc	status,2,c
  7145  00C786  D01C               	goto	l1183
  7146  00C788  0E01               	movlw	1
  7147  00C78A  6E07               	movwf	___lwdiv@counter,c
  7148  00C78C  D004               	goto	l5363
  7149  00C78E                     l5361:
  7150  00C78E  90D8               	bcf	status,0,c
  7151  00C790  3603               	rlcf	___lwdiv@divisor,f,c
  7152  00C792  3604               	rlcf	___lwdiv@divisor+1,f,c
  7153  00C794  2A07               	incf	___lwdiv@counter,f,c
  7154  00C796                     l5363:
  7155  00C796  AE04               	btfss	___lwdiv@divisor+1,7,c
  7156  00C798  D7FA               	goto	l5361
  7157  00C79A                     u5040:
  7158  00C79A  90D8               	bcf	status,0,c
  7159  00C79C  3605               	rlcf	___lwdiv@quotient,f,c
  7160  00C79E  3606               	rlcf	___lwdiv@quotient+1,f,c
  7161  00C7A0  5003               	movf	___lwdiv@divisor,w,c
  7162  00C7A2  5C01               	subwf	___lwdiv@dividend,w,c
  7163  00C7A4  5004               	movf	___lwdiv@divisor+1,w,c
  7164  00C7A6  5802               	subwfb	___lwdiv@dividend+1,w,c
  7165  00C7A8  A0D8               	btfss	status,0,c
  7166  00C7AA  D005               	goto	l5373
  7167  00C7AC  5003               	movf	___lwdiv@divisor,w,c
  7168  00C7AE  5E01               	subwf	___lwdiv@dividend,f,c
  7169  00C7B0  5004               	movf	___lwdiv@divisor+1,w,c
  7170  00C7B2  5A02               	subwfb	___lwdiv@dividend+1,f,c
  7171  00C7B4  8005               	bsf	___lwdiv@quotient,0,c
  7172  00C7B6                     l5373:
  7173  00C7B6  90D8               	bcf	status,0,c
  7174  00C7B8  3204               	rrcf	___lwdiv@divisor+1,f,c
  7175  00C7BA  3203               	rrcf	___lwdiv@divisor,f,c
  7176  00C7BC  2E07               	decfsz	___lwdiv@counter,f,c
  7177  00C7BE  D7ED               	goto	u5040
  7178  00C7C0                     l1183:
  7179  00C7C0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7180  00C7C4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7181  00C7C8  0012               	return		;funcret
  7182  00C7CA                     __end_of___lwdiv:
  7183                           	opt callstack 0
  7184                           
  7185 ;; *************** function _options *****************
  7186 ;; Defined at:
  7187 ;;		line 785 in file "main.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  menu            2  113[COMRAM] PTR unsigned char 
  7190 ;;		 -> main@menu(1), 
  7191 ;;  topMagTires     2  115[COMRAM] PTR unsigned char 
  7192 ;;		 -> main@topMagTires(1), 
  7193 ;;  bottomMagTir    2  117[COMRAM] PTR unsigned char 
  7194 ;;		 -> main@bottomMagTires(1), 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  ones            1    6[BANK0 ] unsigned char 
  7197 ;;  forward         1    5[BANK0 ] _Bool 
  7198 ;;  tens            1    4[BANK0 ] unsigned char 
  7199 ;;  bottomMagTir    1    3[BANK0 ] unsigned char 
  7200 ;;  topMagTireMo    1    2[BANK0 ] unsigned char 
  7201 ;;  topMagTireCh    1    1[BANK0 ] unsigned char 
  7202 ;;  bottomMagTir    1    0[BANK0 ] unsigned char 
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  1    wreg      void 
  7205 ;; Registers used:
  7206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7212 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Totals:         8       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;Total ram usage:       15 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; Hardware stack levels required when called:   11
  7219 ;; This function calls:
  7220 ;;		___wmul
  7221 ;;		_bottomMagStepper
  7222 ;;		_lcdInst
  7223 ;;		_printf
  7224 ;;		_topMagStepper
  7225 ;; This function is called by:
  7226 ;;		_main
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           	psect	text20
  7231  00EFD2                     __ptext20:
  7232                           	opt callstack 0
  7233  00EFD2                     _options:
  7234                           	opt callstack 19
  7235                           
  7236                           ;main.c: 786:     unsigned char tens = 0;
  7237                           
  7238                           ;incstack = 0
  7239  00EFD2  0E00               	movlw	0
  7240  00EFD4  0100               	movlb	0	; () banked
  7241  00EFD6  6F84               	movwf	options@tens& (0+255),b
  7242                           
  7243                           ;main.c: 787:     unsigned char ones = 0;
  7244  00EFD8  0E00               	movlw	0
  7245  00EFDA  6F86               	movwf	options@ones& (0+255),b
  7246                           
  7247                           ;main.c: 788:     unsigned char topMagTireMove;;main.c: 789:     char topMagTireCheck;;m
      +                          ain.c: 790:     unsigned char bottomMagTireMove;;main.c: 791:     char bottomMagTireChec
      +                          k;;main.c: 792:     _Bool forward = 0;
  7248  00EFDC  0E00               	movlw	0
  7249  00EFDE  6F85               	movwf	options@forward& (0+255),b
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;main.c: 795:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  7253  00EFE0  0E01               	movlw	1
  7254  00EFE2  ECEA  F061         	call	_lcdInst
  7255  00EFE6  0E11               	movlw	17
  7256  00EFE8  6E78               	movwf	??_options& (0+255),c
  7257  00EFEA  0E3A               	movlw	58
  7258  00EFEC                     u6497:
  7259  00EFEC  2EE8               	decfsz	wreg,f,c
  7260  00EFEE  D7FE               	bra	u6497
  7261  00EFF0  2E78               	decfsz	??_options& (0+255),f,c
  7262  00EFF2  D7FC               	bra	u6497
  7263  00EFF4  D000               	nop2	
  7264  00EFF6  0E80               	movlw	128
  7265  00EFF8  ECEA  F061         	call	_lcdInst
  7266                           
  7267                           ;main.c: 797:     printf("Top mag forward");
  7268  00EFFC  0E7C               	movlw	low STR_31
  7269  00EFFE  6E66               	movwf	printf@fmt,c
  7270  00F000  0EFE               	movlw	high STR_31
  7271  00F002  6E67               	movwf	printf@fmt+1,c
  7272  00F004  EC55  F062         	call	_printf	;wreg free
  7273  00F008  0EC0               	movlw	192
  7274  00F00A  ECEA  F061         	call	_lcdInst
  7275                           
  7276                           ;main.c: 799:     printf("or backward?");
  7277  00F00E  0E2D               	movlw	low STR_32
  7278  00F010  6E66               	movwf	printf@fmt,c
  7279  00F012  0EFF               	movlw	high STR_32
  7280  00F014  6E67               	movwf	printf@fmt+1,c
  7281  00F016  EC55  F062         	call	_printf	;wreg free
  7282  00F01A  0E90               	movlw	144
  7283  00F01C  ECEA  F061         	call	_lcdInst
  7284                           
  7285                           ;main.c: 801:     printf("(#) Forward");
  7286  00F020  0E7A               	movlw	low STR_33
  7287  00F022  6E66               	movwf	printf@fmt,c
  7288  00F024  0EFF               	movlw	high STR_33
  7289  00F026  6E67               	movwf	printf@fmt+1,c
  7290  00F028  EC55  F062         	call	_printf	;wreg free
  7291  00F02C  0ED0               	movlw	208
  7292  00F02E  ECEA  F061         	call	_lcdInst
  7293                           
  7294                           ;main.c: 803:     printf("(*) Backward");
  7295  00F032  0E3A               	movlw	low STR_34
  7296  00F034  6E66               	movwf	printf@fmt,c
  7297  00F036  0EFF               	movlw	high STR_34
  7298  00F038  6E67               	movwf	printf@fmt+1,c
  7299  00F03A  EC55  F062         	call	_printf	;wreg free
  7300  00F03E                     l403:
  7301  00F03E  A281               	btfss	3969,1,c	;volatile
  7302  00F040  D7FE               	goto	l403
  7303                           
  7304                           ;main.c: 805:     keypress = (PORTB & 0xF0) >> 4;
  7305  00F042  3881               	swapf	3969,w,c	;volatile
  7306  00F044  0B0F               	andlw	15
  7307  00F046  0B0F               	andlw	15
  7308  00F048  0100               	movlb	0	; () banked
  7309  00F04A  6FFD               	movwf	_keypress& (0+255),b	;volatile
  7310                           
  7311                           ;main.c: 806:     switch (keypress){
  7312  00F04C  D005               	goto	l6269
  7313  00F04E                     l6263:
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;main.c: 808:             forward = 1;
  7317  00F04E  0E01               	movlw	1
  7318  00F050  D001               	goto	L18
  7319  00F052                     l6265:
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;main.c: 811:             forward = 0;
  7323  00F052  0E00               	movlw	0
  7324  00F054                     L18:
  7325  00F054  6F85               	movwf	options@forward& (0+255),b
  7326                           
  7327                           ;main.c: 812:             break;
  7328  00F056  D00E               	goto	l410
  7329  00F058                     l6269:
  7330                           
  7331                           ; BSR set to: 0
  7332  00F058  51FD               	movf	_keypress& (0+255),w,b	;volatile
  7333  00F05A  6E78               	movwf	??_options& (0+255),c
  7334  00F05C  6A79               	clrf	(??_options+1)& (0+255),c
  7335                           
  7336                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7337                           ; Switch size 1, requested type "simple"
  7338                           ; Number of cases is 1, Range of values is 0 to 0
  7339                           ; switch strategies available:
  7340                           ; Name         Instructions Cycles
  7341                           ; simple_byte            4     3 (average)
  7342                           ;	Chosen strategy is simple_byte
  7343  00F05E  5079               	movf	??_options+1,w,c
  7344  00F060  0A00               	xorlw	0	; case 0
  7345  00F062  A4D8               	btfss	status,2,c
  7346  00F064  D007               	goto	l410
  7347                           
  7348                           ; BSR set to: 0
  7349                           ; Switch size 1, requested type "simple"
  7350                           ; Number of cases is 2, Range of values is 12 to 14
  7351                           ; switch strategies available:
  7352                           ; Name         Instructions Cycles
  7353                           ; simple_byte            7     4 (average)
  7354                           ;	Chosen strategy is simple_byte
  7355  00F066  5078               	movf	??_options,w,c
  7356  00F068  0A0C               	xorlw	12	; case 12
  7357  00F06A  B4D8               	btfsc	status,2,c
  7358  00F06C  D7F2               	goto	l6265
  7359  00F06E  0A02               	xorlw	2	; case 14
  7360  00F070  B4D8               	btfsc	status,2,c
  7361  00F072  D7ED               	goto	l6263
  7362  00F074                     l410:
  7363  00F074  B281               	btfsc	3969,1,c	;volatile
  7364  00F076  D7FE               	goto	l410
  7365                           
  7366                           ;main.c: 815:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  7367  00F078  0E01               	movlw	1
  7368  00F07A  ECEA  F061         	call	_lcdInst
  7369  00F07E  0E11               	movlw	17
  7370  00F080  6E78               	movwf	??_options& (0+255),c
  7371  00F082  0E3A               	movlw	58
  7372  00F084                     u6507:
  7373  00F084  2EE8               	decfsz	wreg,f,c
  7374  00F086  D7FE               	bra	u6507
  7375  00F088  2E78               	decfsz	??_options& (0+255),f,c
  7376  00F08A  D7FC               	bra	u6507
  7377  00F08C  D000               	nop2	
  7378  00F08E  0E80               	movlw	128
  7379  00F090  ECEA  F061         	call	_lcdInst
  7380                           
  7381                           ;main.c: 817:     printf("Input tire");
  7382  00F094  0E91               	movlw	low STR_35
  7383  00F096  6E66               	movwf	printf@fmt,c
  7384  00F098  0EFF               	movlw	high STR_35
  7385  00F09A  6E67               	movwf	printf@fmt+1,c
  7386  00F09C  EC55  F062         	call	_printf	;wreg free
  7387  00F0A0  0EC0               	movlw	192
  7388  00F0A2  ECEA  F061         	call	_lcdInst
  7389                           
  7390                           ;main.c: 819:     printf("spaces to move");
  7391  00F0A6  0EAB               	movlw	low STR_36
  7392  00F0A8  6E66               	movwf	printf@fmt,c
  7393  00F0AA  0EFE               	movlw	high STR_36
  7394  00F0AC  6E67               	movwf	printf@fmt+1,c
  7395  00F0AE  EC55  F062         	call	_printf	;wreg free
  7396  00F0B2  0E90               	movlw	144
  7397  00F0B4  ECEA  F061         	call	_lcdInst
  7398                           
  7399                           ;main.c: 821:     printf("top mag (01-13):");
  7400  00F0B8  0E17               	movlw	low STR_37
  7401  00F0BA  6E66               	movwf	printf@fmt,c
  7402  00F0BC  0EFE               	movlw	high STR_37
  7403  00F0BE  6E67               	movwf	printf@fmt+1,c
  7404  00F0C0  EC55  F062         	call	_printf	;wreg free
  7405  00F0C4                     l413:
  7406  00F0C4  A281               	btfss	3969,1,c	;volatile
  7407  00F0C6  D7FE               	goto	l413
  7408                           
  7409                           ;main.c: 823:     keypress = (PORTB & 0xF0) >> 4;
  7410  00F0C8  3881               	swapf	3969,w,c	;volatile
  7411  00F0CA  0B0F               	andlw	15
  7412  00F0CC  0B0F               	andlw	15
  7413  00F0CE  0100               	movlb	0	; () banked
  7414  00F0D0  6FFD               	movwf	_keypress& (0+255),b	;volatile
  7415                           
  7416                           ;main.c: 824:     switch (keypress){
  7417  00F0D2  D005               	goto	l6295
  7418  00F0D4                     l6289:
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;main.c: 826:             tens = 0;
  7422  00F0D4  0E00               	movlw	0
  7423  00F0D6  D001               	goto	L19
  7424  00F0D8                     l6291:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;main.c: 829:             tens = 1;
  7428  00F0D8  0E01               	movlw	1
  7429  00F0DA                     L19:
  7430  00F0DA  6F84               	movwf	options@tens& (0+255),b
  7431                           
  7432                           ;main.c: 830:             break;
  7433  00F0DC  D00E               	goto	l420
  7434  00F0DE                     l6295:
  7435                           
  7436                           ; BSR set to: 0
  7437  00F0DE  51FD               	movf	_keypress& (0+255),w,b	;volatile
  7438  00F0E0  6E78               	movwf	??_options& (0+255),c
  7439  00F0E2  6A79               	clrf	(??_options+1)& (0+255),c
  7440                           
  7441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7442                           ; Switch size 1, requested type "simple"
  7443                           ; Number of cases is 1, Range of values is 0 to 0
  7444                           ; switch strategies available:
  7445                           ; Name         Instructions Cycles
  7446                           ; simple_byte            4     3 (average)
  7447                           ;	Chosen strategy is simple_byte
  7448  00F0E4  5079               	movf	??_options+1,w,c
  7449  00F0E6  0A00               	xorlw	0	; case 0
  7450  00F0E8  A4D8               	btfss	status,2,c
  7451  00F0EA  D007               	goto	l420
  7452                           
  7453                           ; BSR set to: 0
  7454                           ; Switch size 1, requested type "simple"
  7455                           ; Number of cases is 2, Range of values is 0 to 13
  7456                           ; switch strategies available:
  7457                           ; Name         Instructions Cycles
  7458                           ; simple_byte            7     4 (average)
  7459                           ;	Chosen strategy is simple_byte
  7460  00F0EC  5078               	movf	??_options,w,c
  7461  00F0EE  0A00               	xorlw	0	; case 0
  7462  00F0F0  B4D8               	btfsc	status,2,c
  7463  00F0F2  D7F2               	goto	l6291
  7464  00F0F4  0A0D               	xorlw	13	; case 13
  7465  00F0F6  B4D8               	btfsc	status,2,c
  7466  00F0F8  D7ED               	goto	l6289
  7467  00F0FA                     l420:
  7468  00F0FA  B281               	btfsc	3969,1,c	;volatile
  7469  00F0FC  D7FE               	goto	l420
  7470  00F0FE  0ED0               	movlw	208
  7471  00F100  ECEA  F061         	call	_lcdInst
  7472                           
  7473                           ;main.c: 834:     printf("%u", tens);
  7474  00F104  0EA4               	movlw	low (STR_6+8)
  7475  00F106  6E66               	movwf	printf@fmt,c
  7476  00F108  0EFF               	movlw	high (STR_6+8)
  7477  00F10A  6E67               	movwf	printf@fmt+1,c
  7478  00F10C  C084  F068         	movff	options@tens,?_printf+2
  7479  00F110  6A69               	clrf	?_printf+3,c
  7480  00F112  EC55  F062         	call	_printf	;wreg free
  7481  00F116                     l423:
  7482  00F116  A281               	btfss	3969,1,c	;volatile
  7483  00F118  D7FE               	goto	l423
  7484                           
  7485                           ;main.c: 836:     keypress = (PORTB & 0xF0) >> 4;
  7486  00F11A  3881               	swapf	3969,w,c	;volatile
  7487  00F11C  0B0F               	andlw	15
  7488  00F11E  0B0F               	andlw	15
  7489  00F120  0100               	movlb	0	; () banked
  7490  00F122  6FFD               	movwf	_keypress& (0+255),b	;volatile
  7491                           
  7492                           ;main.c: 837:     switch (keypress){
  7493  00F124  D015               	goto	l6325
  7494  00F126                     l6303:
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;main.c: 839:             ones = 0;
  7498  00F126  0E00               	movlw	0
  7499  00F128  D011               	goto	L28
  7500  00F12A                     l6305:
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;main.c: 842:             ones = 1;
  7504  00F12A  0E01               	movlw	1
  7505  00F12C  D00F               	goto	L28
  7506  00F12E                     l6307:
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;main.c: 845:             ones = 2;
  7510  00F12E  0E02               	movlw	2
  7511  00F130  D00D               	goto	L28
  7512  00F132                     l6309:
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;main.c: 848:             ones = 3;
  7516  00F132  0E03               	movlw	3
  7517  00F134  D00B               	goto	L28
  7518  00F136                     l6311:
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;main.c: 851:             ones = 4;
  7522  00F136  0E04               	movlw	4
  7523  00F138  D009               	goto	L28
  7524  00F13A                     l6313:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;main.c: 854:             ones = 5;
  7528  00F13A  0E05               	movlw	5
  7529  00F13C  D007               	goto	L28
  7530  00F13E                     l6315:
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;main.c: 857:             ones = 6;
  7534  00F13E  0E06               	movlw	6
  7535  00F140  D005               	goto	L28
  7536  00F142                     l6317:
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;main.c: 860:             ones = 7;
  7540  00F142  0E07               	movlw	7
  7541  00F144  D003               	goto	L28
  7542  00F146                     l6319:
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;main.c: 863:             ones = 8;
  7546  00F146  0E08               	movlw	8
  7547  00F148  D001               	goto	L28
  7548  00F14A                     l6321:
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;main.c: 866:             ones = 9;
  7552  00F14A  0E09               	movlw	9
  7553  00F14C                     L28:
  7554  00F14C  6F86               	movwf	options@ones& (0+255),b
  7555                           
  7556                           ;main.c: 867:             break;
  7557  00F14E  D026               	goto	l438
  7558  00F150                     l6325:
  7559                           
  7560                           ; BSR set to: 0
  7561  00F150  51FD               	movf	_keypress& (0+255),w,b	;volatile
  7562  00F152  6E78               	movwf	??_options& (0+255),c
  7563  00F154  6A79               	clrf	(??_options+1)& (0+255),c
  7564                           
  7565                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7566                           ; Switch size 1, requested type "simple"
  7567                           ; Number of cases is 1, Range of values is 0 to 0
  7568                           ; switch strategies available:
  7569                           ; Name         Instructions Cycles
  7570                           ; simple_byte            4     3 (average)
  7571                           ;	Chosen strategy is simple_byte
  7572  00F156  5079               	movf	??_options+1,w,c
  7573  00F158  0A00               	xorlw	0	; case 0
  7574  00F15A  A4D8               	btfss	status,2,c
  7575  00F15C  D01F               	goto	l438
  7576                           
  7577                           ; BSR set to: 0
  7578                           ; Switch size 1, requested type "simple"
  7579                           ; Number of cases is 10, Range of values is 0 to 13
  7580                           ; switch strategies available:
  7581                           ; Name         Instructions Cycles
  7582                           ; simple_byte           31    16 (average)
  7583                           ;	Chosen strategy is simple_byte
  7584  00F15E  5078               	movf	??_options,w,c
  7585  00F160  0A00               	xorlw	0	; case 0
  7586  00F162  B4D8               	btfsc	status,2,c
  7587  00F164  D7E2               	goto	l6305
  7588  00F166  0A01               	xorlw	1	; case 1
  7589  00F168  B4D8               	btfsc	status,2,c
  7590  00F16A  D7E1               	goto	l6307
  7591  00F16C  0A03               	xorlw	3	; case 2
  7592  00F16E  B4D8               	btfsc	status,2,c
  7593  00F170  D7E0               	goto	l6309
  7594  00F172  0A06               	xorlw	6	; case 4
  7595  00F174  B4D8               	btfsc	status,2,c
  7596  00F176  D7DF               	goto	l6311
  7597  00F178  0A01               	xorlw	1	; case 5
  7598  00F17A  B4D8               	btfsc	status,2,c
  7599  00F17C  D7DE               	goto	l6313
  7600  00F17E  0A03               	xorlw	3	; case 6
  7601  00F180  B4D8               	btfsc	status,2,c
  7602  00F182  D7DD               	goto	l6315
  7603  00F184  0A0E               	xorlw	14	; case 8
  7604  00F186  B4D8               	btfsc	status,2,c
  7605  00F188  D7DC               	goto	l6317
  7606  00F18A  0A01               	xorlw	1	; case 9
  7607  00F18C  B4D8               	btfsc	status,2,c
  7608  00F18E  D7DB               	goto	l6319
  7609  00F190  0A03               	xorlw	3	; case 10
  7610  00F192  B4D8               	btfsc	status,2,c
  7611  00F194  D7DA               	goto	l6321
  7612  00F196  0A07               	xorlw	7	; case 13
  7613  00F198  B4D8               	btfsc	status,2,c
  7614  00F19A  D7C5               	goto	l6303
  7615  00F19C                     l438:
  7616  00F19C  B281               	btfsc	3969,1,c	;volatile
  7617  00F19E  D7FE               	goto	l438
  7618                           
  7619                           ;main.c: 870:     topMagTireMove = tens*10 + ones;
  7620  00F1A0  0100               	movlb	0	; () banked
  7621  00F1A2  5184               	movf	options@tens& (0+255),w,b
  7622  00F1A4  0D0A               	mullw	10
  7623  00F1A6  50F3               	movf	prodl,w,c
  7624  00F1A8  2586               	addwf	options@ones& (0+255),w,b
  7625  00F1AA  6F82               	movwf	options@topMagTireMove& (0+255),b
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;main.c: 871:     if (forward){
  7629  00F1AC  5185               	movf	options@forward& (0+255),w,b
  7630  00F1AE  B4D8               	btfsc	status,2,c
  7631  00F1B0  D009               	goto	l6333
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;main.c: 872:         topMagTireCheck = (*topMagTires) - topMagTireMove;
  7635  00F1B2  C074  FFD9         	movff	options@topMagTires,fsr2l
  7636  00F1B6  C075  FFDA         	movff	options@topMagTires+1,fsr2h
  7637  00F1BA  50DF               	movf	indf2,w,c
  7638  00F1BC  6E78               	movwf	??_options& (0+255),c
  7639  00F1BE  5182               	movf	options@topMagTireMove& (0+255),w,b
  7640  00F1C0  5C78               	subwf	??_options,w,c
  7641  00F1C2  D006               	goto	L29
  7642  00F1C4                     l6333:
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;main.c: 874:         topMagTireCheck = (*topMagTires) + topMagTireMove;
  7646  00F1C4  C074  FFD9         	movff	options@topMagTires,fsr2l
  7647  00F1C8  C075  FFDA         	movff	options@topMagTires+1,fsr2h
  7648  00F1CC  50DF               	movf	indf2,w,c
  7649  00F1CE  2582               	addwf	options@topMagTireMove& (0+255),w,b
  7650  00F1D0                     L29:
  7651  00F1D0  6F81               	movwf	options@topMagTireCheck& (0+255),b
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;main.c: 878:         *topMagTires = topMagTireCheck;
  7655  00F1D2  C074  FFD9         	movff	options@topMagTires,fsr2l
  7656  00F1D6  C075  FFDA         	movff	options@topMagTires+1,fsr2h
  7657  00F1DA  C081  FFDF         	movff	options@topMagTireCheck,indf2
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;main.c: 879:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  7661  00F1DE  0E01               	movlw	1
  7662  00F1E0  ECEA  F061         	call	_lcdInst
  7663  00F1E4  0E11               	movlw	17
  7664  00F1E6  6E78               	movwf	??_options& (0+255),c
  7665  00F1E8  0E3A               	movlw	58
  7666  00F1EA                     u6517:
  7667  00F1EA  2EE8               	decfsz	wreg,f,c
  7668  00F1EC  D7FE               	bra	u6517
  7669  00F1EE  2E78               	decfsz	??_options& (0+255),f,c
  7670  00F1F0  D7FC               	bra	u6517
  7671  00F1F2  D000               	nop2	
  7672  00F1F4  0E80               	movlw	128
  7673  00F1F6  ECEA  F061         	call	_lcdInst
  7674                           
  7675                           ;main.c: 881:         printf("%u tire(s) can", *topMagTires);
  7676  00F1FA  0EBA               	movlw	low STR_39
  7677  00F1FC  6E66               	movwf	printf@fmt,c
  7678  00F1FE  0EFE               	movlw	high STR_39
  7679  00F200  6E67               	movwf	printf@fmt+1,c
  7680  00F202  C074  FFD9         	movff	options@topMagTires,fsr2l
  7681  00F206  C075  FFDA         	movff	options@topMagTires+1,fsr2h
  7682  00F20A  50DF               	movf	indf2,w,c
  7683  00F20C  6E78               	movwf	??_options& (0+255),c
  7684  00F20E  5078               	movf	??_options,w,c
  7685  00F210  6E68               	movwf	?_printf+2,c
  7686  00F212  6A69               	clrf	?_printf+3,c
  7687  00F214  EC55  F062         	call	_printf	;wreg free
  7688  00F218  0EC0               	movlw	192
  7689  00F21A  ECEA  F061         	call	_lcdInst
  7690                           
  7691                           ;main.c: 883:         printf("be loaded in");
  7692  00F21E  0E47               	movlw	low STR_40
  7693  00F220  6E66               	movwf	printf@fmt,c
  7694  00F222  0EFF               	movlw	high STR_40
  7695  00F224  6E67               	movwf	printf@fmt+1,c
  7696  00F226  EC55  F062         	call	_printf	;wreg free
  7697  00F22A  0E90               	movlw	144
  7698  00F22C  ECEA  F061         	call	_lcdInst
  7699                           
  7700                           ;main.c: 885:         printf("top mag");
  7701  00F230  0ED5               	movlw	low STR_41
  7702  00F232  6E66               	movwf	printf@fmt,c
  7703  00F234  0EFF               	movlw	high STR_41
  7704  00F236  6E67               	movwf	printf@fmt+1,c
  7705  00F238  EC55  F062         	call	_printf	;wreg free
  7706                           
  7707                           ;main.c: 886:         LATCbits.LATC1 = 1;
  7708  00F23C  828B               	bsf	3979,1,c	;volatile
  7709                           
  7710                           ;main.c: 887:         TRISB = 0x00;
  7711  00F23E  0E00               	movlw	0
  7712  00F240  6E93               	movwf	3987,c	;volatile
  7713                           
  7714                           ;main.c: 888:         LATB = 0x00;
  7715  00F242  0E00               	movlw	0
  7716  00F244  6E8A               	movwf	3978,c	;volatile
  7717                           
  7718                           ;main.c: 889:         topMagStepper(singleTireSteps*topMagTireMove, forward);
  7719  00F246  C082  F00B         	movff	options@topMagTireMove,___wmul@multiplier
  7720  00F24A  6A0C               	clrf	___wmul@multiplier+1,c
  7721  00F24C  0E0F               	movlw	15
  7722  00F24E  6E0E               	movwf	___wmul@multiplicand+1,c
  7723  00F250  0E55               	movlw	85
  7724  00F252  6E0D               	movwf	___wmul@multiplicand,c
  7725  00F254  EC42  F062         	call	___wmul	;wreg free
  7726  00F258  C00B  F011         	movff	?___wmul,topMagStepper@steps
  7727  00F25C  C00C  F012         	movff	?___wmul+1,topMagStepper@steps+1
  7728  00F260  C085  F013         	movff	options@forward,topMagStepper@forward
  7729  00F264  ECF8  F067         	call	_topMagStepper	;wreg free
  7730                           
  7731                           ;main.c: 890:         LATCbits.LATC1 = 0;
  7732  00F268  928B               	bcf	3979,1,c	;volatile
  7733                           
  7734                           ;main.c: 891:         TRISB = 0xff;
  7735  00F26A  6893               	setf	3987,c	;volatile
  7736                           
  7737                           ;main.c: 892:         LATB = 0x00;
  7738  00F26C  0E00               	movlw	0
  7739  00F26E  6E8A               	movwf	3978,c	;volatile
  7740                           
  7741                           ;main.c: 893:         if (topMagTireMove == 0){
  7742  00F270  0100               	movlb	0	; () banked
  7743  00F272  5182               	movf	options@topMagTireMove& (0+255),w,b
  7744  00F274  A4D8               	btfss	status,2,c
  7745  00F276  D00C               	goto	l445
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;main.c: 894:             _delay((unsigned long)((1000)*(10000000/4000.0)));
  7749  00F278  0E0D               	movlw	13
  7750  00F27A  6E79               	movwf	(??_options+1)& (0+255),c
  7751  00F27C  0EAF               	movlw	175
  7752  00F27E  6E78               	movwf	??_options& (0+255),c
  7753  00F280  0EB6               	movlw	182
  7754  00F282                     u6527:
  7755  00F282  2EE8               	decfsz	wreg,f,c
  7756  00F284  D7FE               	bra	u6527
  7757  00F286  2E78               	decfsz	??_options& (0+255),f,c
  7758  00F288  D7FC               	bra	u6527
  7759  00F28A  2E79               	decfsz	(??_options+1)& (0+255),f,c
  7760  00F28C  D7FA               	bra	u6527
  7761  00F28E  D000               	nop2	
  7762  00F290                     l445:
  7763                           
  7764                           ;main.c: 906:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  7765  00F290  0E01               	movlw	1
  7766  00F292  ECEA  F061         	call	_lcdInst
  7767  00F296  0E11               	movlw	17
  7768  00F298  6E78               	movwf	??_options& (0+255),c
  7769  00F29A  0E3A               	movlw	58
  7770  00F29C                     u6537:
  7771  00F29C  2EE8               	decfsz	wreg,f,c
  7772  00F29E  D7FE               	bra	u6537
  7773  00F2A0  2E78               	decfsz	??_options& (0+255),f,c
  7774  00F2A2  D7FC               	bra	u6537
  7775  00F2A4  D000               	nop2	
  7776  00F2A6  0E80               	movlw	128
  7777  00F2A8  ECEA  F061         	call	_lcdInst
  7778                           
  7779                           ;main.c: 908:     printf("Bot mag forward");
  7780  00F2AC  0E8C               	movlw	low STR_44
  7781  00F2AE  6E66               	movwf	printf@fmt,c
  7782  00F2B0  0EFE               	movlw	high STR_44
  7783  00F2B2  6E67               	movwf	printf@fmt+1,c
  7784  00F2B4  EC55  F062         	call	_printf	;wreg free
  7785  00F2B8  0EC0               	movlw	192
  7786  00F2BA  ECEA  F061         	call	_lcdInst
  7787                           
  7788                           ;main.c: 910:     printf("or backward?");
  7789  00F2BE  0E2D               	movlw	low STR_32
  7790  00F2C0  6E66               	movwf	printf@fmt,c
  7791  00F2C2  0EFF               	movlw	high STR_32
  7792  00F2C4  6E67               	movwf	printf@fmt+1,c
  7793  00F2C6  EC55  F062         	call	_printf	;wreg free
  7794  00F2CA  0E90               	movlw	144
  7795  00F2CC  ECEA  F061         	call	_lcdInst
  7796                           
  7797                           ;main.c: 912:     printf("(#) Forward");
  7798  00F2D0  0E7A               	movlw	low STR_33
  7799  00F2D2  6E66               	movwf	printf@fmt,c
  7800  00F2D4  0EFF               	movlw	high STR_33
  7801  00F2D6  6E67               	movwf	printf@fmt+1,c
  7802  00F2D8  EC55  F062         	call	_printf	;wreg free
  7803  00F2DC  0ED0               	movlw	208
  7804  00F2DE  ECEA  F061         	call	_lcdInst
  7805                           
  7806                           ;main.c: 914:     printf("(*) Backward");
  7807  00F2E2  0E3A               	movlw	low STR_34
  7808  00F2E4  6E66               	movwf	printf@fmt,c
  7809  00F2E6  0EFF               	movlw	high STR_34
  7810  00F2E8  6E67               	movwf	printf@fmt+1,c
  7811  00F2EA  EC55  F062         	call	_printf	;wreg free
  7812  00F2EE                     l446:
  7813  00F2EE  A281               	btfss	3969,1,c	;volatile
  7814  00F2F0  D7FE               	goto	l446
  7815                           
  7816                           ;main.c: 916:     keypress = (PORTB & 0xF0) >> 4;
  7817  00F2F2  3881               	swapf	3969,w,c	;volatile
  7818  00F2F4  0B0F               	andlw	15
  7819  00F2F6  0B0F               	andlw	15
  7820  00F2F8  0100               	movlb	0	; () banked
  7821  00F2FA  6FFD               	movwf	_keypress& (0+255),b	;volatile
  7822                           
  7823                           ;main.c: 917:     switch (keypress){
  7824  00F2FC  D005               	goto	l6411
  7825  00F2FE                     l6405:
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;main.c: 919:             forward = 1;
  7829  00F2FE  0E01               	movlw	1
  7830  00F300  D001               	goto	L30
  7831  00F302                     l6407:
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;main.c: 922:             forward = 0;
  7835  00F302  0E00               	movlw	0
  7836  00F304                     L30:
  7837  00F304  6F85               	movwf	options@forward& (0+255),b
  7838                           
  7839                           ;main.c: 923:             break;
  7840  00F306  D00E               	goto	l453
  7841  00F308                     l6411:
  7842                           
  7843                           ; BSR set to: 0
  7844  00F308  51FD               	movf	_keypress& (0+255),w,b	;volatile
  7845  00F30A  6E78               	movwf	??_options& (0+255),c
  7846  00F30C  6A79               	clrf	(??_options+1)& (0+255),c
  7847                           
  7848                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7849                           ; Switch size 1, requested type "simple"
  7850                           ; Number of cases is 1, Range of values is 0 to 0
  7851                           ; switch strategies available:
  7852                           ; Name         Instructions Cycles
  7853                           ; simple_byte            4     3 (average)
  7854                           ;	Chosen strategy is simple_byte
  7855  00F30E  5079               	movf	??_options+1,w,c
  7856  00F310  0A00               	xorlw	0	; case 0
  7857  00F312  A4D8               	btfss	status,2,c
  7858  00F314  D007               	goto	l453
  7859                           
  7860                           ; BSR set to: 0
  7861                           ; Switch size 1, requested type "simple"
  7862                           ; Number of cases is 2, Range of values is 12 to 14
  7863                           ; switch strategies available:
  7864                           ; Name         Instructions Cycles
  7865                           ; simple_byte            7     4 (average)
  7866                           ;	Chosen strategy is simple_byte
  7867  00F316  5078               	movf	??_options,w,c
  7868  00F318  0A0C               	xorlw	12	; case 12
  7869  00F31A  B4D8               	btfsc	status,2,c
  7870  00F31C  D7F2               	goto	l6407
  7871  00F31E  0A02               	xorlw	2	; case 14
  7872  00F320  B4D8               	btfsc	status,2,c
  7873  00F322  D7ED               	goto	l6405
  7874  00F324                     l453:
  7875  00F324  B281               	btfsc	3969,1,c	;volatile
  7876  00F326  D7FE               	goto	l453
  7877                           
  7878                           ;main.c: 926:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  7879  00F328  0E01               	movlw	1
  7880  00F32A  ECEA  F061         	call	_lcdInst
  7881  00F32E  0E11               	movlw	17
  7882  00F330  6E78               	movwf	??_options& (0+255),c
  7883  00F332  0E3A               	movlw	58
  7884  00F334                     u6547:
  7885  00F334  2EE8               	decfsz	wreg,f,c
  7886  00F336  D7FE               	bra	u6547
  7887  00F338  2E78               	decfsz	??_options& (0+255),f,c
  7888  00F33A  D7FC               	bra	u6547
  7889  00F33C  D000               	nop2	
  7890  00F33E  0E80               	movlw	128
  7891  00F340  ECEA  F061         	call	_lcdInst
  7892                           
  7893                           ;main.c: 928:     printf("Input tire");
  7894  00F344  0E91               	movlw	low STR_35
  7895  00F346  6E66               	movwf	printf@fmt,c
  7896  00F348  0EFF               	movlw	high STR_35
  7897  00F34A  6E67               	movwf	printf@fmt+1,c
  7898  00F34C  EC55  F062         	call	_printf	;wreg free
  7899  00F350  0EC0               	movlw	192
  7900  00F352  ECEA  F061         	call	_lcdInst
  7901                           
  7902                           ;main.c: 930:     printf("spaces to move");
  7903  00F356  0EAB               	movlw	low STR_36
  7904  00F358  6E66               	movwf	printf@fmt,c
  7905  00F35A  0EFE               	movlw	high STR_36
  7906  00F35C  6E67               	movwf	printf@fmt+1,c
  7907  00F35E  EC55  F062         	call	_printf	;wreg free
  7908  00F362  0E90               	movlw	144
  7909  00F364  ECEA  F061         	call	_lcdInst
  7910                           
  7911                           ;main.c: 932:     printf("bot mag (01-13):");
  7912  00F368  0E28               	movlw	low STR_50
  7913  00F36A  6E66               	movwf	printf@fmt,c
  7914  00F36C  0EFE               	movlw	high STR_50
  7915  00F36E  6E67               	movwf	printf@fmt+1,c
  7916  00F370  EC55  F062         	call	_printf	;wreg free
  7917  00F374                     l456:
  7918  00F374  A281               	btfss	3969,1,c	;volatile
  7919  00F376  D7FE               	goto	l456
  7920                           
  7921                           ;main.c: 934:     keypress = (PORTB & 0xF0) >> 4;
  7922  00F378  3881               	swapf	3969,w,c	;volatile
  7923  00F37A  0B0F               	andlw	15
  7924  00F37C  0B0F               	andlw	15
  7925  00F37E  0100               	movlb	0	; () banked
  7926  00F380  6FFD               	movwf	_keypress& (0+255),b	;volatile
  7927                           
  7928                           ;main.c: 935:     switch (keypress){
  7929  00F382  D005               	goto	l6437
  7930  00F384                     l6431:
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;main.c: 937:             tens = 0;
  7934  00F384  0E00               	movlw	0
  7935  00F386  D001               	goto	L31
  7936  00F388                     l6433:
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;main.c: 940:             tens = 1;
  7940  00F388  0E01               	movlw	1
  7941  00F38A                     L31:
  7942  00F38A  6F84               	movwf	options@tens& (0+255),b
  7943                           
  7944                           ;main.c: 941:             break;
  7945  00F38C  D00E               	goto	l463
  7946  00F38E                     l6437:
  7947                           
  7948                           ; BSR set to: 0
  7949  00F38E  51FD               	movf	_keypress& (0+255),w,b	;volatile
  7950  00F390  6E78               	movwf	??_options& (0+255),c
  7951  00F392  6A79               	clrf	(??_options+1)& (0+255),c
  7952                           
  7953                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7954                           ; Switch size 1, requested type "simple"
  7955                           ; Number of cases is 1, Range of values is 0 to 0
  7956                           ; switch strategies available:
  7957                           ; Name         Instructions Cycles
  7958                           ; simple_byte            4     3 (average)
  7959                           ;	Chosen strategy is simple_byte
  7960  00F394  5079               	movf	??_options+1,w,c
  7961  00F396  0A00               	xorlw	0	; case 0
  7962  00F398  A4D8               	btfss	status,2,c
  7963  00F39A  D007               	goto	l463
  7964                           
  7965                           ; BSR set to: 0
  7966                           ; Switch size 1, requested type "simple"
  7967                           ; Number of cases is 2, Range of values is 0 to 13
  7968                           ; switch strategies available:
  7969                           ; Name         Instructions Cycles
  7970                           ; simple_byte            7     4 (average)
  7971                           ;	Chosen strategy is simple_byte
  7972  00F39C  5078               	movf	??_options,w,c
  7973  00F39E  0A00               	xorlw	0	; case 0
  7974  00F3A0  B4D8               	btfsc	status,2,c
  7975  00F3A2  D7F2               	goto	l6433
  7976  00F3A4  0A0D               	xorlw	13	; case 13
  7977  00F3A6  B4D8               	btfsc	status,2,c
  7978  00F3A8  D7ED               	goto	l6431
  7979  00F3AA                     l463:
  7980  00F3AA  B281               	btfsc	3969,1,c	;volatile
  7981  00F3AC  D7FE               	goto	l463
  7982  00F3AE  0ED0               	movlw	208
  7983  00F3B0  ECEA  F061         	call	_lcdInst
  7984                           
  7985                           ;main.c: 945:     printf("%u", tens);
  7986  00F3B4  0EA4               	movlw	low (STR_6+8)
  7987  00F3B6  6E66               	movwf	printf@fmt,c
  7988  00F3B8  0EFF               	movlw	high (STR_6+8)
  7989  00F3BA  6E67               	movwf	printf@fmt+1,c
  7990  00F3BC  C084  F068         	movff	options@tens,?_printf+2
  7991  00F3C0  6A69               	clrf	?_printf+3,c
  7992  00F3C2  EC55  F062         	call	_printf	;wreg free
  7993  00F3C6                     l466:
  7994  00F3C6  A281               	btfss	3969,1,c	;volatile
  7995  00F3C8  D7FE               	goto	l466
  7996                           
  7997                           ;main.c: 947:     keypress = (PORTB & 0xF0) >> 4;
  7998  00F3CA  3881               	swapf	3969,w,c	;volatile
  7999  00F3CC  0B0F               	andlw	15
  8000  00F3CE  0B0F               	andlw	15
  8001  00F3D0  0100               	movlb	0	; () banked
  8002  00F3D2  6FFD               	movwf	_keypress& (0+255),b	;volatile
  8003                           
  8004                           ;main.c: 948:     switch (keypress){
  8005  00F3D4  D015               	goto	l6467
  8006  00F3D6                     l6445:
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;main.c: 950:             ones = 0;
  8010  00F3D6  0E00               	movlw	0
  8011  00F3D8  D011               	goto	L40
  8012  00F3DA                     l6447:
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;main.c: 953:             ones = 1;
  8016  00F3DA  0E01               	movlw	1
  8017  00F3DC  D00F               	goto	L40
  8018  00F3DE                     l6449:
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;main.c: 956:             ones = 2;
  8022  00F3DE  0E02               	movlw	2
  8023  00F3E0  D00D               	goto	L40
  8024  00F3E2                     l6451:
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;main.c: 959:             ones = 3;
  8028  00F3E2  0E03               	movlw	3
  8029  00F3E4  D00B               	goto	L40
  8030  00F3E6                     l6453:
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;main.c: 962:             ones = 4;
  8034  00F3E6  0E04               	movlw	4
  8035  00F3E8  D009               	goto	L40
  8036  00F3EA                     l6455:
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;main.c: 965:             ones = 5;
  8040  00F3EA  0E05               	movlw	5
  8041  00F3EC  D007               	goto	L40
  8042  00F3EE                     l6457:
  8043                           
  8044                           ; BSR set to: 0
  8045                           ;main.c: 968:             ones = 6;
  8046  00F3EE  0E06               	movlw	6
  8047  00F3F0  D005               	goto	L40
  8048  00F3F2                     l6459:
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;main.c: 971:             ones = 7;
  8052  00F3F2  0E07               	movlw	7
  8053  00F3F4  D003               	goto	L40
  8054  00F3F6                     l6461:
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;main.c: 974:             ones = 8;
  8058  00F3F6  0E08               	movlw	8
  8059  00F3F8  D001               	goto	L40
  8060  00F3FA                     l6463:
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;main.c: 977:             ones = 9;
  8064  00F3FA  0E09               	movlw	9
  8065  00F3FC                     L40:
  8066  00F3FC  6F86               	movwf	options@ones& (0+255),b
  8067                           
  8068                           ;main.c: 978:             break;
  8069  00F3FE  D026               	goto	l481
  8070  00F400                     l6467:
  8071                           
  8072                           ; BSR set to: 0
  8073  00F400  51FD               	movf	_keypress& (0+255),w,b	;volatile
  8074  00F402  6E78               	movwf	??_options& (0+255),c
  8075  00F404  6A79               	clrf	(??_options+1)& (0+255),c
  8076                           
  8077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8078                           ; Switch size 1, requested type "simple"
  8079                           ; Number of cases is 1, Range of values is 0 to 0
  8080                           ; switch strategies available:
  8081                           ; Name         Instructions Cycles
  8082                           ; simple_byte            4     3 (average)
  8083                           ;	Chosen strategy is simple_byte
  8084  00F406  5079               	movf	??_options+1,w,c
  8085  00F408  0A00               	xorlw	0	; case 0
  8086  00F40A  A4D8               	btfss	status,2,c
  8087  00F40C  D01F               	goto	l481
  8088                           
  8089                           ; BSR set to: 0
  8090                           ; Switch size 1, requested type "simple"
  8091                           ; Number of cases is 10, Range of values is 0 to 13
  8092                           ; switch strategies available:
  8093                           ; Name         Instructions Cycles
  8094                           ; simple_byte           31    16 (average)
  8095                           ;	Chosen strategy is simple_byte
  8096  00F40E  5078               	movf	??_options,w,c
  8097  00F410  0A00               	xorlw	0	; case 0
  8098  00F412  B4D8               	btfsc	status,2,c
  8099  00F414  D7E2               	goto	l6447
  8100  00F416  0A01               	xorlw	1	; case 1
  8101  00F418  B4D8               	btfsc	status,2,c
  8102  00F41A  D7E1               	goto	l6449
  8103  00F41C  0A03               	xorlw	3	; case 2
  8104  00F41E  B4D8               	btfsc	status,2,c
  8105  00F420  D7E0               	goto	l6451
  8106  00F422  0A06               	xorlw	6	; case 4
  8107  00F424  B4D8               	btfsc	status,2,c
  8108  00F426  D7DF               	goto	l6453
  8109  00F428  0A01               	xorlw	1	; case 5
  8110  00F42A  B4D8               	btfsc	status,2,c
  8111  00F42C  D7DE               	goto	l6455
  8112  00F42E  0A03               	xorlw	3	; case 6
  8113  00F430  B4D8               	btfsc	status,2,c
  8114  00F432  D7DD               	goto	l6457
  8115  00F434  0A0E               	xorlw	14	; case 8
  8116  00F436  B4D8               	btfsc	status,2,c
  8117  00F438  D7DC               	goto	l6459
  8118  00F43A  0A01               	xorlw	1	; case 9
  8119  00F43C  B4D8               	btfsc	status,2,c
  8120  00F43E  D7DB               	goto	l6461
  8121  00F440  0A03               	xorlw	3	; case 10
  8122  00F442  B4D8               	btfsc	status,2,c
  8123  00F444  D7DA               	goto	l6463
  8124  00F446  0A07               	xorlw	7	; case 13
  8125  00F448  B4D8               	btfsc	status,2,c
  8126  00F44A  D7C5               	goto	l6445
  8127  00F44C                     l481:
  8128  00F44C  B281               	btfsc	3969,1,c	;volatile
  8129  00F44E  D7FE               	goto	l481
  8130                           
  8131                           ;main.c: 981:     bottomMagTireMove = tens*10 + ones;
  8132  00F450  0100               	movlb	0	; () banked
  8133  00F452  5184               	movf	options@tens& (0+255),w,b
  8134  00F454  0D0A               	mullw	10
  8135  00F456  50F3               	movf	prodl,w,c
  8136  00F458  2586               	addwf	options@ones& (0+255),w,b
  8137  00F45A  6F83               	movwf	options@bottomMagTireMove& (0+255),b
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 982:     if (forward){
  8141  00F45C  5185               	movf	options@forward& (0+255),w,b
  8142  00F45E  B4D8               	btfsc	status,2,c
  8143  00F460  D009               	goto	l6475
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;main.c: 983:         bottomMagTireCheck = (*bottomMagTires) - bottomMagTireMove;
  8147  00F462  C076  FFD9         	movff	options@bottomMagTires,fsr2l
  8148  00F466  C077  FFDA         	movff	options@bottomMagTires+1,fsr2h
  8149  00F46A  50DF               	movf	indf2,w,c
  8150  00F46C  6E78               	movwf	??_options& (0+255),c
  8151  00F46E  5183               	movf	options@bottomMagTireMove& (0+255),w,b
  8152  00F470  5C78               	subwf	??_options,w,c
  8153  00F472  D006               	goto	L41
  8154  00F474                     l6475:
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;main.c: 985:         bottomMagTireCheck = (*bottomMagTires) + bottomMagTireMove;
  8158  00F474  C076  FFD9         	movff	options@bottomMagTires,fsr2l
  8159  00F478  C077  FFDA         	movff	options@bottomMagTires+1,fsr2h
  8160  00F47C  50DF               	movf	indf2,w,c
  8161  00F47E  2583               	addwf	options@bottomMagTireMove& (0+255),w,b
  8162  00F480                     L41:
  8163  00F480  6F80               	movwf	options@bottomMagTireCheck& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;main.c: 989:         *bottomMagTires = bottomMagTireCheck;
  8167  00F482  C076  FFD9         	movff	options@bottomMagTires,fsr2l
  8168  00F486  C077  FFDA         	movff	options@bottomMagTires+1,fsr2h
  8169  00F48A  C080  FFDF         	movff	options@bottomMagTireCheck,indf2
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;main.c: 990:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  8173  00F48E  0E01               	movlw	1
  8174  00F490  ECEA  F061         	call	_lcdInst
  8175  00F494  0E11               	movlw	17
  8176  00F496  6E78               	movwf	??_options& (0+255),c
  8177  00F498  0E3A               	movlw	58
  8178  00F49A                     u6557:
  8179  00F49A  2EE8               	decfsz	wreg,f,c
  8180  00F49C  D7FE               	bra	u6557
  8181  00F49E  2E78               	decfsz	??_options& (0+255),f,c
  8182  00F4A0  D7FC               	bra	u6557
  8183  00F4A2  D000               	nop2	
  8184  00F4A4  0E80               	movlw	128
  8185  00F4A6  ECEA  F061         	call	_lcdInst
  8186                           
  8187                           ;main.c: 992:         printf("%u tire(s) can", *bottomMagTires);
  8188  00F4AA  0EBA               	movlw	low STR_39
  8189  00F4AC  6E66               	movwf	printf@fmt,c
  8190  00F4AE  0EFE               	movlw	high STR_39
  8191  00F4B0  6E67               	movwf	printf@fmt+1,c
  8192  00F4B2  C076  FFD9         	movff	options@bottomMagTires,fsr2l
  8193  00F4B6  C077  FFDA         	movff	options@bottomMagTires+1,fsr2h
  8194  00F4BA  50DF               	movf	indf2,w,c
  8195  00F4BC  6E78               	movwf	??_options& (0+255),c
  8196  00F4BE  5078               	movf	??_options,w,c
  8197  00F4C0  6E68               	movwf	?_printf+2,c
  8198  00F4C2  6A69               	clrf	?_printf+3,c
  8199  00F4C4  EC55  F062         	call	_printf	;wreg free
  8200  00F4C8  0EC0               	movlw	192
  8201  00F4CA  ECEA  F061         	call	_lcdInst
  8202                           
  8203                           ;main.c: 994:         printf("be loaded in");
  8204  00F4CE  0E47               	movlw	low STR_40
  8205  00F4D0  6E66               	movwf	printf@fmt,c
  8206  00F4D2  0EFF               	movlw	high STR_40
  8207  00F4D4  6E67               	movwf	printf@fmt+1,c
  8208  00F4D6  EC55  F062         	call	_printf	;wreg free
  8209  00F4DA  0E90               	movlw	144
  8210  00F4DC  ECEA  F061         	call	_lcdInst
  8211                           
  8212                           ;main.c: 996:         printf("bot mag");
  8213  00F4E0  0EDD               	movlw	low STR_54
  8214  00F4E2  6E66               	movwf	printf@fmt,c
  8215  00F4E4  0EFF               	movlw	high STR_54
  8216  00F4E6  6E67               	movwf	printf@fmt+1,c
  8217  00F4E8  EC55  F062         	call	_printf	;wreg free
  8218                           
  8219                           ;main.c: 997:         LATCbits.LATC1 = 1;
  8220  00F4EC  828B               	bsf	3979,1,c	;volatile
  8221                           
  8222                           ;main.c: 998:         TRISB = 0x00;
  8223  00F4EE  0E00               	movlw	0
  8224  00F4F0  6E93               	movwf	3987,c	;volatile
  8225                           
  8226                           ;main.c: 999:         LATB = 0x00;
  8227  00F4F2  0E00               	movlw	0
  8228  00F4F4  6E8A               	movwf	3978,c	;volatile
  8229                           
  8230                           ;main.c: 1000:         bottomMagStepper((singleTireSteps)*bottomMagTireMove, forward);
  8231  00F4F6  C083  F00B         	movff	options@bottomMagTireMove,___wmul@multiplier
  8232  00F4FA  6A0C               	clrf	___wmul@multiplier+1,c
  8233  00F4FC  0E0F               	movlw	15
  8234  00F4FE  6E0E               	movwf	___wmul@multiplicand+1,c
  8235  00F500  0E55               	movlw	85
  8236  00F502  6E0D               	movwf	___wmul@multiplicand,c
  8237  00F504  EC42  F062         	call	___wmul	;wreg free
  8238  00F508  C00B  F011         	movff	?___wmul,bottomMagStepper@steps
  8239  00F50C  C00C  F012         	movff	?___wmul+1,bottomMagStepper@steps+1
  8240  00F510  C085  F013         	movff	options@forward,bottomMagStepper@forward
  8241  00F514  EC85  F067         	call	_bottomMagStepper	;wreg free
  8242                           
  8243                           ;main.c: 1001:         LATCbits.LATC1 = 0;
  8244  00F518  928B               	bcf	3979,1,c	;volatile
  8245                           
  8246                           ;main.c: 1002:         TRISB = 0xff;
  8247  00F51A  6893               	setf	3987,c	;volatile
  8248                           
  8249                           ;main.c: 1003:         LATB = 0x00;
  8250  00F51C  0E00               	movlw	0
  8251  00F51E  6E8A               	movwf	3978,c	;volatile
  8252                           
  8253                           ;main.c: 1004:         if (bottomMagTireMove == 0){
  8254  00F520  0100               	movlb	0	; () banked
  8255  00F522  5183               	movf	options@bottomMagTireMove& (0+255),w,b
  8256  00F524  A4D8               	btfss	status,2,c
  8257  00F526  D00C               	goto	l6527
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;main.c: 1005:             _delay((unsigned long)((1000)*(10000000/4000.0)));
  8261  00F528  0E0D               	movlw	13
  8262  00F52A  6E79               	movwf	(??_options+1)& (0+255),c
  8263  00F52C  0EAF               	movlw	175
  8264  00F52E  6E78               	movwf	??_options& (0+255),c
  8265  00F530  0EB6               	movlw	182
  8266  00F532                     u6567:
  8267  00F532  2EE8               	decfsz	wreg,f,c
  8268  00F534  D7FE               	bra	u6567
  8269  00F536  2E78               	decfsz	??_options& (0+255),f,c
  8270  00F538  D7FC               	bra	u6567
  8271  00F53A  2E79               	decfsz	(??_options+1)& (0+255),f,c
  8272  00F53C  D7FA               	bra	u6567
  8273  00F53E  D000               	nop2	
  8274  00F540                     l6527:
  8275                           
  8276                           ;main.c: 1016:     *menu = 0;
  8277  00F540  C072  FFD9         	movff	options@menu,fsr2l
  8278  00F544  C073  FFDA         	movff	options@menu+1,fsr2h
  8279  00F548  0E00               	movlw	0
  8280  00F54A  6EDF               	movwf	indf2,c
  8281  00F54C  0012               	return		;funcret
  8282  00F54E                     __end_of_options:
  8283                           	opt callstack 0
  8284                           
  8285 ;; *************** function _topMagStepper *****************
  8286 ;; Defined at:
  8287 ;;		line 130 in file "main.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;  steps           2   16[COMRAM] unsigned int 
  8290 ;;  forward         1   18[COMRAM] unsigned char 
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;  topMagCurren    2   21[COMRAM] unsigned int 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  1    wreg      void 
  8295 ;; Registers used:
  8296 ;;		wreg, status,2, status,0
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8302 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;Total ram usage:        7 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; This function calls:
  8309 ;;		Nothing
  8310 ;; This function is called by:
  8311 ;;		_start
  8312 ;;		_options
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text21
  8317  00CFF0                     __ptext21:
  8318                           	opt callstack 0
  8319  00CFF0                     _topMagStepper:
  8320                           	opt callstack 29
  8321                           
  8322                           ;main.c: 133:     if (forward){
  8323                           
  8324                           ;incstack = 0
  8325  00CFF0  5013               	movf	topMagStepper@forward,w,c
  8326  00CFF2  B4D8               	btfsc	status,2,c
  8327  00CFF4  D005               	goto	l162
  8328                           
  8329                           ;main.c: 134:         topMagCurrentStep = 0;
  8330  00CFF6  0E00               	movlw	0
  8331  00CFF8  6E17               	movwf	topMagStepper@topMagCurrentStep+1,c
  8332  00CFFA  0E00               	movlw	0
  8333  00CFFC  6E16               	movwf	topMagStepper@topMagCurrentStep,c
  8334                           
  8335                           ;main.c: 135:     } else {
  8336  00CFFE  D056               	goto	l4813
  8337  00D000                     l162:
  8338                           
  8339                           ;main.c: 136:         topMagCurrentStep = steps;
  8340  00D000  C011  F016         	movff	topMagStepper@steps,topMagStepper@topMagCurrentStep
  8341  00D004  C012  F017         	movff	topMagStepper@steps+1,topMagStepper@topMagCurrentStep+1
  8342  00D008  D051               	goto	l4813
  8343  00D00A                     l4771:
  8344                           
  8345                           ;main.c: 139:         if (topMagCurrentStep % 4 == 0){
  8346  00D00A  0E03               	movlw	3
  8347  00D00C  1416               	andwf	topMagStepper@topMagCurrentStep,w,c
  8348  00D00E  6E14               	movwf	??_topMagStepper& (0+255),c
  8349  00D010  0E00               	movlw	0
  8350  00D012  1417               	andwf	topMagStepper@topMagCurrentStep+1,w,c
  8351  00D014  6E15               	movwf	(??_topMagStepper+1)& (0+255),c
  8352  00D016  5014               	movf	??_topMagStepper,w,c
  8353  00D018  1015               	iorwf	??_topMagStepper+1,w,c
  8354  00D01A  A4D8               	btfss	status,2,c
  8355  00D01C  D00E               	goto	l4781
  8356                           
  8357                           ;main.c: 140:             LATBbits.LATB0 = 1;
  8358  00D01E  808A               	bsf	3978,0,c	;volatile
  8359                           
  8360                           ;main.c: 141:             LATBbits.LATB2 = 1;
  8361  00D020  848A               	bsf	3978,2,c	;volatile
  8362                           
  8363                           ;main.c: 142:             LATBbits.LATB4 = 0;
  8364  00D022  988A               	bcf	3978,4,c	;volatile
  8365                           
  8366                           ;main.c: 143:             LATBbits.LATB6 = 0;
  8367  00D024  9C8A               	bcf	3978,6,c	;volatile
  8368                           
  8369                           ;main.c: 144:             if (forward){
  8370  00D026  5013               	movf	topMagStepper@forward,w,c
  8371  00D028  B4D8               	btfsc	status,2,c
  8372  00D02A  D003               	goto	l4779
  8373  00D02C                     u4030:
  8374                           
  8375                           ;main.c: 145:                 topMagCurrentStep++;
  8376  00D02C  4A16               	infsnz	topMagStepper@topMagCurrentStep,f,c
  8377  00D02E  2A17               	incf	topMagStepper@topMagCurrentStep+1,f,c
  8378                           
  8379                           ;main.c: 146:             } else {
  8380  00D030  D035               	goto	l4811
  8381  00D032                     l4779:
  8382                           
  8383                           ;main.c: 147:                 topMagCurrentStep--;
  8384  00D032  0616               	decf	topMagStepper@topMagCurrentStep,f,c
  8385  00D034  A0D8               	btfss	status,0,c
  8386  00D036  0617               	decf	topMagStepper@topMagCurrentStep+1,f,c
  8387  00D038  D031               	goto	l4811
  8388  00D03A                     l4781:
  8389  00D03A  0E03               	movlw	3
  8390  00D03C  1416               	andwf	topMagStepper@topMagCurrentStep,w,c
  8391  00D03E  6E14               	movwf	??_topMagStepper& (0+255),c
  8392  00D040  0E00               	movlw	0
  8393  00D042  1417               	andwf	topMagStepper@topMagCurrentStep+1,w,c
  8394  00D044  6E15               	movwf	(??_topMagStepper+1)& (0+255),c
  8395  00D046  0414               	decf	??_topMagStepper,w,c
  8396  00D048  1015               	iorwf	??_topMagStepper+1,w,c
  8397  00D04A  A4D8               	btfss	status,2,c
  8398  00D04C  D008               	goto	l4791
  8399                           
  8400                           ;main.c: 150:             LATBbits.LATB0 = 0;
  8401  00D04E  908A               	bcf	3978,0,c	;volatile
  8402                           
  8403                           ;main.c: 151:             LATBbits.LATB2 = 1;
  8404  00D050  848A               	bsf	3978,2,c	;volatile
  8405                           
  8406                           ;main.c: 152:             LATBbits.LATB4 = 1;
  8407  00D052  888A               	bsf	3978,4,c	;volatile
  8408                           
  8409                           ;main.c: 153:             LATBbits.LATB6 = 0;
  8410  00D054  9C8A               	bcf	3978,6,c	;volatile
  8411  00D056                     l4785:
  8412                           
  8413                           ;main.c: 154:             if (forward){
  8414  00D056  5013               	movf	topMagStepper@forward,w,c
  8415  00D058  A4D8               	btfss	status,2,c
  8416  00D05A  D7E8               	goto	u4030
  8417  00D05C  D7EA               	goto	l4779
  8418  00D05E                     l4791:
  8419  00D05E  0E03               	movlw	3
  8420  00D060  1416               	andwf	topMagStepper@topMagCurrentStep,w,c
  8421  00D062  6E14               	movwf	??_topMagStepper& (0+255),c
  8422  00D064  0E00               	movlw	0
  8423  00D066  1417               	andwf	topMagStepper@topMagCurrentStep+1,w,c
  8424  00D068  6E15               	movwf	(??_topMagStepper+1)& (0+255),c
  8425  00D06A  0E02               	movlw	2
  8426  00D06C  1814               	xorwf	??_topMagStepper,w,c
  8427  00D06E  1015               	iorwf	??_topMagStepper+1,w,c
  8428  00D070  A4D8               	btfss	status,2,c
  8429  00D072  D004               	goto	l4801
  8430                           
  8431                           ;main.c: 160:             LATBbits.LATB0 = 0;
  8432  00D074  908A               	bcf	3978,0,c	;volatile
  8433                           
  8434                           ;main.c: 161:             LATBbits.LATB2 = 0;
  8435  00D076  948A               	bcf	3978,2,c	;volatile
  8436                           
  8437                           ;main.c: 162:             LATBbits.LATB4 = 1;
  8438  00D078  888A               	bsf	3978,4,c	;volatile
  8439  00D07A  D00E               	goto	L42
  8440  00D07C                     l4801:
  8441  00D07C  0E03               	movlw	3
  8442  00D07E  1416               	andwf	topMagStepper@topMagCurrentStep,w,c
  8443  00D080  6E14               	movwf	??_topMagStepper& (0+255),c
  8444  00D082  0E00               	movlw	0
  8445  00D084  1417               	andwf	topMagStepper@topMagCurrentStep+1,w,c
  8446  00D086  6E15               	movwf	(??_topMagStepper+1)& (0+255),c
  8447  00D088  0E03               	movlw	3
  8448  00D08A  1814               	xorwf	??_topMagStepper,w,c
  8449  00D08C  1015               	iorwf	??_topMagStepper+1,w,c
  8450  00D08E  A4D8               	btfss	status,2,c
  8451  00D090  D005               	goto	l4811
  8452                           
  8453                           ;main.c: 170:             LATBbits.LATB0 = 1;
  8454  00D092  808A               	bsf	3978,0,c	;volatile
  8455                           
  8456                           ;main.c: 171:             LATBbits.LATB2 = 0;
  8457  00D094  948A               	bcf	3978,2,c	;volatile
  8458                           
  8459                           ;main.c: 172:             LATBbits.LATB4 = 0;
  8460  00D096  988A               	bcf	3978,4,c	;volatile
  8461  00D098                     L42:
  8462                           
  8463                           ;main.c: 173:             LATBbits.LATB6 = 1;
  8464  00D098  8C8A               	bsf	3978,6,c	;volatile
  8465  00D09A  D7DD               	goto	l4785
  8466  00D09C                     l4811:
  8467                           
  8468                           ;main.c: 180:         _delay((unsigned long)((magazineStepperDelay)*(10000000/4000000.0)
      +                          ));
  8469  00D09C  0E05               	movlw	5
  8470  00D09E  6E14               	movwf	??_topMagStepper& (0+255),c
  8471  00D0A0  0E37               	movlw	55
  8472  00D0A2                     u6577:
  8473  00D0A2  2EE8               	decfsz	wreg,f,c
  8474  00D0A4  D7FE               	bra	u6577
  8475  00D0A6  2E14               	decfsz	??_topMagStepper& (0+255),f,c
  8476  00D0A8  D7FC               	bra	u6577
  8477  00D0AA  F000               	nop	
  8478  00D0AC                     l4813:
  8479                           
  8480                           ;main.c: 138:     while ((forward && (topMagCurrentStep < steps)) || (!forward && (topMa
      +                          gCurrentStep > 0))){
  8481  00D0AC  5013               	movf	topMagStepper@forward,w,c
  8482  00D0AE  B4D8               	btfsc	status,2,c
  8483  00D0B0  D006               	goto	u4110
  8484  00D0B2  5011               	movf	topMagStepper@steps,w,c
  8485  00D0B4  5C16               	subwf	topMagStepper@topMagCurrentStep,w,c
  8486  00D0B6  5012               	movf	topMagStepper@steps+1,w,c
  8487  00D0B8  5817               	subwfb	topMagStepper@topMagCurrentStep+1,w,c
  8488  00D0BA  A0D8               	btfss	status,0,c
  8489  00D0BC  D7A6               	goto	l4771
  8490  00D0BE                     u4110:
  8491  00D0BE  5013               	movf	topMagStepper@forward,w,c
  8492  00D0C0  A4D8               	btfss	status,2,c
  8493  00D0C2  D004               	goto	u4130
  8494  00D0C4  5016               	movf	topMagStepper@topMagCurrentStep,w,c
  8495  00D0C6  1017               	iorwf	topMagStepper@topMagCurrentStep+1,w,c
  8496  00D0C8  A4D8               	btfss	status,2,c
  8497  00D0CA  D79F               	goto	l4771
  8498  00D0CC                     u4130:
  8499                           
  8500                           ;main.c: 182:     LATBbits.LATB0 = 0;
  8501  00D0CC  908A               	bcf	3978,0,c	;volatile
  8502                           
  8503                           ;main.c: 183:     LATBbits.LATB2 = 0;
  8504  00D0CE  948A               	bcf	3978,2,c	;volatile
  8505                           
  8506                           ;main.c: 184:     LATBbits.LATB4 = 0;
  8507  00D0D0  988A               	bcf	3978,4,c	;volatile
  8508                           
  8509                           ;main.c: 185:     LATBbits.LATB6 = 0;
  8510  00D0D2  9C8A               	bcf	3978,6,c	;volatile
  8511  00D0D4  0012               	return		;funcret
  8512  00D0D6                     __end_of_topMagStepper:
  8513                           	opt callstack 0
  8514                           
  8515 ;; *************** function _bottomMagStepper *****************
  8516 ;; Defined at:
  8517 ;;		line 189 in file "main.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;  steps           2   16[COMRAM] unsigned int 
  8520 ;;  forward         1   18[COMRAM] unsigned char 
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;  bottomMagCur    2   21[COMRAM] unsigned int 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  1    wreg      void 
  8525 ;; Registers used:
  8526 ;;		wreg, status,2, status,0
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8532 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8535 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8536 ;;Total ram usage:        7 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; This function calls:
  8539 ;;		Nothing
  8540 ;; This function is called by:
  8541 ;;		_start
  8542 ;;		_options
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           	psect	text22
  8547  00CF0A                     __ptext22:
  8548                           	opt callstack 0
  8549  00CF0A                     _bottomMagStepper:
  8550                           	opt callstack 29
  8551                           
  8552                           ;main.c: 192:     if (forward){
  8553                           
  8554                           ;incstack = 0
  8555  00CF0A  5013               	movf	bottomMagStepper@forward,w,c
  8556  00CF0C  B4D8               	btfsc	status,2,c
  8557  00CF0E  D005               	goto	l189
  8558                           
  8559                           ;main.c: 193:         bottomMagCurrentStep = 0;
  8560  00CF10  0E00               	movlw	0
  8561  00CF12  6E17               	movwf	bottomMagStepper@bottomMagCurrentStep+1,c
  8562  00CF14  0E00               	movlw	0
  8563  00CF16  6E16               	movwf	bottomMagStepper@bottomMagCurrentStep,c
  8564                           
  8565                           ;main.c: 194:     } else {
  8566  00CF18  D056               	goto	l4867
  8567  00CF1A                     l189:
  8568                           
  8569                           ;main.c: 195:         bottomMagCurrentStep = steps;
  8570  00CF1A  C011  F016         	movff	bottomMagStepper@steps,bottomMagStepper@bottomMagCurrentStep
  8571  00CF1E  C012  F017         	movff	bottomMagStepper@steps+1,bottomMagStepper@bottomMagCurrentStep+1
  8572  00CF22  D051               	goto	l4867
  8573  00CF24                     l4825:
  8574                           
  8575                           ;main.c: 198:         if (bottomMagCurrentStep % 4 == 0){
  8576  00CF24  0E03               	movlw	3
  8577  00CF26  1416               	andwf	bottomMagStepper@bottomMagCurrentStep,w,c
  8578  00CF28  6E14               	movwf	??_bottomMagStepper& (0+255),c
  8579  00CF2A  0E00               	movlw	0
  8580  00CF2C  1417               	andwf	bottomMagStepper@bottomMagCurrentStep+1,w,c
  8581  00CF2E  6E15               	movwf	(??_bottomMagStepper+1)& (0+255),c
  8582  00CF30  5014               	movf	??_bottomMagStepper,w,c
  8583  00CF32  1015               	iorwf	??_bottomMagStepper+1,w,c
  8584  00CF34  A4D8               	btfss	status,2,c
  8585  00CF36  D00E               	goto	l4835
  8586                           
  8587                           ;main.c: 199:             LATBbits.LATB1 = 1;
  8588  00CF38  828A               	bsf	3978,1,c	;volatile
  8589                           
  8590                           ;main.c: 200:             LATBbits.LATB3 = 1;
  8591  00CF3A  868A               	bsf	3978,3,c	;volatile
  8592                           
  8593                           ;main.c: 201:             LATBbits.LATB5 = 0;
  8594  00CF3C  9A8A               	bcf	3978,5,c	;volatile
  8595                           
  8596                           ;main.c: 202:             LATBbits.LATB7 = 0;
  8597  00CF3E  9E8A               	bcf	3978,7,c	;volatile
  8598                           
  8599                           ;main.c: 203:             if (forward){
  8600  00CF40  5013               	movf	bottomMagStepper@forward,w,c
  8601  00CF42  B4D8               	btfsc	status,2,c
  8602  00CF44  D003               	goto	l4833
  8603  00CF46                     u4160:
  8604                           
  8605                           ;main.c: 204:                 bottomMagCurrentStep++;
  8606  00CF46  4A16               	infsnz	bottomMagStepper@bottomMagCurrentStep,f,c
  8607  00CF48  2A17               	incf	bottomMagStepper@bottomMagCurrentStep+1,f,c
  8608                           
  8609                           ;main.c: 205:             } else {
  8610  00CF4A  D035               	goto	l4865
  8611  00CF4C                     l4833:
  8612                           
  8613                           ;main.c: 206:                 bottomMagCurrentStep--;
  8614  00CF4C  0616               	decf	bottomMagStepper@bottomMagCurrentStep,f,c
  8615  00CF4E  A0D8               	btfss	status,0,c
  8616  00CF50  0617               	decf	bottomMagStepper@bottomMagCurrentStep+1,f,c
  8617  00CF52  D031               	goto	l4865
  8618  00CF54                     l4835:
  8619  00CF54  0E03               	movlw	3
  8620  00CF56  1416               	andwf	bottomMagStepper@bottomMagCurrentStep,w,c
  8621  00CF58  6E14               	movwf	??_bottomMagStepper& (0+255),c
  8622  00CF5A  0E00               	movlw	0
  8623  00CF5C  1417               	andwf	bottomMagStepper@bottomMagCurrentStep+1,w,c
  8624  00CF5E  6E15               	movwf	(??_bottomMagStepper+1)& (0+255),c
  8625  00CF60  0414               	decf	??_bottomMagStepper,w,c
  8626  00CF62  1015               	iorwf	??_bottomMagStepper+1,w,c
  8627  00CF64  A4D8               	btfss	status,2,c
  8628  00CF66  D008               	goto	l4845
  8629                           
  8630                           ;main.c: 209:             LATBbits.LATB1 = 0;
  8631  00CF68  928A               	bcf	3978,1,c	;volatile
  8632                           
  8633                           ;main.c: 210:             LATBbits.LATB3 = 1;
  8634  00CF6A  868A               	bsf	3978,3,c	;volatile
  8635                           
  8636                           ;main.c: 211:             LATBbits.LATB5 = 1;
  8637  00CF6C  8A8A               	bsf	3978,5,c	;volatile
  8638                           
  8639                           ;main.c: 212:             LATBbits.LATB7 = 0;
  8640  00CF6E  9E8A               	bcf	3978,7,c	;volatile
  8641  00CF70                     l4839:
  8642                           
  8643                           ;main.c: 213:             if (forward){
  8644  00CF70  5013               	movf	bottomMagStepper@forward,w,c
  8645  00CF72  A4D8               	btfss	status,2,c
  8646  00CF74  D7E8               	goto	u4160
  8647  00CF76  D7EA               	goto	l4833
  8648  00CF78                     l4845:
  8649  00CF78  0E03               	movlw	3
  8650  00CF7A  1416               	andwf	bottomMagStepper@bottomMagCurrentStep,w,c
  8651  00CF7C  6E14               	movwf	??_bottomMagStepper& (0+255),c
  8652  00CF7E  0E00               	movlw	0
  8653  00CF80  1417               	andwf	bottomMagStepper@bottomMagCurrentStep+1,w,c
  8654  00CF82  6E15               	movwf	(??_bottomMagStepper+1)& (0+255),c
  8655  00CF84  0E02               	movlw	2
  8656  00CF86  1814               	xorwf	??_bottomMagStepper,w,c
  8657  00CF88  1015               	iorwf	??_bottomMagStepper+1,w,c
  8658  00CF8A  A4D8               	btfss	status,2,c
  8659  00CF8C  D004               	goto	l4855
  8660                           
  8661                           ;main.c: 219:             LATBbits.LATB1 = 0;
  8662  00CF8E  928A               	bcf	3978,1,c	;volatile
  8663                           
  8664                           ;main.c: 220:             LATBbits.LATB3 = 0;
  8665  00CF90  968A               	bcf	3978,3,c	;volatile
  8666                           
  8667                           ;main.c: 221:             LATBbits.LATB5 = 1;
  8668  00CF92  8A8A               	bsf	3978,5,c	;volatile
  8669  00CF94  D00E               	goto	L43
  8670  00CF96                     l4855:
  8671  00CF96  0E03               	movlw	3
  8672  00CF98  1416               	andwf	bottomMagStepper@bottomMagCurrentStep,w,c
  8673  00CF9A  6E14               	movwf	??_bottomMagStepper& (0+255),c
  8674  00CF9C  0E00               	movlw	0
  8675  00CF9E  1417               	andwf	bottomMagStepper@bottomMagCurrentStep+1,w,c
  8676  00CFA0  6E15               	movwf	(??_bottomMagStepper+1)& (0+255),c
  8677  00CFA2  0E03               	movlw	3
  8678  00CFA4  1814               	xorwf	??_bottomMagStepper,w,c
  8679  00CFA6  1015               	iorwf	??_bottomMagStepper+1,w,c
  8680  00CFA8  A4D8               	btfss	status,2,c
  8681  00CFAA  D005               	goto	l4865
  8682                           
  8683                           ;main.c: 229:             LATBbits.LATB1 = 1;
  8684  00CFAC  828A               	bsf	3978,1,c	;volatile
  8685                           
  8686                           ;main.c: 230:             LATBbits.LATB3 = 0;
  8687  00CFAE  968A               	bcf	3978,3,c	;volatile
  8688                           
  8689                           ;main.c: 231:             LATBbits.LATB5 = 0;
  8690  00CFB0  9A8A               	bcf	3978,5,c	;volatile
  8691  00CFB2                     L43:
  8692                           
  8693                           ;main.c: 232:             LATBbits.LATB7 = 1;
  8694  00CFB2  8E8A               	bsf	3978,7,c	;volatile
  8695  00CFB4  D7DD               	goto	l4839
  8696  00CFB6                     l4865:
  8697                           
  8698                           ;main.c: 239:         _delay((unsigned long)((magazineStepperDelay)*(10000000/4000000.0)
      +                          ));
  8699  00CFB6  0E05               	movlw	5
  8700  00CFB8  6E14               	movwf	??_bottomMagStepper& (0+255),c
  8701  00CFBA  0E37               	movlw	55
  8702  00CFBC                     u6587:
  8703  00CFBC  2EE8               	decfsz	wreg,f,c
  8704  00CFBE  D7FE               	bra	u6587
  8705  00CFC0  2E14               	decfsz	??_bottomMagStepper& (0+255),f,c
  8706  00CFC2  D7FC               	bra	u6587
  8707  00CFC4  F000               	nop	
  8708  00CFC6                     l4867:
  8709                           
  8710                           ;main.c: 197:     while ((forward && (bottomMagCurrentStep < steps)) || (!forward && (bo
      +                          ttomMagCurrentStep > 0))){
  8711  00CFC6  5013               	movf	bottomMagStepper@forward,w,c
  8712  00CFC8  B4D8               	btfsc	status,2,c
  8713  00CFCA  D006               	goto	u4240
  8714  00CFCC  5011               	movf	bottomMagStepper@steps,w,c
  8715  00CFCE  5C16               	subwf	bottomMagStepper@bottomMagCurrentStep,w,c
  8716  00CFD0  5012               	movf	bottomMagStepper@steps+1,w,c
  8717  00CFD2  5817               	subwfb	bottomMagStepper@bottomMagCurrentStep+1,w,c
  8718  00CFD4  A0D8               	btfss	status,0,c
  8719  00CFD6  D7A6               	goto	l4825
  8720  00CFD8                     u4240:
  8721  00CFD8  5013               	movf	bottomMagStepper@forward,w,c
  8722  00CFDA  A4D8               	btfss	status,2,c
  8723  00CFDC  D004               	goto	u4260
  8724  00CFDE  5016               	movf	bottomMagStepper@bottomMagCurrentStep,w,c
  8725  00CFE0  1017               	iorwf	bottomMagStepper@bottomMagCurrentStep+1,w,c
  8726  00CFE2  A4D8               	btfss	status,2,c
  8727  00CFE4  D79F               	goto	l4825
  8728  00CFE6                     u4260:
  8729                           
  8730                           ;main.c: 241:     LATBbits.LATB1 = 0;
  8731  00CFE6  928A               	bcf	3978,1,c	;volatile
  8732                           
  8733                           ;main.c: 242:     LATBbits.LATB3 = 0;
  8734  00CFE8  968A               	bcf	3978,3,c	;volatile
  8735                           
  8736                           ;main.c: 243:     LATBbits.LATB5 = 0;
  8737  00CFEA  9A8A               	bcf	3978,5,c	;volatile
  8738                           
  8739                           ;main.c: 244:     LATBbits.LATB7 = 0;
  8740  00CFEC  9E8A               	bcf	3978,7,c	;volatile
  8741  00CFEE  0012               	return		;funcret
  8742  00CFF0                     __end_of_bottomMagStepper:
  8743                           	opt callstack 0
  8744                           
  8745 ;; *************** function _mainMenu *****************
  8746 ;; Defined at:
  8747 ;;		line 53 in file "main.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;  menu            2  113[COMRAM] PTR unsigned char 
  8750 ;;		 -> main@menu(1), 
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;  i               1  125[COMRAM] unsigned char 
  8753 ;;  i               1  126[COMRAM] unsigned char 
  8754 ;;  i               1  124[COMRAM] unsigned char 
  8755 ;;  time            7  117[COMRAM] unsigned char [7]
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  1    wreg      void 
  8758 ;; Registers used:
  8759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;Total ram usage:       14 bytes
  8770 ;; Hardware stack levels used:    1
  8771 ;; Hardware stack levels required when called:   11
  8772 ;; This function calls:
  8773 ;;		_I2C_Master_Read
  8774 ;;		_I2C_Master_Start
  8775 ;;		_I2C_Master_Stop
  8776 ;;		_I2C_Master_Write
  8777 ;;		_lcdInst
  8778 ;;		_printf
  8779 ;; This function is called by:
  8780 ;;		_main
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           	psect	text23
  8785  00DFB4                     __ptext23:
  8786                           	opt callstack 0
  8787  00DFB4                     _mainMenu:
  8788                           	opt callstack 19
  8789                           
  8790                           ;main.c: 54:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  8791                           
  8792                           ;incstack = 0
  8793  00DFB4  0E01               	movlw	1
  8794  00DFB6  ECEA  F061         	call	_lcdInst
  8795  00DFBA  0E11               	movlw	17
  8796  00DFBC  6E74               	movwf	??_mainMenu& (0+255),c
  8797  00DFBE  0E3A               	movlw	58
  8798  00DFC0                     u6597:
  8799  00DFC0  2EE8               	decfsz	wreg,f,c
  8800  00DFC2  D7FE               	bra	u6597
  8801  00DFC4  2E74               	decfsz	??_mainMenu& (0+255),f,c
  8802  00DFC6  D7FC               	bra	u6597
  8803  00DFC8  D000               	nop2	
  8804  00DFCA  0E90               	movlw	144
  8805  00DFCC  ECEA  F061         	call	_lcdInst
  8806                           
  8807                           ;main.c: 56:     printf("(A)Start");
  8808  00DFD0  0EC3               	movlw	low STR_1
  8809  00DFD2  6E66               	movwf	printf@fmt,c
  8810  00DFD4  0EFF               	movlw	high STR_1
  8811  00DFD6  6E67               	movwf	printf@fmt+1,c
  8812  00DFD8  EC55  F062         	call	_printf	;wreg free
  8813  00DFDC  0ED0               	movlw	208
  8814  00DFDE  ECEA  F061         	call	_lcdInst
  8815                           
  8816                           ;main.c: 58:     printf("(B)Logs (C)Setup");
  8817  00DFE2  0E4A               	movlw	low STR_2
  8818  00DFE4  6E66               	movwf	printf@fmt,c
  8819  00DFE6  0EFE               	movlw	high STR_2
  8820  00DFE8  6E67               	movwf	printf@fmt+1,c
  8821  00DFEA  EC55  F062         	call	_printf	;wreg free
  8822                           
  8823                           ;main.c: 59:     unsigned char time[7];;main.c: 60:  LATCbits.LATC5 = 1;
  8824  00DFEE  8A8B               	bsf	3979,5,c	;volatile
  8825                           
  8826                           ;main.c: 61:     while (!PORTBbits.RB1){
  8827  00DFF0  D094               	goto	l141
  8828  00DFF2                     l5463:
  8829                           
  8830                           ;main.c: 63:         I2C_Master_Start();
  8831  00DFF2  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  8832                           
  8833                           ;main.c: 64:         I2C_Master_Write(0b11010000);
  8834  00DFF6  0E00               	movlw	0
  8835  00DFF8  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  8836  00DFFA  0ED0               	movlw	208
  8837  00DFFC  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  8838  00DFFE  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  8839                           
  8840                           ;main.c: 65:         I2C_Master_Write(0x00);
  8841  00E002  0E00               	movlw	0
  8842  00E004  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  8843  00E006  0E00               	movlw	0
  8844  00E008  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  8845  00E00A  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  8846                           
  8847                           ;main.c: 66:         I2C_Master_Stop();
  8848  00E00E  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  8849                           
  8850                           ;main.c: 69:         I2C_Master_Start();
  8851  00E012  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  8852                           
  8853                           ;main.c: 70:         I2C_Master_Write(0b11010001);
  8854  00E016  0E00               	movlw	0
  8855  00E018  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  8856  00E01A  0ED1               	movlw	209
  8857  00E01C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  8858  00E01E  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  8859                           
  8860                           ;main.c: 71:         for(unsigned char i = 0; i < 6; i++){
  8861  00E022  0E00               	movlw	0
  8862  00E024  6E7D               	movwf	mainMenu@i,c
  8863  00E026                     l5471:
  8864                           
  8865                           ;main.c: 72:             time[i] = I2C_Master_Read(0);
  8866  00E026  0E76               	movlw	low mainMenu@time
  8867  00E028  247D               	addwf	mainMenu@i,w,c
  8868  00E02A  6ED9               	movwf	fsr2l,c
  8869  00E02C  6ADA               	clrf	fsr2h,c
  8870  00E02E  0E00               	movlw	high mainMenu@time
  8871  00E030  22DA               	addwfc	fsr2h,f,c
  8872  00E032  0E00               	movlw	0
  8873  00E034  EC30  F062         	call	_I2C_Master_Read
  8874  00E038  6EDF               	movwf	indf2,c
  8875                           
  8876                           ;main.c: 73:         }
  8877  00E03A  2A7D               	incf	mainMenu@i,f,c
  8878  00E03C  0E05               	movlw	5
  8879  00E03E  647D               	cpfsgt	mainMenu@i,c
  8880  00E040  D7F2               	goto	l5471
  8881                           
  8882                           ;main.c: 74:         time[6] = I2C_Master_Read(1);
  8883  00E042  0E01               	movlw	1
  8884  00E044  EC30  F062         	call	_I2C_Master_Read
  8885  00E048  6E7C               	movwf	mainMenu@time+6,c
  8886                           
  8887                           ;main.c: 75:         I2C_Master_Stop();
  8888  00E04A  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  8889  00E04E  0E80               	movlw	128
  8890  00E050  ECEA  F061         	call	_lcdInst
  8891                           
  8892                           ;main.c: 77:         printf("20%02x-%02x-%02x", time[6],time[5],time[4]);
  8893  00E054  0E5B               	movlw	low STR_3
  8894  00E056  6E66               	movwf	printf@fmt,c
  8895  00E058  0EFE               	movlw	high STR_3
  8896  00E05A  6E67               	movwf	printf@fmt+1,c
  8897  00E05C  C07C  F068         	movff	mainMenu@time+6,?_printf+2
  8898  00E060  6A69               	clrf	?_printf+3,c
  8899  00E062  C07B  F06A         	movff	mainMenu@time+5,?_printf+4
  8900  00E066  6A6B               	clrf	?_printf+5,c
  8901  00E068  C07A  F06C         	movff	mainMenu@time+4,?_printf+6
  8902  00E06C  6A6D               	clrf	?_printf+7,c
  8903  00E06E  EC55  F062         	call	_printf	;wreg free
  8904  00E072  0EC0               	movlw	192
  8905  00E074  ECEA  F061         	call	_lcdInst
  8906                           
  8907                           ;main.c: 79:         printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  8908  00E078  0ED8               	movlw	low STR_4
  8909  00E07A  6E66               	movwf	printf@fmt,c
  8910  00E07C  0EFE               	movlw	high STR_4
  8911  00E07E  6E67               	movwf	printf@fmt+1,c
  8912  00E080  C078  F068         	movff	mainMenu@time+2,?_printf+2
  8913  00E084  6A69               	clrf	?_printf+3,c
  8914  00E086  C077  F06A         	movff	mainMenu@time+1,?_printf+4
  8915  00E08A  6A6B               	clrf	?_printf+5,c
  8916  00E08C  C076  F06C         	movff	mainMenu@time,?_printf+6
  8917  00E090  6A6D               	clrf	?_printf+7,c
  8918  00E092  EC55  F062         	call	_printf	;wreg free
  8919                           
  8920                           ;main.c: 80:   if (PORTAbits.RA1){
  8921  00E096  A280               	btfss	3968,1,c	;volatile
  8922  00E098  D040               	goto	l141
  8923                           
  8924                           ;main.c: 82:             I2C_Master_Start();
  8925  00E09A  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  8926                           
  8927                           ;main.c: 83:             I2C_Master_Write(0b11010000);
  8928  00E09E  0E00               	movlw	0
  8929  00E0A0  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  8930  00E0A2  0ED0               	movlw	208
  8931  00E0A4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  8932  00E0A6  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  8933                           
  8934                           ;main.c: 84:             I2C_Master_Write(0x00);
  8935  00E0AA  0E00               	movlw	0
  8936  00E0AC  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  8937  00E0AE  0E00               	movlw	0
  8938  00E0B0  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  8939  00E0B2  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  8940                           
  8941                           ;main.c: 85:             I2C_Master_Stop();
  8942  00E0B6  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  8943                           
  8944                           ;main.c: 88:             I2C_Master_Start();
  8945  00E0BA  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  8946                           
  8947                           ;main.c: 89:             I2C_Master_Write(0b11010001);
  8948  00E0BE  0E00               	movlw	0
  8949  00E0C0  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  8950  00E0C2  0ED1               	movlw	209
  8951  00E0C4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  8952  00E0C6  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  8953                           
  8954                           ;main.c: 90:             for(unsigned char i = 0; i < 6; i++){
  8955  00E0CA  0E00               	movlw	0
  8956  00E0CC  6E7E               	movwf	mainMenu@i_885,c
  8957  00E0CE                     l5493:
  8958                           
  8959                           ;main.c: 91:                 startTime[i] = I2C_Master_Read(0);
  8960  00E0CE  0E00               	movlw	0
  8961  00E0D0  EC30  F062         	call	_I2C_Master_Read
  8962  00E0D4  6E74               	movwf	??_mainMenu& (0+255),c
  8963  00E0D6  6A75               	clrf	(??_mainMenu+1)& (0+255),c
  8964  00E0D8  507E               	movf	mainMenu@i_885,w,c
  8965  00E0DA  0D02               	mullw	2
  8966  00E0DC  0E0E               	movlw	low _startTime
  8967  00E0DE  24F3               	addwf	prodl,w,c
  8968  00E0E0  6ED9               	movwf	fsr2l,c
  8969  00E0E2  0E01               	movlw	high _startTime
  8970  00E0E4  20F4               	addwfc	prodh,w,c
  8971  00E0E6  6EDA               	movwf	fsr2h,c
  8972  00E0E8  C074  FFDE         	movff	??_mainMenu,postinc2
  8973  00E0EC  C075  FFDD         	movff	??_mainMenu+1,postdec2
  8974                           
  8975                           ;main.c: 92:             }
  8976  00E0F0  2A7E               	incf	mainMenu@i_885,f,c
  8977  00E0F2  0E05               	movlw	5
  8978  00E0F4  647E               	cpfsgt	mainMenu@i_885,c
  8979  00E0F6  D7EB               	goto	l5493
  8980                           
  8981                           ;main.c: 93:             startTime[6] = I2C_Master_Read(1);
  8982  00E0F8  0E01               	movlw	1
  8983  00E0FA  EC30  F062         	call	_I2C_Master_Read
  8984  00E0FE  6E74               	movwf	??_mainMenu& (0+255),c
  8985  00E100  5074               	movf	??_mainMenu,w,c
  8986  00E102  0101               	movlb	1	; () banked
  8987  00E104  6F1A               	movwf	(_startTime+12)& (0+255),b	;volatile
  8988  00E106  6B1B               	clrf	(_startTime+13)& (0+255),b	;volatile
  8989                           
  8990                           ;main.c: 94:             I2C_Master_Stop();
  8991  00E108  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  8992                           
  8993                           ;main.c: 96:    *menu = 1;
  8994  00E10C  C072  FFD9         	movff	mainMenu@menu,fsr2l
  8995  00E110  C073  FFDA         	movff	mainMenu@menu+1,fsr2h
  8996  00E114  0E01               	movlw	1
  8997  00E116  6EDF               	movwf	indf2,c
  8998  00E118  0012               	return	
  8999  00E11A                     l141:
  9000                           
  9001                           ;main.c: 61:     while (!PORTBbits.RB1){
  9002  00E11A  A281               	btfss	3969,1,c	;volatile
  9003  00E11C  D76A               	goto	l5463
  9004                           
  9005                           ;main.c: 100:     keypress = (PORTB & 0xF0) >> 4;
  9006  00E11E  3881               	swapf	3969,w,c	;volatile
  9007  00E120  0B0F               	andlw	15
  9008  00E122  0B0F               	andlw	15
  9009  00E124  0100               	movlb	0	; () banked
  9010  00E126  6FFD               	movwf	_keypress& (0+255),b	;volatile
  9011                           
  9012                           ;main.c: 101:     switch (keypress){
  9013  00E128  D04C               	goto	l5531
  9014  00E12A                     l5507:
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;main.c: 104:             I2C_Master_Start();
  9018  00E12A  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  9019                           
  9020                           ;main.c: 105:             I2C_Master_Write(0b11010000);
  9021  00E12E  0E00               	movlw	0
  9022  00E130  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  9023  00E132  0ED0               	movlw	208
  9024  00E134  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  9025  00E136  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  9026                           
  9027                           ;main.c: 106:             I2C_Master_Write(0x00);
  9028  00E13A  0E00               	movlw	0
  9029  00E13C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  9030  00E13E  0E00               	movlw	0
  9031  00E140  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  9032  00E142  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  9033                           
  9034                           ;main.c: 107:             I2C_Master_Stop();
  9035  00E146  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  9036                           
  9037                           ;main.c: 110:             I2C_Master_Start();
  9038  00E14A  ECDD  F061         	call	_I2C_Master_Start	;wreg free
  9039                           
  9040                           ;main.c: 111:             I2C_Master_Write(0b11010001);
  9041  00E14E  0E00               	movlw	0
  9042  00E150  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  9043  00E152  0ED1               	movlw	209
  9044  00E154  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  9045  00E156  ECE5  F061         	call	_I2C_Master_Write	;wreg free
  9046                           
  9047                           ;main.c: 112:             for(unsigned char i = 0; i < 6; i++){
  9048  00E15A  0E00               	movlw	0
  9049  00E15C  6E7F               	movwf	mainMenu@i_894,c
  9050  00E15E                     l5515:
  9051                           
  9052                           ;main.c: 113:                 startTime[i] = I2C_Master_Read(0);
  9053  00E15E  0E00               	movlw	0
  9054  00E160  EC30  F062         	call	_I2C_Master_Read
  9055  00E164  6E74               	movwf	??_mainMenu& (0+255),c
  9056  00E166  6A75               	clrf	(??_mainMenu+1)& (0+255),c
  9057  00E168  507F               	movf	mainMenu@i_894,w,c
  9058  00E16A  0D02               	mullw	2
  9059  00E16C  0E0E               	movlw	low _startTime
  9060  00E16E  24F3               	addwf	prodl,w,c
  9061  00E170  6ED9               	movwf	fsr2l,c
  9062  00E172  0E01               	movlw	high _startTime
  9063  00E174  20F4               	addwfc	prodh,w,c
  9064  00E176  6EDA               	movwf	fsr2h,c
  9065  00E178  C074  FFDE         	movff	??_mainMenu,postinc2
  9066  00E17C  C075  FFDD         	movff	??_mainMenu+1,postdec2
  9067                           
  9068                           ;main.c: 114:             }
  9069  00E180  2A7F               	incf	mainMenu@i_894,f,c
  9070  00E182  0E05               	movlw	5
  9071  00E184  647F               	cpfsgt	mainMenu@i_894,c
  9072  00E186  D7EB               	goto	l5515
  9073                           
  9074                           ;main.c: 115:             startTime[6] = I2C_Master_Read(1);
  9075  00E188  0E01               	movlw	1
  9076  00E18A  EC30  F062         	call	_I2C_Master_Read
  9077  00E18E  6E74               	movwf	??_mainMenu& (0+255),c
  9078  00E190  5074               	movf	??_mainMenu,w,c
  9079  00E192  0101               	movlb	1	; () banked
  9080  00E194  6F1A               	movwf	(_startTime+12)& (0+255),b	;volatile
  9081  00E196  6B1B               	clrf	(_startTime+13)& (0+255),b	;volatile
  9082                           
  9083                           ;main.c: 116:             I2C_Master_Stop();
  9084  00E198  ECE1  F061         	call	_I2C_Master_Stop	;wreg free
  9085                           
  9086                           ;main.c: 118:             *menu = 1;
  9087  00E19C  C072  FFD9         	movff	mainMenu@menu,fsr2l
  9088  00E1A0  C073  FFDA         	movff	mainMenu@menu+1,fsr2h
  9089  00E1A4  0E01               	movlw	1
  9090  00E1A6  D00B               	goto	L45
  9091  00E1A8                     l5525:
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;main.c: 121:             *menu = 6;
  9095  00E1A8  C072  FFD9         	movff	mainMenu@menu,fsr2l
  9096  00E1AC  C073  FFDA         	movff	mainMenu@menu+1,fsr2h
  9097  00E1B0  0E06               	movlw	6
  9098  00E1B2  D005               	goto	L45
  9099  00E1B4                     l5527:
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;main.c: 124:             *menu = 8;
  9103  00E1B4  C072  FFD9         	movff	mainMenu@menu,fsr2l
  9104  00E1B8  C073  FFDA         	movff	mainMenu@menu+1,fsr2h
  9105  00E1BC  0E08               	movlw	8
  9106  00E1BE                     L45:
  9107  00E1BE  6EDF               	movwf	indf2,c
  9108                           
  9109                           ;main.c: 125:             break;
  9110  00E1C0  D011               	goto	l157
  9111  00E1C2                     l5531:
  9112                           
  9113                           ; BSR set to: 0
  9114  00E1C2  51FD               	movf	_keypress& (0+255),w,b	;volatile
  9115  00E1C4  6E74               	movwf	??_mainMenu& (0+255),c
  9116  00E1C6  6A75               	clrf	(??_mainMenu+1)& (0+255),c
  9117                           
  9118                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9119                           ; Switch size 1, requested type "simple"
  9120                           ; Number of cases is 1, Range of values is 0 to 0
  9121                           ; switch strategies available:
  9122                           ; Name         Instructions Cycles
  9123                           ; simple_byte            4     3 (average)
  9124                           ;	Chosen strategy is simple_byte
  9125  00E1C8  5075               	movf	??_mainMenu+1,w,c
  9126  00E1CA  0A00               	xorlw	0	; case 0
  9127  00E1CC  A4D8               	btfss	status,2,c
  9128  00E1CE  D00A               	goto	l157
  9129                           
  9130                           ; BSR set to: 0
  9131                           ; Switch size 1, requested type "simple"
  9132                           ; Number of cases is 3, Range of values is 3 to 11
  9133                           ; switch strategies available:
  9134                           ; Name         Instructions Cycles
  9135                           ; simple_byte           10     6 (average)
  9136                           ;	Chosen strategy is simple_byte
  9137  00E1D0  5074               	movf	??_mainMenu,w,c
  9138  00E1D2  0A03               	xorlw	3	; case 3
  9139  00E1D4  B4D8               	btfsc	status,2,c
  9140  00E1D6  D7A9               	goto	l5507
  9141  00E1D8  0A04               	xorlw	4	; case 7
  9142  00E1DA  B4D8               	btfsc	status,2,c
  9143  00E1DC  D7E5               	goto	l5525
  9144  00E1DE  0A0C               	xorlw	12	; case 11
  9145  00E1E0  B4D8               	btfsc	status,2,c
  9146  00E1E2  D7E8               	goto	l5527
  9147  00E1E4                     l157:
  9148  00E1E4  A281               	btfss	3969,1,c	;volatile
  9149  00E1E6  0012               	return	
  9150  00E1E8  D7FD               	goto	l157
  9151  00E1EA                     __end_of_mainMenu:
  9152                           	opt callstack 0
  9153                           
  9154 ;; *************** function _printf *****************
  9155 ;; Defined at:
  9156 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  fmt             2  101[COMRAM] PTR const unsigned char 
  9159 ;;		 -> STR_56(14), STR_55(15), STR_54(8), STR_53(13), 
  9160 ;;		 -> STR_52(15), STR_51(3), STR_50(17), STR_49(15), 
  9161 ;;		 -> STR_48(11), STR_47(13), STR_46(12), STR_45(13), 
  9162 ;;		 -> STR_44(16), STR_43(14), STR_42(15), STR_41(8), 
  9163 ;;		 -> STR_40(13), STR_39(15), STR_38(3), STR_37(17), 
  9164 ;;		 -> STR_36(15), STR_35(11), STR_34(13), STR_33(12), 
  9165 ;;		 -> STR_32(13), STR_31(16), STR_30(14), STR_29(16), 
  9166 ;;		 -> STR_28(6), STR_27(14), STR_26(9), STR_25(16), 
  9167 ;;		 -> STR_24(11), STR_23(14), STR_22(17), STR_21(19), 
  9168 ;;		 -> STR_20(19), STR_19(9), STR_18(8), STR_17(10), 
  9169 ;;		 -> STR_16(14), STR_15(14), STR_14(3), STR_13(2), 
  9170 ;;		 -> STR_12(12), STR_11(14), STR_10(13), STR_9(13), 
  9171 ;;		 -> STR_8(15), STR_7(9), STR_6(11), STR_5(20), 
  9172 ;;		 -> STR_4(15), STR_3(17), STR_2(17), STR_1(9), 
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;  ap              2  111[COMRAM] PTR void [1]
  9175 ;;		 -> ?_printf(2), 
  9176 ;;  ret             2    0        int 
  9177 ;; Return value:  Size  Location     Type
  9178 ;;                  2  101[COMRAM] int 
  9179 ;; Registers used:
  9180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9181 ;; Tracked objects:
  9182 ;;		On entry : 0/0
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9186 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9187 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;Total ram usage:       12 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; Hardware stack levels required when called:   10
  9193 ;; This function calls:
  9194 ;;		_vfprintf
  9195 ;; This function is called by:
  9196 ;;		_mainMenu
  9197 ;;		_start
  9198 ;;		_runFinished
  9199 ;;		_runFinishedMenu
  9200 ;;		_runInfoMenu
  9201 ;;		_poleInfo
  9202 ;;		_saveRun
  9203 ;;		_selectLog
  9204 ;;		_options
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text24
  9209  00C4AA                     __ptext24:
  9210                           	opt callstack 0
  9211  00C4AA                     _printf:
  9212                           	opt callstack 19
  9213                           
  9214                           ;incstack = 0
  9215  00C4AA  0E68               	movlw	low (?_printf+2)
  9216  00C4AC  6E70               	movwf	printf@ap,c
  9217  00C4AE  0E00               	movlw	high (?_printf+2)
  9218  00C4B0  6E71               	movwf	printf@ap+1,c
  9219  00C4B2  0E00               	movlw	0
  9220  00C4B4  6E5E               	movwf	vfprintf@fp,c
  9221  00C4B6  0E00               	movlw	0
  9222  00C4B8  6E5F               	movwf	vfprintf@fp+1,c
  9223  00C4BA  C066  F060         	movff	printf@fmt,vfprintf@fmt
  9224  00C4BE  C067  F061         	movff	printf@fmt+1,vfprintf@fmt+1
  9225  00C4C2  0E70               	movlw	low printf@ap
  9226  00C4C4  6E62               	movwf	vfprintf@ap,c
  9227  00C4C6  0E00               	movlw	high printf@ap
  9228  00C4C8  6E63               	movwf	vfprintf@ap+1,c
  9229  00C4CA  ECE5  F063         	call	_vfprintf	;wreg free
  9230  00C4CE  0012               	return		;funcret
  9231  00C4D0                     __end_of_printf:
  9232                           	opt callstack 0
  9233                           
  9234 ;; *************** function _vfprintf *****************
  9235 ;; Defined at:
  9236 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;  fp              2   93[COMRAM] PTR struct _IO_FILE
  9239 ;;		 -> NULL(0), 
  9240 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
  9241 ;;		 -> STR_56(14), STR_55(15), STR_54(8), STR_53(13), 
  9242 ;;		 -> STR_52(15), STR_51(3), STR_50(17), STR_49(15), 
  9243 ;;		 -> STR_48(11), STR_47(13), STR_46(12), STR_45(13), 
  9244 ;;		 -> STR_44(16), STR_43(14), STR_42(15), STR_41(8), 
  9245 ;;		 -> STR_40(13), STR_39(15), STR_38(3), STR_37(17), 
  9246 ;;		 -> STR_36(15), STR_35(11), STR_34(13), STR_33(12), 
  9247 ;;		 -> STR_32(13), STR_31(16), STR_30(14), STR_29(16), 
  9248 ;;		 -> STR_28(6), STR_27(14), STR_26(9), STR_25(16), 
  9249 ;;		 -> STR_24(11), STR_23(14), STR_22(17), STR_21(19), 
  9250 ;;		 -> STR_20(19), STR_19(9), STR_18(8), STR_17(10), 
  9251 ;;		 -> STR_16(14), STR_15(14), STR_14(3), STR_13(2), 
  9252 ;;		 -> STR_12(12), STR_11(14), STR_10(13), STR_9(13), 
  9253 ;;		 -> STR_8(15), STR_7(9), STR_6(11), STR_5(20), 
  9254 ;;		 -> STR_4(15), STR_3(17), STR_2(17), STR_1(9), 
  9255 ;;  ap              2   97[COMRAM] PTR PTR void 
  9256 ;;		 -> printf@ap(2), 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;  cfmt            2   99[COMRAM] PTR unsigned char 
  9259 ;;		 -> STR_56(14), STR_55(15), STR_54(8), STR_53(13), 
  9260 ;;		 -> STR_52(15), STR_51(3), STR_50(17), STR_49(15), 
  9261 ;;		 -> STR_48(11), STR_47(13), STR_46(12), STR_45(13), 
  9262 ;;		 -> STR_44(16), STR_43(14), STR_42(15), STR_41(8), 
  9263 ;;		 -> STR_40(13), STR_39(15), STR_38(3), STR_37(17), 
  9264 ;;		 -> STR_36(15), STR_35(11), STR_34(13), STR_33(12), 
  9265 ;;		 -> STR_32(13), STR_31(16), STR_30(14), STR_29(16), 
  9266 ;;		 -> STR_28(6), STR_27(14), STR_26(9), STR_25(16), 
  9267 ;;		 -> STR_24(11), STR_23(14), STR_22(17), STR_21(19), 
  9268 ;;		 -> STR_20(19), STR_19(9), STR_18(8), STR_17(10), 
  9269 ;;		 -> STR_16(14), STR_15(14), STR_14(3), STR_13(2), 
  9270 ;;		 -> STR_12(12), STR_11(14), STR_10(13), STR_9(13), 
  9271 ;;		 -> STR_8(15), STR_7(9), STR_6(11), STR_5(20), 
  9272 ;;		 -> STR_4(15), STR_3(17), STR_2(17), STR_1(9), 
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  2   93[COMRAM] int 
  9275 ;; Registers used:
  9276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9282 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;Total ram usage:        8 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    9
  9289 ;; This function calls:
  9290 ;;		_vfpfcnvrt
  9291 ;; This function is called by:
  9292 ;;		_printf
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           	psect	text25
  9297  00C7CA                     __ptext25:
  9298                           	opt callstack 0
  9299  00C7CA                     _vfprintf:
  9300                           	opt callstack 19
  9301                           
  9302                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  9303                           
  9304                           ;incstack = 0
  9305  00C7CA  C060  F064         	movff	vfprintf@fmt,vfprintf@cfmt
  9306  00C7CE  C061  F065         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  9307                           
  9308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  9309  00C7D2  0E00               	movlw	0
  9310  00C7D4  0100               	movlb	0	; () banked
  9311  00C7D6  6FF6               	movwf	(_nout+1)& (0+255),b
  9312  00C7D8  0E00               	movlw	0
  9313  00C7DA  6FF5               	movwf	_nout& (0+255),b
  9314                           
  9315                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9316  00C7DC  D013               	goto	l4691
  9317  00C7DE                     l4689:
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  9321  00C7DE  C05E  F047         	movff	vfprintf@fp,vfpfcnvrt@fp
  9322  00C7E2  C05F  F048         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  9323  00C7E6  0E64               	movlw	low vfprintf@cfmt
  9324  00C7E8  6E49               	movwf	vfpfcnvrt@fmt,c
  9325  00C7EA  0E00               	movlw	high vfprintf@cfmt
  9326  00C7EC  6E4A               	movwf	vfpfcnvrt@fmt+1,c
  9327  00C7EE  C062  F04B         	movff	vfprintf@ap,vfpfcnvrt@ap
  9328  00C7F2  C063  F04C         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  9329  00C7F6  EC44  F075         	call	_vfpfcnvrt	;wreg free
  9330  00C7FA  5047               	movf	?_vfpfcnvrt,w,c
  9331  00C7FC  0100               	movlb	0	; () banked
  9332  00C7FE  27F5               	addwf	_nout& (0+255),f,b
  9333  00C800  5048               	movf	?_vfpfcnvrt+1,w,c
  9334  00C802  23F6               	addwfc	(_nout+1)& (0+255),f,b
  9335  00C804                     l4691:
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9339  00C804  C064  FFF6         	movff	vfprintf@cfmt,tblptrl
  9340  00C808  C065  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  9341  00C80C                     	if	0	;tblptru may be non-zero
  9342  00C80C                     	endif
  9343  00C80C                     	if	0	;tblptru may be non-zero
  9344  00C80C                     	endif
  9345  00C80C  0008               	tblrd		*
  9346  00C80E  50F5               	movf	tablat,w,c
  9347  00C810  0900               	iorlw	0
  9348  00C812  A4D8               	btfss	status,2,c
  9349  00C814  D7E4               	goto	l4689
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  9353  00C816  C0F5  F05E         	movff	_nout,?_vfprintf
  9354  00C81A  C0F6  F05F         	movff	_nout+1,?_vfprintf+1
  9355                           
  9356                           ; BSR set to: 0
  9357  00C81E  0012               	return		;funcret
  9358  00C820                     __end_of_vfprintf:
  9359                           	opt callstack 0
  9360                           
  9361 ;; *************** function _vfpfcnvrt *****************
  9362 ;; Defined at:
  9363 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;  fp              2   70[COMRAM] PTR struct _IO_FILE
  9366 ;;		 -> NULL(0), 
  9367 ;;  fmt             2   72[COMRAM] PTR PTR unsigned char 
  9368 ;;		 -> vfprintf@cfmt(2), 
  9369 ;;  ap              2   74[COMRAM] PTR PTR void 
  9370 ;;		 -> printf@ap(2), 
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;  llu             8   85[COMRAM] unsigned long long 
  9373 ;;  ll              8    0        long long 
  9374 ;;  f               4    0        long long 
  9375 ;;  vp              3    0        PTR void 
  9376 ;;  ct              3    0        unsigned char [3]
  9377 ;;  cp              3    0        PTR unsigned char 
  9378 ;;  done            2   80[COMRAM] int 
  9379 ;;  i               2    0        int 
  9380 ;;  c               1   84[COMRAM] unsigned char 
  9381 ;; Return value:  Size  Location     Type
  9382 ;;                  2   70[COMRAM] int 
  9383 ;; Registers used:
  9384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/0
  9387 ;;		On exit  : 0/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9390 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9394 ;;Total ram usage:       23 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    8
  9397 ;; This function calls:
  9398 ;;		_atoi
  9399 ;;		_fputc
  9400 ;;		_isdigit
  9401 ;;		_strncmp
  9402 ;;		_utoa
  9403 ;;		_xtoa
  9404 ;; This function is called by:
  9405 ;;		_vfprintf
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           	psect	text26
  9410  00EA88                     __ptext26:
  9411                           	opt callstack 0
  9412  00EA88                     _vfpfcnvrt:
  9413                           	opt callstack 19
  9414                           
  9415                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;incstack = 0
  9419  00EA88  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9420  00EA8C  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9421  00EA90  CFDE FFF6          	movff	postinc2,tblptrl
  9422  00EA94  CFDD FFF7          	movff	postdec2,tblptrh
  9423  00EA98                     	if	0	;tblptru may be non-zero
  9424  00EA98                     	endif
  9425  00EA98                     	if	0	;tblptru may be non-zero
  9426  00EA98                     	endif
  9427  00EA98  0008               	tblrd		*
  9428  00EA9A  50F5               	movf	tablat,w,c
  9429  00EA9C  0A25               	xorlw	37
  9430  00EA9E  A4D8               	btfss	status,2,c
  9431  00EAA0  D27E               	goto	l4659
  9432                           
  9433                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  9434  00EAA2  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9435  00EAA6  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9436  00EAAA  2ADE               	incf	postinc2,f,c
  9437  00EAAC  0E00               	movlw	0
  9438  00EAAE  22DD               	addwfc	postdec2,f,c
  9439                           
  9440                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  9441  00EAB0  0E00               	movlw	0
  9442  00EAB2  0100               	movlb	0	; () banked
  9443  00EAB4  6FF8               	movwf	(_width+1)& (0+255),b
  9444  00EAB6  0E00               	movlw	0
  9445  00EAB8  6FF7               	movwf	_width& (0+255),b
  9446  00EABA  C0F7  F0FB         	movff	_width,_flags
  9447  00EABE  C0F8  F0FC         	movff	_width+1,_flags+1
  9448                           
  9449                           ; BSR set to: 0
  9450                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  9451  00EAC2  69F9               	setf	_prec& (0+255),b
  9452  00EAC4  69FA               	setf	(_prec+1)& (0+255),b
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  9456  00EAC6  0E00               	movlw	0
  9457  00EAC8  6E52               	movwf	vfpfcnvrt@done+1,c
  9458  00EACA  0E00               	movlw	0
  9459  00EACC  D019               	goto	L46
  9460  00EACE                     l4551:
  9461                           
  9462                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  9463  00EACE  0100               	movlb	0	; () banked
  9464  00EAD0  81FB               	bsf	_flags& (0+255),0,b
  9465  00EAD2                     l4553:
  9466                           
  9467                           ; BSR set to: 0
  9468                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  9469  00EAD2  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9470  00EAD6  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9471  00EADA  2ADE               	incf	postinc2,f,c
  9472  00EADC  0E00               	movlw	0
  9473  00EADE  22DD               	addwfc	postdec2,f,c
  9474                           
  9475                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  9476  00EAE0  D032               	goto	l4577
  9477  00EAE2                     l4555:
  9478                           
  9479                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  9480  00EAE2  0100               	movlb	0	; () banked
  9481  00EAE4  83FB               	bsf	_flags& (0+255),1,b
  9482  00EAE6  D7F5               	goto	l4553
  9483  00EAE8                     l4559:
  9484                           
  9485                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  9486  00EAE8  0100               	movlb	0	; () banked
  9487  00EAEA  85FB               	bsf	_flags& (0+255),2,b
  9488  00EAEC  D7F2               	goto	l4553
  9489  00EAEE                     l4563:
  9490                           
  9491                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  9492  00EAEE  0100               	movlb	0	; () banked
  9493  00EAF0  87FB               	bsf	_flags& (0+255),3,b
  9494  00EAF2  D7EF               	goto	l4553
  9495  00EAF4                     l4567:
  9496                           
  9497                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  9498  00EAF4  0100               	movlb	0	; () banked
  9499  00EAF6  89FB               	bsf	_flags& (0+255),4,b
  9500  00EAF8  D7EC               	goto	l4553
  9501  00EAFA                     l4571:
  9502                           
  9503                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  9504  00EAFA  0E00               	movlw	0
  9505  00EAFC  6E52               	movwf	vfpfcnvrt@done+1,c
  9506  00EAFE  0E01               	movlw	1
  9507  00EB00                     L46:
  9508  00EB00  6E51               	movwf	vfpfcnvrt@done,c
  9509                           
  9510                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  9511  00EB02  D021               	goto	l4577
  9512  00EB04                     l4575:
  9513  00EB04  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9514  00EB08  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9515  00EB0C  CFDE FFF6          	movff	postinc2,tblptrl
  9516  00EB10  CFDD FFF7          	movff	postdec2,tblptrh
  9517  00EB14                     	if	0	;tblptru may be non-zero
  9518  00EB14                     	endif
  9519  00EB14                     	if	0	;tblptru may be non-zero
  9520  00EB14                     	endif
  9521  00EB14  0008               	tblrd		*
  9522  00EB16  50F5               	movf	tablat,w,c
  9523  00EB18  6E4D               	movwf	??_vfpfcnvrt& (0+255),c
  9524  00EB1A  6A4E               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  9525                           
  9526                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9527                           ; Switch size 1, requested type "simple"
  9528                           ; Number of cases is 1, Range of values is 0 to 0
  9529                           ; switch strategies available:
  9530                           ; Name         Instructions Cycles
  9531                           ; simple_byte            4     3 (average)
  9532                           ;	Chosen strategy is simple_byte
  9533  00EB1C  504E               	movf	??_vfpfcnvrt+1,w,c
  9534  00EB1E  0A00               	xorlw	0	; case 0
  9535  00EB20  A4D8               	btfss	status,2,c
  9536  00EB22  D7EB               	goto	l4571
  9537                           
  9538                           ; Switch size 1, requested type "simple"
  9539                           ; Number of cases is 5, Range of values is 32 to 48
  9540                           ; switch strategies available:
  9541                           ; Name         Instructions Cycles
  9542                           ; simple_byte           16     9 (average)
  9543                           ;	Chosen strategy is simple_byte
  9544  00EB24  504D               	movf	??_vfpfcnvrt,w,c
  9545  00EB26  0A20               	xorlw	32	; case 32
  9546  00EB28  B4D8               	btfsc	status,2,c
  9547  00EB2A  D7E1               	goto	l4563
  9548  00EB2C  0A03               	xorlw	3	; case 35
  9549  00EB2E  B4D8               	btfsc	status,2,c
  9550  00EB30  D7E1               	goto	l4567
  9551  00EB32  0A08               	xorlw	8	; case 43
  9552  00EB34  B4D8               	btfsc	status,2,c
  9553  00EB36  D7D8               	goto	l4559
  9554  00EB38  0A06               	xorlw	6	; case 45
  9555  00EB3A  B4D8               	btfsc	status,2,c
  9556  00EB3C  D7C8               	goto	l4551
  9557  00EB3E  0A1D               	xorlw	29	; case 48
  9558  00EB40  B4D8               	btfsc	status,2,c
  9559  00EB42  D7CF               	goto	l4555
  9560  00EB44  D7DA               	goto	l4571
  9561  00EB46                     l4577:
  9562                           
  9563                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  9564  00EB46  5051               	movf	vfpfcnvrt@done,w,c
  9565  00EB48  1052               	iorwf	vfpfcnvrt@done+1,w,c
  9566  00EB4A  B4D8               	btfsc	status,2,c
  9567  00EB4C  D7DB               	goto	l4575
  9568                           
  9569                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  9570  00EB4E  0100               	movlb	0	; () banked
  9571  00EB50  B1FB               	btfsc	_flags& (0+255),0,b
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  9575  00EB52  93FB               	bcf	_flags& (0+255),1,b
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  9579  00EB54  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9580  00EB58  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9581  00EB5C  CFDE FFF6          	movff	postinc2,tblptrl
  9582  00EB60  CFDD FFF7          	movff	postdec2,tblptrh
  9583  00EB64                     	if	0	;tblptru may be non-zero
  9584  00EB64                     	endif
  9585  00EB64                     	if	0	;tblptru may be non-zero
  9586  00EB64                     	endif
  9587  00EB64  0008               	tblrd		*
  9588  00EB66  50F5               	movf	tablat,w,c
  9589  00EB68  0A2A               	xorlw	42
  9590  00EB6A  A4D8               	btfss	status,2,c
  9591  00EB6C  D023               	goto	l4589
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  9595  00EB6E  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9596  00EB72  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9597  00EB76  2ADE               	incf	postinc2,f,c
  9598  00EB78  0E00               	movlw	0
  9599  00EB7A  22DD               	addwfc	postdec2,f,c
  9600                           
  9601                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  9602  00EB7C  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9603  00EB80  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9604  00EB84  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9605  00EB88  0E02               	movlw	2
  9606  00EB8A  26DE               	addwf	postinc2,f,c
  9607  00EB8C  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9608  00EB90  0E00               	movlw	0
  9609  00EB92  22DD               	addwfc	postdec2,f,c
  9610  00EB94  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9611  00EB98  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9612  00EB9C  CFDE F0F7          	movff	postinc2,_width
  9613  00EBA0  CFDD F0F8          	movff	postdec2,_width+1
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  9617  00EBA4  AFF8               	btfss	(_width+1)& (0+255),7,b
  9618  00EBA6  D03F               	goto	u3840
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  9622  00EBA8  81FB               	bsf	_flags& (0+255),0,b
  9623                           
  9624                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  9625  00EBAA  6DF7               	negf	_width& (0+255),b
  9626  00EBAC  1FF8               	comf	(_width+1)& (0+255),f,b
  9627  00EBAE  B0D8               	btfsc	status,0,c
  9628  00EBB0  2BF8               	incf	(_width+1)& (0+255),f,b
  9629  00EBB2  D039               	goto	u3840
  9630  00EBB4                     l4589:
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  9634  00EBB4  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9635  00EBB8  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9636  00EBBC  CFDE F011          	movff	postinc2,atoi@s
  9637  00EBC0  CFDD F012          	movff	postdec2,atoi@s+1
  9638  00EBC4  EC6B  F068         	call	_atoi	;wreg free
  9639  00EBC8  C011  F0F7         	movff	?_atoi,_width
  9640  00EBCC  C012  F0F8         	movff	?_atoi+1,_width+1
  9641                           
  9642                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  9643  00EBD0  D007               	goto	l4593
  9644  00EBD2                     l4591:
  9645                           
  9646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  9647  00EBD2  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9648  00EBD6  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9649  00EBDA  2ADE               	incf	postinc2,f,c
  9650  00EBDC  0E00               	movlw	0
  9651  00EBDE  22DD               	addwfc	postdec2,f,c
  9652  00EBE0                     l4593:
  9653  00EBE0  0ED0               	movlw	208
  9654  00EBE2  6E4D               	movwf	??_vfpfcnvrt& (0+255),c
  9655  00EBE4  0EFF               	movlw	255
  9656  00EBE6  6E4E               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  9657  00EBE8  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9658  00EBEC  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9659  00EBF0  CFDE FFF6          	movff	postinc2,tblptrl
  9660  00EBF4  CFDD FFF7          	movff	postdec2,tblptrh
  9661  00EBF8                     	if	0	;tblptru may be non-zero
  9662  00EBF8                     	endif
  9663  00EBF8                     	if	0	;tblptru may be non-zero
  9664  00EBF8                     	endif
  9665  00EBF8  0008               	tblrd		*
  9666  00EBFA  50F5               	movf	tablat,w,c
  9667  00EBFC  6E4F               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  9668  00EBFE  6A50               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  9669  00EC00  504D               	movf	??_vfpfcnvrt,w,c
  9670  00EC02  264F               	addwf	??_vfpfcnvrt+2,f,c
  9671  00EC04  504E               	movf	??_vfpfcnvrt+1,w,c
  9672  00EC06  2250               	addwfc	??_vfpfcnvrt+3,f,c
  9673  00EC08  5050               	movf	??_vfpfcnvrt+3,w,c
  9674  00EC0A  E106               	bnz	u3820
  9675  00EC0C  0E0A               	movlw	10
  9676  00EC0E  5C4F               	subwf	??_vfpfcnvrt+2,w,c
  9677  00EC10  B0D8               	btfsc	status,0,c
  9678  00EC12  D002               	goto	u3820
  9679  00EC14  0E01               	movlw	1
  9680  00EC16  D001               	goto	u3830
  9681  00EC18                     u3820:
  9682  00EC18  0E00               	movlw	0
  9683  00EC1A                     u3830:
  9684  00EC1A  6E53               	movwf	_vfpfcnvrt$1331,c
  9685  00EC1C  6A54               	clrf	_vfpfcnvrt$1331+1,c
  9686  00EC1E  5053               	movf	_vfpfcnvrt$1331,w,c
  9687  00EC20  1054               	iorwf	_vfpfcnvrt$1331+1,w,c
  9688  00EC22  A4D8               	btfss	status,2,c
  9689  00EC24  D7D6               	goto	l4591
  9690  00EC26                     u3840:
  9691                           
  9692                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1172:      
      +                             if (!strncmp(*fmt, "hu", ((sizeof("hu")/sizeof("hu"[0]))-1))) {
  9693  00EC26  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9694  00EC2A  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9695  00EC2E  CFDE F001          	movff	postinc2,strncmp@_l
  9696  00EC32  CFDD F002          	movff	postdec2,strncmp@_l+1
  9697  00EC36  0EF6               	movlw	low STR_57
  9698  00EC38  6E03               	movwf	strncmp@_r,c
  9699  00EC3A  0EFF               	movlw	high STR_57
  9700  00EC3C  6E04               	movwf	strncmp@_r+1,c
  9701  00EC3E  0E00               	movlw	0
  9702  00EC40  6E06               	movwf	strncmp@n+1,c
  9703  00EC42  0E02               	movlw	2
  9704  00EC44  6E05               	movwf	strncmp@n,c
  9705  00EC46  ECB1  F065         	call	_strncmp	;wreg free
  9706  00EC4A  5001               	movf	?_strncmp,w,c
  9707  00EC4C  1002               	iorwf	?_strncmp+1,w,c
  9708  00EC4E  A4D8               	btfss	status,2,c
  9709  00EC50  D041               	goto	l4607
  9710                           
  9711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1174:      
      +                                 *fmt += ((sizeof("hu")/sizeof("hu"[0]))-1);
  9712  00EC52  0E02               	movlw	2
  9713  00EC54  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9714  00EC58  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9715  00EC5C  26DE               	addwf	postinc2,f,c
  9716  00EC5E  0E00               	movlw	0
  9717  00EC60  22DD               	addwfc	postdec2,f,c
  9718                           
  9719                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1175:      
      +                                 llu = (unsigned long long)(unsigned short)(*(int *)__va_arg(*(int **)ap, (int)0))
      +                          ;
  9720  00EC62  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9721  00EC66  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9722  00EC6A  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9723  00EC6E  0E02               	movlw	2
  9724  00EC70  26DE               	addwf	postinc2,f,c
  9725  00EC72  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9726  00EC76  0E00               	movlw	0
  9727  00EC78  22DD               	addwfc	postdec2,f,c
  9728  00EC7A  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9729  00EC7E  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9730  00EC82  CFDE F04F          	movff	postinc2,??_vfpfcnvrt+2
  9731  00EC86  CFDD F050          	movff	postdec2,??_vfpfcnvrt+3
  9732  00EC8A  C04F  F056         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  9733  00EC8E  C050  F057         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  9734  00EC92  6A58               	clrf	vfpfcnvrt@llu+2,c
  9735  00EC94  6A59               	clrf	vfpfcnvrt@llu+3,c
  9736  00EC96  6A5A               	clrf	vfpfcnvrt@llu+4,c
  9737  00EC98  6A5B               	clrf	vfpfcnvrt@llu+5,c
  9738  00EC9A  6A5C               	clrf	vfpfcnvrt@llu+6,c
  9739  00EC9C  6A5D               	clrf	vfpfcnvrt@llu+7,c
  9740                           
  9741                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1177:      
      +                                 return utoa(fp, llu);
  9742  00EC9E  C047  F020         	movff	vfpfcnvrt@fp,utoa@fp
  9743  00ECA2  C048  F021         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  9744  00ECA6  C056  F022         	movff	vfpfcnvrt@llu,utoa@d
  9745  00ECAA  C057  F023         	movff	vfpfcnvrt@llu+1,utoa@d+1
  9746  00ECAE  C058  F024         	movff	vfpfcnvrt@llu+2,utoa@d+2
  9747  00ECB2  C059  F025         	movff	vfpfcnvrt@llu+3,utoa@d+3
  9748  00ECB6  C05A  F026         	movff	vfpfcnvrt@llu+4,utoa@d+4
  9749  00ECBA  C05B  F027         	movff	vfpfcnvrt@llu+5,utoa@d+5
  9750  00ECBE  C05C  F028         	movff	vfpfcnvrt@llu+6,utoa@d+6
  9751  00ECC2  C05D  F029         	movff	vfpfcnvrt@llu+7,utoa@d+7
  9752  00ECC6  ECD1  F06C         	call	_utoa	;wreg free
  9753  00ECCA  C020  F047         	movff	?_utoa,?_vfpfcnvrt
  9754  00ECCE  C021  F048         	movff	?_utoa+1,?_vfpfcnvrt+1
  9755  00ECD2  0012               	return	
  9756  00ECD4                     l4607:
  9757                           
  9758                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  9759  00ECD4  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9760  00ECD8  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9761  00ECDC  CFDE FFF6          	movff	postinc2,tblptrl
  9762  00ECE0  CFDD FFF7          	movff	postdec2,tblptrh
  9763  00ECE4                     	if	0	;tblptru may be non-zero
  9764  00ECE4                     	endif
  9765  00ECE4                     	if	0	;tblptru may be non-zero
  9766  00ECE4                     	endif
  9767  00ECE4  0008               	tblrd		*
  9768  00ECE6  50F5               	movf	tablat,w,c
  9769  00ECE8  0A75               	xorlw	117
  9770  00ECEA  A4D8               	btfss	status,2,c
  9771  00ECEC  D040               	goto	l4615
  9772                           
  9773                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  9774  00ECEE  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9775  00ECF2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9776  00ECF6  2ADE               	incf	postinc2,f,c
  9777  00ECF8  0E00               	movlw	0
  9778  00ECFA  22DD               	addwfc	postdec2,f,c
  9779                           
  9780                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  9781  00ECFC  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9782  00ED00  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9783  00ED04  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9784  00ED08  0E02               	movlw	2
  9785  00ED0A  26DE               	addwf	postinc2,f,c
  9786  00ED0C  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9787  00ED10  0E00               	movlw	0
  9788  00ED12  22DD               	addwfc	postdec2,f,c
  9789  00ED14  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9790  00ED18  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9791  00ED1C  CFDE F04F          	movff	postinc2,??_vfpfcnvrt+2
  9792  00ED20  CFDD F050          	movff	postdec2,??_vfpfcnvrt+3
  9793  00ED24  C04F  F056         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  9794  00ED28  C050  F057         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  9795  00ED2C  6A58               	clrf	vfpfcnvrt@llu+2,c
  9796  00ED2E  6A59               	clrf	vfpfcnvrt@llu+3,c
  9797  00ED30  6A5A               	clrf	vfpfcnvrt@llu+4,c
  9798  00ED32  6A5B               	clrf	vfpfcnvrt@llu+5,c
  9799  00ED34  6A5C               	clrf	vfpfcnvrt@llu+6,c
  9800  00ED36  6A5D               	clrf	vfpfcnvrt@llu+7,c
  9801                           
  9802                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  9803  00ED38  C047  F020         	movff	vfpfcnvrt@fp,utoa@fp
  9804  00ED3C  C048  F021         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  9805  00ED40  C056  F022         	movff	vfpfcnvrt@llu,utoa@d
  9806  00ED44  C057  F023         	movff	vfpfcnvrt@llu+1,utoa@d+1
  9807  00ED48  C058  F024         	movff	vfpfcnvrt@llu+2,utoa@d+2
  9808  00ED4C  C059  F025         	movff	vfpfcnvrt@llu+3,utoa@d+3
  9809  00ED50  C05A  F026         	movff	vfpfcnvrt@llu+4,utoa@d+4
  9810  00ED54  C05B  F027         	movff	vfpfcnvrt@llu+5,utoa@d+5
  9811  00ED58  C05C  F028         	movff	vfpfcnvrt@llu+6,utoa@d+6
  9812  00ED5C  C05D  F029         	movff	vfpfcnvrt@llu+7,utoa@d+7
  9813  00ED60  ECD1  F06C         	call	_utoa	;wreg free
  9814  00ED64  C020  F047         	movff	?_utoa,?_vfpfcnvrt
  9815  00ED68  C021  F048         	movff	?_utoa+1,?_vfpfcnvrt+1
  9816  00ED6C  0012               	return	
  9817  00ED6E                     l4615:
  9818                           
  9819                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1262:      
      +                             if (!strncmp(*fmt, "hx", ((sizeof("hx")/sizeof("hx"[0]))-1)) || !strncmp(*fmt, "hX", 
      +                          ((sizeof("hX")/sizeof("hX"[0]))-1))) {
  9820  00ED6E  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9821  00ED72  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9822  00ED76  CFDE F001          	movff	postinc2,strncmp@_l
  9823  00ED7A  CFDD F002          	movff	postdec2,strncmp@_l+1
  9824  00ED7E  0EF9               	movlw	low STR_62
  9825  00ED80  6E03               	movwf	strncmp@_r,c
  9826  00ED82  0EFF               	movlw	high STR_62
  9827  00ED84  6E04               	movwf	strncmp@_r+1,c
  9828  00ED86  0E00               	movlw	0
  9829  00ED88  6E06               	movwf	strncmp@n+1,c
  9830  00ED8A  0E02               	movlw	2
  9831  00ED8C  6E05               	movwf	strncmp@n,c
  9832  00ED8E  ECB1  F065         	call	_strncmp	;wreg free
  9833  00ED92  5001               	movf	?_strncmp,w,c
  9834  00ED94  1002               	iorwf	?_strncmp+1,w,c
  9835  00ED96  B4D8               	btfsc	status,2,c
  9836  00ED98  D016               	goto	u3880
  9837  00ED9A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9838  00ED9E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9839  00EDA2  CFDE F001          	movff	postinc2,strncmp@_l
  9840  00EDA6  CFDD F002          	movff	postdec2,strncmp@_l+1
  9841  00EDAA  0EF3               	movlw	low STR_66
  9842  00EDAC  6E03               	movwf	strncmp@_r,c
  9843  00EDAE  0EFF               	movlw	high STR_66
  9844  00EDB0  6E04               	movwf	strncmp@_r+1,c
  9845  00EDB2  0E00               	movlw	0
  9846  00EDB4  6E06               	movwf	strncmp@n+1,c
  9847  00EDB6  0E02               	movlw	2
  9848  00EDB8  6E05               	movwf	strncmp@n,c
  9849  00EDBA  ECB1  F065         	call	_strncmp	;wreg free
  9850  00EDBE  5001               	movf	?_strncmp,w,c
  9851  00EDC0  1002               	iorwf	?_strncmp+1,w,c
  9852  00EDC2  A4D8               	btfss	status,2,c
  9853  00EDC4  D056               	goto	l4629
  9854  00EDC6                     u3880:
  9855                           
  9856                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1263: ;C:\P
      +                          rogram Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1265:           
      +                            c = (*fmt)[1];
  9857  00EDC6  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9858  00EDCA  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9859  00EDCE  CFDE F04D          	movff	postinc2,??_vfpfcnvrt
  9860  00EDD2  CFDD F04E          	movff	postdec2,??_vfpfcnvrt+1
  9861  00EDD6  0E01               	movlw	1
  9862  00EDD8  264D               	addwf	??_vfpfcnvrt,f,c
  9863  00EDDA  0E00               	movlw	0
  9864  00EDDC  224E               	addwfc	??_vfpfcnvrt+1,f,c
  9865  00EDDE  C04D  FFF6         	movff	??_vfpfcnvrt,tblptrl
  9866  00EDE2  C04E  FFF7         	movff	??_vfpfcnvrt+1,tblptrh
  9867  00EDE6                     	if	0	;tblptru may be non-zero
  9868  00EDE6                     	endif
  9869  00EDE6                     	if	0	;tblptru may be non-zero
  9870  00EDE6                     	endif
  9871  00EDE6  0008               	tblrd		*
  9872  00EDE8  CFF5 F055          	movff	tablat,vfpfcnvrt@c
  9873                           
  9874                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1266:      
      +                                 *fmt += ((sizeof("hx")/sizeof("hx"[0]))-1);
  9875  00EDEC  0E02               	movlw	2
  9876  00EDEE  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9877  00EDF2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9878  00EDF6  26DE               	addwf	postinc2,f,c
  9879  00EDF8  0E00               	movlw	0
  9880  00EDFA  22DD               	addwfc	postdec2,f,c
  9881                           
  9882                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1267:      
      +                                 llu = (unsigned long long)(unsigned short)(*(int *)__va_arg(*(int **)ap, (int)0))
      +                          ;
  9883  00EDFC  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9884  00EE00  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9885  00EE04  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9886  00EE08  0E02               	movlw	2
  9887  00EE0A  26DE               	addwf	postinc2,f,c
  9888  00EE0C  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9889  00EE10  0E00               	movlw	0
  9890  00EE12  22DD               	addwfc	postdec2,f,c
  9891  00EE14  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9892  00EE18  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9893  00EE1C  CFDE F04F          	movff	postinc2,??_vfpfcnvrt+2
  9894  00EE20  CFDD F050          	movff	postdec2,??_vfpfcnvrt+3
  9895  00EE24  C04F  F056         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  9896  00EE28  C050  F057         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  9897  00EE2C  6A58               	clrf	vfpfcnvrt@llu+2,c
  9898  00EE2E  6A59               	clrf	vfpfcnvrt@llu+3,c
  9899  00EE30  6A5A               	clrf	vfpfcnvrt@llu+4,c
  9900  00EE32  6A5B               	clrf	vfpfcnvrt@llu+5,c
  9901  00EE34  6A5C               	clrf	vfpfcnvrt@llu+6,c
  9902  00EE36  6A5D               	clrf	vfpfcnvrt@llu+7,c
  9903                           
  9904                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1269:      
      +                                 return xtoa(fp, llu, c);
  9905  00EE38  C047  F020         	movff	vfpfcnvrt@fp,xtoa@fp
  9906  00EE3C  C048  F021         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
  9907  00EE40  C056  F022         	movff	vfpfcnvrt@llu,xtoa@d
  9908  00EE44  C057  F023         	movff	vfpfcnvrt@llu+1,xtoa@d+1
  9909  00EE48  C058  F024         	movff	vfpfcnvrt@llu+2,xtoa@d+2
  9910  00EE4C  C059  F025         	movff	vfpfcnvrt@llu+3,xtoa@d+3
  9911  00EE50  C05A  F026         	movff	vfpfcnvrt@llu+4,xtoa@d+4
  9912  00EE54  C05B  F027         	movff	vfpfcnvrt@llu+5,xtoa@d+5
  9913  00EE58  C05C  F028         	movff	vfpfcnvrt@llu+6,xtoa@d+6
  9914  00EE5C  C05D  F029         	movff	vfpfcnvrt@llu+7,xtoa@d+7
  9915  00EE60  C055  F02A         	movff	vfpfcnvrt@c,xtoa@x
  9916  00EE64  ECC1  F06E         	call	_xtoa	;wreg free
  9917  00EE68  C020  F047         	movff	?_xtoa,?_vfpfcnvrt
  9918  00EE6C  C021  F048         	movff	?_xtoa+1,?_vfpfcnvrt+1
  9919  00EE70  0012               	return	
  9920  00EE72                     l4629:
  9921                           
  9922                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1274:      
      +                             if ((*fmt[0] == 'x') || (*fmt[0] == 'X')) {
  9923  00EE72  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9924  00EE76  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9925  00EE7A  CFDE FFF6          	movff	postinc2,tblptrl
  9926  00EE7E  CFDD FFF7          	movff	postdec2,tblptrh
  9927  00EE82                     	if	0	;tblptru may be non-zero
  9928  00EE82                     	endif
  9929  00EE82                     	if	0	;tblptru may be non-zero
  9930  00EE82                     	endif
  9931  00EE82  0008               	tblrd		*
  9932  00EE84  50F5               	movf	tablat,w,c
  9933  00EE86  0A78               	xorlw	120
  9934  00EE88  B4D8               	btfsc	status,2,c
  9935  00EE8A  D00D               	goto	u3900
  9936  00EE8C  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9937  00EE90  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9938  00EE94  CFDE FFF6          	movff	postinc2,tblptrl
  9939  00EE98  CFDD FFF7          	movff	postdec2,tblptrh
  9940  00EE9C                     	if	0	;tblptru may be non-zero
  9941  00EE9C                     	endif
  9942  00EE9C                     	if	0	;tblptru may be non-zero
  9943  00EE9C                     	endif
  9944  00EE9C  0008               	tblrd		*
  9945  00EE9E  50F5               	movf	tablat,w,c
  9946  00EEA0  0A58               	xorlw	88
  9947  00EEA2  A4D8               	btfss	status,2,c
  9948  00EEA4  D04D               	goto	l4643
  9949  00EEA6                     u3900:
  9950                           
  9951                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1276:      
      +                                 c = (*fmt)[0];
  9952  00EEA6  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9953  00EEAA  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9954  00EEAE  CFDE FFF6          	movff	postinc2,tblptrl
  9955  00EEB2  CFDD FFF7          	movff	postdec2,tblptrh
  9956  00EEB6                     	if	0	;tblptru may be non-zero
  9957  00EEB6                     	endif
  9958  00EEB6                     	if	0	;tblptru may be non-zero
  9959  00EEB6                     	endif
  9960  00EEB6  0008               	tblrd		*
  9961  00EEB8  CFF5 F055          	movff	tablat,vfpfcnvrt@c
  9962                           
  9963                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1277:      
      +                                 ++*fmt;
  9964  00EEBC  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  9965  00EEC0  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  9966  00EEC4  2ADE               	incf	postinc2,f,c
  9967  00EEC6  0E00               	movlw	0
  9968  00EEC8  22DD               	addwfc	postdec2,f,c
  9969                           
  9970                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1278:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  9971  00EECA  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  9972  00EECE  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  9973  00EED2  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  9974  00EED6  0E02               	movlw	2
  9975  00EED8  26DE               	addwf	postinc2,f,c
  9976  00EEDA  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  9977  00EEDE  0E00               	movlw	0
  9978  00EEE0  22DD               	addwfc	postdec2,f,c
  9979  00EEE2  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  9980  00EEE6  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  9981  00EEEA  CFDE F04F          	movff	postinc2,??_vfpfcnvrt+2
  9982  00EEEE  CFDD F050          	movff	postdec2,??_vfpfcnvrt+3
  9983  00EEF2  C04F  F056         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  9984  00EEF6  C050  F057         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  9985  00EEFA  6A58               	clrf	vfpfcnvrt@llu+2,c
  9986  00EEFC  6A59               	clrf	vfpfcnvrt@llu+3,c
  9987  00EEFE  6A5A               	clrf	vfpfcnvrt@llu+4,c
  9988  00EF00  6A5B               	clrf	vfpfcnvrt@llu+5,c
  9989  00EF02  6A5C               	clrf	vfpfcnvrt@llu+6,c
  9990  00EF04  6A5D               	clrf	vfpfcnvrt@llu+7,c
  9991                           
  9992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1280:      
      +                                 return xtoa(fp, llu, c);
  9993  00EF06  C047  F020         	movff	vfpfcnvrt@fp,xtoa@fp
  9994  00EF0A  C048  F021         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
  9995  00EF0E  C056  F022         	movff	vfpfcnvrt@llu,xtoa@d
  9996  00EF12  C057  F023         	movff	vfpfcnvrt@llu+1,xtoa@d+1
  9997  00EF16  C058  F024         	movff	vfpfcnvrt@llu+2,xtoa@d+2
  9998  00EF1A  C059  F025         	movff	vfpfcnvrt@llu+3,xtoa@d+3
  9999  00EF1E  C05A  F026         	movff	vfpfcnvrt@llu+4,xtoa@d+4
 10000  00EF22  C05B  F027         	movff	vfpfcnvrt@llu+5,xtoa@d+5
 10001  00EF26  C05C  F028         	movff	vfpfcnvrt@llu+6,xtoa@d+6
 10002  00EF2A  C05D  F029         	movff	vfpfcnvrt@llu+7,xtoa@d+7
 10003  00EF2E  C055  F02A         	movff	vfpfcnvrt@c,xtoa@x
 10004  00EF32  ECC1  F06E         	call	_xtoa	;wreg free
 10005  00EF36  C020  F047         	movff	?_xtoa,?_vfpfcnvrt
 10006  00EF3A  C021  F048         	movff	?_xtoa+1,?_vfpfcnvrt+1
 10007  00EF3E  0012               	return	
 10008  00EF40                     l4643:
 10009                           
 10010                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 10011  00EF40  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10012  00EF44  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10013  00EF48  CFDE FFF6          	movff	postinc2,tblptrl
 10014  00EF4C  CFDD FFF7          	movff	postdec2,tblptrh
 10015  00EF50                     	if	0	;tblptru may be non-zero
 10016  00EF50                     	endif
 10017  00EF50                     	if	0	;tblptru may be non-zero
 10018  00EF50                     	endif
 10019  00EF50  0008               	tblrd		*
 10020  00EF52  50F5               	movf	tablat,w,c
 10021  00EF54  0A25               	xorlw	37
 10022  00EF56  A4D8               	btfss	status,2,c
 10023  00EF58  D016               	goto	l4653
 10024                           
 10025                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 10026  00EF5A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10027  00EF5E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10028  00EF62  2ADE               	incf	postinc2,f,c
 10029  00EF64  0E00               	movlw	0
 10030  00EF66  22DD               	addwfc	postdec2,f,c
 10031                           
 10032                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 10033  00EF68  0E00               	movlw	0
 10034  00EF6A  6E06               	movwf	fputc@c+1,c
 10035  00EF6C  0E25               	movlw	37
 10036  00EF6E  6E05               	movwf	fputc@c,c
 10037  00EF70  C047  F007         	movff	vfpfcnvrt@fp,fputc@fp
 10038  00EF74  C048  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 10039  00EF78  EC73  F064         	call	_fputc	;wreg free
 10040  00EF7C                     l4649:
 10041                           
 10042                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 10043  00EF7C  0E00               	movlw	0
 10044  00EF7E  6E48               	movwf	?_vfpfcnvrt+1,c
 10045  00EF80  0E01               	movlw	1
 10046  00EF82  6E47               	movwf	?_vfpfcnvrt,c
 10047  00EF84  0012               	return	
 10048  00EF86                     l4653:
 10049                           
 10050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 10051  00EF86  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10052  00EF8A  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10053  00EF8E  2ADE               	incf	postinc2,f,c
 10054  00EF90  0E00               	movlw	0
 10055  00EF92  22DD               	addwfc	postdec2,f,c
 10056                           
 10057                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 10058  00EF94  0E00               	movlw	0
 10059  00EF96  6E48               	movwf	?_vfpfcnvrt+1,c
 10060  00EF98  0E00               	movlw	0
 10061  00EF9A  6E47               	movwf	?_vfpfcnvrt,c
 10062  00EF9C  0012               	return	
 10063  00EF9E                     l4659:
 10064                           
 10065                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 10066  00EF9E  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10067  00EFA2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10068  00EFA6  CFDE FFF6          	movff	postinc2,tblptrl
 10069  00EFAA  CFDD FFF7          	movff	postdec2,tblptrh
 10070  00EFAE                     	if	0	;tblptru may be non-zero
 10071  00EFAE                     	endif
 10072  00EFAE                     	if	0	;tblptru may be non-zero
 10073  00EFAE                     	endif
 10074  00EFAE  0008               	tblrd		*
 10075  00EFB0  50F5               	movf	tablat,w,c
 10076  00EFB2  6E05               	movwf	fputc@c,c
 10077  00EFB4  6A06               	clrf	fputc@c+1,c
 10078  00EFB6  C047  F007         	movff	vfpfcnvrt@fp,fputc@fp
 10079  00EFBA  C048  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 10080  00EFBE  EC73  F064         	call	_fputc	;wreg free
 10081                           
 10082                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 10083  00EFC2  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 10084  00EFC6  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 10085  00EFCA  2ADE               	incf	postinc2,f,c
 10086  00EFCC  0E00               	movlw	0
 10087  00EFCE  22DD               	addwfc	postdec2,f,c
 10088  00EFD0  D7D5               	goto	l4649
 10089  00EFD2                     __end_of_vfpfcnvrt:
 10090                           	opt callstack 0
 10091                           
 10092 ;; *************** function _xtoa *****************
 10093 ;; Defined at:
 10094 ;;		line 623 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
 10097 ;;		 -> NULL(0), 
 10098 ;;  d               8   33[COMRAM] unsigned long long 
 10099 ;;  x               1   41[COMRAM] unsigned char 
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;  n               8   58[COMRAM] unsigned long long 
 10102 ;;  c               2   68[COMRAM] int 
 10103 ;;  i               2   66[COMRAM] int 
 10104 ;;  w               2   56[COMRAM] int 
 10105 ;;  p               2   54[COMRAM] int 
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  2   31[COMRAM] int 
 10108 ;; Registers used:
 10109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10115 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10117 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10118 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10119 ;;Total ram usage:       39 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    7
 10122 ;; This function calls:
 10123 ;;		_isalpha
 10124 ;;		_isupper
 10125 ;;		_pad
 10126 ;;		_toupper
 10127 ;; This function is called by:
 10128 ;;		_vfpfcnvrt
 10129 ;; This function uses a non-reentrant model
 10130 ;;
 10131                           
 10132                           	psect	text27
 10133  00DD82                     __ptext27:
 10134                           	opt callstack 0
 10135  00DD82                     _xtoa:
 10136                           	opt callstack 19
 10137                           
 10138                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 623: static
      +                           int xtoa(FILE *fp, unsigned long long d, char x);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 624: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 625:     int c, i, p, w;;C:\Program Files (x86)\Microch
      +                          ip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 626:     unsigned long long n;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 629:     if (!(prec < 0
      +                          )) {
 10139                           
 10140                           ;incstack = 0
 10141  00DD82  0100               	movlb	0	; () banked
 10142  00DD84  AFFA               	btfss	(_prec+1)& (0+255),7,b
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 630:       
      +                            flags &= ~(1 << 1);
 10146  00DD86  93FB               	bcf	_flags& (0+255),1,b
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 632:     p 
      +                          = (0 < prec) ? prec : 1;
 10150  00DD88  BFFA               	btfsc	(_prec+1)& (0+255),7,b
 10151  00DD8A  D005               	goto	u3470
 10152  00DD8C  51FA               	movf	(_prec+1)& (0+255),w,b
 10153  00DD8E  E108               	bnz	l623
 10154  00DD90  05F9               	decf	_prec& (0+255),w,b
 10155  00DD92  B0D8               	btfsc	status,0,c
 10156  00DD94  D005               	goto	l623
 10157  00DD96                     u3470:
 10158                           
 10159                           ; BSR set to: 0
 10160  00DD96  0E00               	movlw	0
 10161  00DD98  6E38               	movwf	xtoa@p+1,c
 10162  00DD9A  0E01               	movlw	1
 10163  00DD9C  6E37               	movwf	xtoa@p,c
 10164  00DD9E  D004               	goto	l625
 10165  00DDA0                     l623:
 10166                           
 10167                           ; BSR set to: 0
 10168  00DDA0  C0F9  F037         	movff	_prec,xtoa@p
 10169  00DDA4  C0FA  F038         	movff	_prec+1,xtoa@p+1
 10170  00DDA8                     l625:
 10171                           
 10172                           ; BSR set to: 0
 10173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 633:     w 
      +                          = width;
 10174  00DDA8  C0F7  F039         	movff	_width,xtoa@w
 10175  00DDAC  C0F8  F03A         	movff	_width+1,xtoa@w+1
 10176                           
 10177                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 634:     if
      +                           (flags & (1 << 4)) {
 10178  00DDB0  A9FB               	btfss	_flags& (0+255),4,b
 10179  00DDB2  D004               	goto	l4419
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 635:       
      +                            w -= 2;
 10183  00DDB4  0EFE               	movlw	254
 10184  00DDB6  2639               	addwf	xtoa@w,f,c
 10185  00DDB8  0EFF               	movlw	255
 10186  00DDBA  223A               	addwfc	xtoa@w+1,f,c
 10187  00DDBC                     l4419:
 10188                           
 10189                           ; BSR set to: 0
 10190                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 639:     n 
      +                          = d;
 10191  00DDBC  C022  F03B         	movff	xtoa@d,xtoa@n
 10192  00DDC0  C023  F03C         	movff	xtoa@d+1,xtoa@n+1
 10193  00DDC4  C024  F03D         	movff	xtoa@d+2,xtoa@n+2
 10194  00DDC8  C025  F03E         	movff	xtoa@d+3,xtoa@n+3
 10195  00DDCC  C026  F03F         	movff	xtoa@d+4,xtoa@n+4
 10196  00DDD0  C027  F040         	movff	xtoa@d+5,xtoa@n+5
 10197  00DDD4  C028  F041         	movff	xtoa@d+6,xtoa@n+6
 10198  00DDD8  C029  F042         	movff	xtoa@d+7,xtoa@n+7
 10199                           
 10200                           ; BSR set to: 0
 10201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 640:     i 
      +                          = sizeof(dbuf) - 1;
 10202  00DDDC  0E00               	movlw	0
 10203  00DDDE  6E44               	movwf	xtoa@i+1,c
 10204  00DDE0  0E1F               	movlw	31
 10205  00DDE2  6E43               	movwf	xtoa@i,c
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 641:     db
      +                          uf[i] = '\0';
 10209  00DDE4  0E00               	movlw	0
 10210  00DDE6  0101               	movlb	1	; () banked
 10211  00DDE8  6F3B               	movwf	(_dbuf+31)& (0+255),b
 10212                           
 10213                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10214  00DDEA  D093               	goto	l4455
 10215  00DDEC                     l4425:
 10216                           
 10217                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 643:       
      +                            --i;
 10218  00DDEC  0643               	decf	xtoa@i,f,c
 10219  00DDEE  A0D8               	btfss	status,0,c
 10220  00DDF0  0644               	decf	xtoa@i+1,f,c
 10221                           
 10222                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 644:       
      +                            c = n & 0x0f;
 10223  00DDF2  0E0F               	movlw	15
 10224  00DDF4  143B               	andwf	xtoa@n,w,c
 10225  00DDF6  6E45               	movwf	xtoa@c,c
 10226  00DDF8  6A46               	clrf	xtoa@c+1,c
 10227                           
 10228                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 645:       
      +                            c = (c < 10) ? '0' + c : 'a' + (c - 10);
 10229  00DDFA  BE46               	btfsc	xtoa@c+1,7,c
 10230  00DDFC  D008               	goto	l4433
 10231  00DDFE  5046               	movf	xtoa@c+1,w,c
 10232  00DE00  E104               	bnz	u3490
 10233  00DE02  0E0A               	movlw	10
 10234  00DE04  5C45               	subwf	xtoa@c,w,c
 10235  00DE06  A0D8               	btfss	status,0,c
 10236  00DE08  D002               	goto	l4433
 10237  00DE0A                     u3490:
 10238  00DE0A  0E57               	movlw	87
 10239  00DE0C  D001               	goto	L47
 10240  00DE0E                     l4433:
 10241  00DE0E  0E30               	movlw	48
 10242  00DE10                     L47:
 10243  00DE10  2445               	addwf	xtoa@c,w,c
 10244  00DE12  6E45               	movwf	xtoa@c,c
 10245  00DE14  0E00               	movlw	0
 10246  00DE16  2046               	addwfc	xtoa@c+1,w,c
 10247  00DE18  6E46               	movwf	xtoa@c+1,c
 10248                           
 10249                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 646:       
      +                            if ((0 ? isupper((int)x) : ((unsigned)((int)x)-'A') < 26) && (0 ? isalpha(c) : (((unsi
      +                          gned)(c)|32)-'a') < 26)) {
 10250  00DE1A  0EBF               	movlw	191
 10251  00DE1C  6E2B               	movwf	??_xtoa& (0+255),c
 10252  00DE1E  0EFF               	movlw	255
 10253  00DE20  6E2C               	movwf	(??_xtoa+1)& (0+255),c
 10254  00DE22  502A               	movf	xtoa@x,w,c
 10255  00DE24  6E2D               	movwf	(??_xtoa+2)& (0+255),c
 10256  00DE26  6A2E               	clrf	(??_xtoa+3)& (0+255),c
 10257  00DE28  502B               	movf	??_xtoa,w,c
 10258  00DE2A  262D               	addwf	??_xtoa+2,f,c
 10259  00DE2C  502C               	movf	??_xtoa+1,w,c
 10260  00DE2E  222E               	addwfc	??_xtoa+3,f,c
 10261  00DE30  502E               	movf	??_xtoa+3,w,c
 10262  00DE32  E106               	bnz	u3500
 10263  00DE34  0E1A               	movlw	26
 10264  00DE36  5C2D               	subwf	??_xtoa+2,w,c
 10265  00DE38  B0D8               	btfsc	status,0,c
 10266  00DE3A  D002               	goto	u3500
 10267  00DE3C  0E01               	movlw	1
 10268  00DE3E  D001               	goto	u3510
 10269  00DE40                     u3500:
 10270  00DE40  0E00               	movlw	0
 10271  00DE42                     u3510:
 10272  00DE42  6E33               	movwf	_xtoa$1316,c
 10273  00DE44  6A34               	clrf	_xtoa$1316+1,c
 10274  00DE46  5033               	movf	_xtoa$1316,w,c
 10275  00DE48  1034               	iorwf	_xtoa$1316+1,w,c
 10276  00DE4A  B4D8               	btfsc	status,2,c
 10277  00DE4C  D027               	goto	l4447
 10278  00DE4E  0E9F               	movlw	159
 10279  00DE50  6E2B               	movwf	??_xtoa& (0+255),c
 10280  00DE52  0EFF               	movlw	255
 10281  00DE54  6E2C               	movwf	(??_xtoa+1)& (0+255),c
 10282  00DE56  0E20               	movlw	32
 10283  00DE58  1045               	iorwf	xtoa@c,w,c
 10284  00DE5A  6E2D               	movwf	(??_xtoa+2)& (0+255),c
 10285  00DE5C  0E00               	movlw	0
 10286  00DE5E  1046               	iorwf	xtoa@c+1,w,c
 10287  00DE60  6E2E               	movwf	(??_xtoa+3)& (0+255),c
 10288  00DE62  502B               	movf	??_xtoa,w,c
 10289  00DE64  262D               	addwf	??_xtoa+2,f,c
 10290  00DE66  502C               	movf	??_xtoa+1,w,c
 10291  00DE68  222E               	addwfc	??_xtoa+3,f,c
 10292  00DE6A  502E               	movf	??_xtoa+3,w,c
 10293  00DE6C  E106               	bnz	u3530
 10294  00DE6E  0E1A               	movlw	26
 10295  00DE70  5C2D               	subwf	??_xtoa+2,w,c
 10296  00DE72  B0D8               	btfsc	status,0,c
 10297  00DE74  D002               	goto	u3530
 10298  00DE76  0E01               	movlw	1
 10299  00DE78  D001               	goto	u3540
 10300  00DE7A                     u3530:
 10301  00DE7A  0E00               	movlw	0
 10302  00DE7C                     u3540:
 10303  00DE7C  6E35               	movwf	_xtoa$1317,c
 10304  00DE7E  6A36               	clrf	_xtoa$1317+1,c
 10305  00DE80  5035               	movf	_xtoa$1317,w,c
 10306  00DE82  1036               	iorwf	_xtoa$1317+1,w,c
 10307  00DE84  B4D8               	btfsc	status,2,c
 10308  00DE86  D00A               	goto	l4447
 10309                           
 10310                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 647:       
      +                                c = toupper(c);
 10311  00DE88  C045  F007         	movff	xtoa@c,toupper@c
 10312  00DE8C  C046  F008         	movff	xtoa@c+1,toupper@c+1
 10313  00DE90  EC97  F063         	call	_toupper	;wreg free
 10314  00DE94  C007  F045         	movff	?_toupper,xtoa@c
 10315  00DE98  C008  F046         	movff	?_toupper+1,xtoa@c+1
 10316  00DE9C                     l4447:
 10317                           
 10318                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 649:       
      +                            dbuf[i] = (char)c;
 10319  00DE9C  0E1C               	movlw	low _dbuf
 10320  00DE9E  2443               	addwf	xtoa@i,w,c
 10321  00DEA0  6ED9               	movwf	fsr2l,c
 10322  00DEA2  0E01               	movlw	high _dbuf
 10323  00DEA4  2044               	addwfc	xtoa@i+1,w,c
 10324  00DEA6  6EDA               	movwf	fsr2h,c
 10325  00DEA8  C045  FFDF         	movff	xtoa@c,indf2
 10326                           
 10327                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 650:       
      +                            --p;
 10328  00DEAC  0637               	decf	xtoa@p,f,c
 10329  00DEAE  A0D8               	btfss	status,0,c
 10330  00DEB0  0638               	decf	xtoa@p+1,f,c
 10331                           
 10332                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 651:       
      +                            --w;
 10333  00DEB2  0639               	decf	xtoa@w,f,c
 10334  00DEB4  A0D8               	btfss	status,0,c
 10335  00DEB6  063A               	decf	xtoa@w+1,f,c
 10336                           
 10337                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 652:       
      +                            n = n >> 4;
 10338  00DEB8  C03B  F02B         	movff	xtoa@n,??_xtoa
 10339  00DEBC  C03C  F02C         	movff	xtoa@n+1,??_xtoa+1
 10340  00DEC0  C03D  F02D         	movff	xtoa@n+2,??_xtoa+2
 10341  00DEC4  C03E  F02E         	movff	xtoa@n+3,??_xtoa+3
 10342  00DEC8  C03F  F02F         	movff	xtoa@n+4,??_xtoa+4
 10343  00DECC  C040  F030         	movff	xtoa@n+5,??_xtoa+5
 10344  00DED0  C041  F031         	movff	xtoa@n+6,??_xtoa+6
 10345  00DED4  C042  F032         	movff	xtoa@n+7,??_xtoa+7
 10346  00DED8  0E05               	movlw	5
 10347  00DEDA  D009               	goto	u3560
 10348  00DEDC                     u3565:
 10349  00DEDC  90D8               	bcf	status,0,c
 10350  00DEDE  3232               	rrcf	??_xtoa+7,f,c
 10351  00DEE0  3231               	rrcf	??_xtoa+6,f,c
 10352  00DEE2  3230               	rrcf	??_xtoa+5,f,c
 10353  00DEE4  322F               	rrcf	??_xtoa+4,f,c
 10354  00DEE6  322E               	rrcf	??_xtoa+3,f,c
 10355  00DEE8  322D               	rrcf	??_xtoa+2,f,c
 10356  00DEEA  322C               	rrcf	??_xtoa+1,f,c
 10357  00DEEC  322B               	rrcf	??_xtoa,f,c
 10358  00DEEE                     u3560:
 10359  00DEEE  2EE8               	decfsz	wreg,f,c
 10360  00DEF0  D7F5               	goto	u3565
 10361  00DEF2  C02B  F03B         	movff	??_xtoa,xtoa@n
 10362  00DEF6  C02C  F03C         	movff	??_xtoa+1,xtoa@n+1
 10363  00DEFA  C02D  F03D         	movff	??_xtoa+2,xtoa@n+2
 10364  00DEFE  C02E  F03E         	movff	??_xtoa+3,xtoa@n+3
 10365  00DF02  C02F  F03F         	movff	??_xtoa+4,xtoa@n+4
 10366  00DF06  C030  F040         	movff	??_xtoa+5,xtoa@n+5
 10367  00DF0A  C031  F041         	movff	??_xtoa+6,xtoa@n+6
 10368  00DF0E  C032  F042         	movff	??_xtoa+7,xtoa@n+7
 10369  00DF12                     l4455:
 10370                           
 10371                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10372  00DF12  BE44               	btfsc	xtoa@i+1,7,c
 10373  00DF14  D021               	goto	u3610
 10374  00DF16  5044               	movf	xtoa@i+1,w,c
 10375  00DF18  E104               	bnz	u3570
 10376  00DF1A  0E02               	movlw	2
 10377  00DF1C  5C43               	subwf	xtoa@i,w,c
 10378  00DF1E  A0D8               	btfss	status,0,c
 10379  00DF20  D01B               	goto	u3610
 10380  00DF22                     u3570:
 10381  00DF22  503B               	movf	xtoa@n,w,c
 10382  00DF24  103C               	iorwf	xtoa@n+1,w,c
 10383  00DF26  103D               	iorwf	xtoa@n+2,w,c
 10384  00DF28  103E               	iorwf	xtoa@n+3,w,c
 10385  00DF2A  103F               	iorwf	xtoa@n+4,w,c
 10386  00DF2C  1040               	iorwf	xtoa@n+5,w,c
 10387  00DF2E  1041               	iorwf	xtoa@n+6,w,c
 10388  00DF30  1042               	iorwf	xtoa@n+7,w,c
 10389  00DF32  A4D8               	btfss	status,2,c
 10390  00DF34  D75B               	goto	l4425
 10391  00DF36  BE38               	btfsc	xtoa@p+1,7,c
 10392  00DF38  D005               	goto	u3590
 10393  00DF3A  5038               	movf	xtoa@p+1,w,c
 10394  00DF3C  E102               	bnz	u3591
 10395  00DF3E  0437               	decf	xtoa@p,w,c
 10396  00DF40  B0D8               	btfsc	status,0,c
 10397  00DF42                     u3591:
 10398  00DF42  D754               	goto	l4425
 10399  00DF44                     u3590:
 10400  00DF44  BE3A               	btfsc	xtoa@w+1,7,c
 10401  00DF46  D008               	goto	u3610
 10402  00DF48  503A               	movf	xtoa@w+1,w,c
 10403  00DF4A  E103               	bnz	u3600
 10404  00DF4C  0439               	decf	xtoa@w,w,c
 10405  00DF4E  A0D8               	btfss	status,0,c
 10406  00DF50  D003               	goto	u3610
 10407  00DF52                     u3600:
 10408  00DF52  0100               	movlb	0	; () banked
 10409  00DF54  B3FB               	btfsc	_flags& (0+255),1,b
 10410  00DF56  D74A               	goto	l4425
 10411  00DF58                     u3610:
 10412                           
 10413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 656:     if
      +                           (flags & (1 << 4)) {
 10414  00DF58  0100               	movlb	0	; () banked
 10415  00DF5A  A9FB               	btfss	_flags& (0+255),4,b
 10416  00DF5C  D016               	goto	l4471
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 657:       
      +                            --i;
 10420  00DF5E  0643               	decf	xtoa@i,f,c
 10421  00DF60  A0D8               	btfss	status,0,c
 10422  00DF62  0644               	decf	xtoa@i+1,f,c
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 658:       
      +                            dbuf[i] = x;
 10426  00DF64  0E1C               	movlw	low _dbuf
 10427  00DF66  2443               	addwf	xtoa@i,w,c
 10428  00DF68  6ED9               	movwf	fsr2l,c
 10429  00DF6A  0E01               	movlw	high _dbuf
 10430  00DF6C  2044               	addwfc	xtoa@i+1,w,c
 10431  00DF6E  6EDA               	movwf	fsr2h,c
 10432  00DF70  C02A  FFDF         	movff	xtoa@x,indf2
 10433                           
 10434                           ; BSR set to: 0
 10435                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 659:       
      +                            --i;
 10436  00DF74  0643               	decf	xtoa@i,f,c
 10437  00DF76  A0D8               	btfss	status,0,c
 10438  00DF78  0644               	decf	xtoa@i+1,f,c
 10439                           
 10440                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 660:       
      +                            dbuf[i] = '0';
 10441  00DF7A  0E1C               	movlw	low _dbuf
 10442  00DF7C  2443               	addwf	xtoa@i,w,c
 10443  00DF7E  6ED9               	movwf	fsr2l,c
 10444  00DF80  0E01               	movlw	high _dbuf
 10445  00DF82  2044               	addwfc	xtoa@i+1,w,c
 10446  00DF84  6EDA               	movwf	fsr2h,c
 10447  00DF86  0E30               	movlw	48
 10448  00DF88  6EDF               	movwf	indf2,c
 10449  00DF8A                     l4471:
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 664:     re
      +                          turn pad(fp, &dbuf[i], w);
 10453  00DF8A  C020  F015         	movff	xtoa@fp,pad@fp
 10454  00DF8E  C021  F016         	movff	xtoa@fp+1,pad@fp+1
 10455  00DF92  0E1C               	movlw	low _dbuf
 10456  00DF94  2443               	addwf	xtoa@i,w,c
 10457  00DF96  6E17               	movwf	pad@buf,c
 10458  00DF98  0E01               	movlw	high _dbuf
 10459  00DF9A  2044               	addwfc	xtoa@i+1,w,c
 10460  00DF9C  6E18               	movwf	pad@buf+1,c
 10461  00DF9E  C039  F019         	movff	xtoa@w,pad@p
 10462  00DFA2  C03A  F01A         	movff	xtoa@w+1,pad@p+1
 10463  00DFA6  EC64  F065         	call	_pad	;wreg free
 10464  00DFAA  C015  F020         	movff	?_pad,?_xtoa
 10465  00DFAE  C016  F021         	movff	?_pad+1,?_xtoa+1
 10466  00DFB2  0012               	return		;funcret
 10467  00DFB4                     __end_of_xtoa:
 10468                           	opt callstack 0
 10469                           
 10470 ;; *************** function _toupper *****************
 10471 ;; Defined at:
 10472 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\toupper.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;  c               2    6[COMRAM] int 
 10475 ;; Auto vars:     Size  Location     Type
 10476 ;;		None
 10477 ;; Return value:  Size  Location     Type
 10478 ;;                  2    6[COMRAM] int 
 10479 ;; Registers used:
 10480 ;;		wreg, status,2, status,0
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;Total ram usage:        8 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    1
 10493 ;; This function calls:
 10494 ;;		_islower
 10495 ;; This function is called by:
 10496 ;;		_xtoa
 10497 ;; This function uses a non-reentrant model
 10498 ;;
 10499                           
 10500                           	psect	text28
 10501  00C72E                     __ptext28:
 10502                           	opt callstack 0
 10503  00C72E                     _toupper:
 10504                           	opt callstack 24
 10505                           
 10506                           ;incstack = 0
 10507  00C72E  0E9F               	movlw	159
 10508  00C730  6E09               	movwf	??_toupper& (0+255),c
 10509  00C732  0EFF               	movlw	255
 10510  00C734  6E0A               	movwf	(??_toupper+1)& (0+255),c
 10511  00C736  C007  F00B         	movff	toupper@c,??_toupper+2
 10512  00C73A  C008  F00C         	movff	toupper@c+1,??_toupper+3
 10513  00C73E  5009               	movf	??_toupper,w,c
 10514  00C740  260B               	addwf	??_toupper+2,f,c
 10515  00C742  500A               	movf	??_toupper+1,w,c
 10516  00C744  220C               	addwfc	??_toupper+3,f,c
 10517  00C746  500C               	movf	??_toupper+3,w,c
 10518  00C748  E106               	bnz	u3250
 10519  00C74A  0E1A               	movlw	26
 10520  00C74C  5C0B               	subwf	??_toupper+2,w,c
 10521  00C74E  B0D8               	btfsc	status,0,c
 10522  00C750  D002               	goto	u3250
 10523  00C752  0E01               	movlw	1
 10524  00C754  D001               	goto	u3260
 10525  00C756                     u3250:
 10526  00C756  0E00               	movlw	0
 10527  00C758                     u3260:
 10528  00C758  6E0D               	movwf	_toupper$1899,c
 10529  00C75A  6A0E               	clrf	_toupper$1899+1,c
 10530  00C75C  500D               	movf	_toupper$1899,w,c
 10531  00C75E  100E               	iorwf	_toupper$1899+1,w,c
 10532  00C760  B4D8               	btfsc	status,2,c
 10533  00C762  D005               	goto	l1467
 10534  00C764  0E5F               	movlw	95
 10535  00C766  1407               	andwf	toupper@c,w,c
 10536  00C768  6E07               	movwf	?_toupper,c
 10537  00C76A  6A08               	clrf	?_toupper+1,c
 10538  00C76C  0012               	return	
 10539  00C76E                     l1467:
 10540  00C76E  C007  F007         	movff	toupper@c,?_toupper
 10541  00C772  C008  F008         	movff	toupper@c+1,?_toupper+1
 10542  00C776  0012               	return		;funcret
 10543  00C778                     __end_of_toupper:
 10544                           	opt callstack 0
 10545                           
 10546 ;; *************** function _islower *****************
 10547 ;; Defined at:
 10548 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\islower.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;  c               2    0[COMRAM] int 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;		None
 10553 ;; Return value:  Size  Location     Type
 10554 ;;                  2    0[COMRAM] int 
 10555 ;; Registers used:
 10556 ;;		wreg, status,2, status,0
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10562 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10564 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10565 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10566 ;;Total ram usage:        6 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; This function calls:
 10569 ;;		Nothing
 10570 ;; This function is called by:
 10571 ;;		_toupper
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           	psect	text29
 10576  00C5D8                     __ptext29:
 10577                           	opt callstack 0
 10578  00C5D8                     _islower:
 10579                           	opt callstack 24
 10580                           
 10581                           ;incstack = 0
 10582  00C5D8  0E9F               	movlw	159
 10583  00C5DA  6E03               	movwf	??_islower& (0+255),c
 10584  00C5DC  0EFF               	movlw	255
 10585  00C5DE  6E04               	movwf	(??_islower+1)& (0+255),c
 10586  00C5E0  C001  F005         	movff	islower@c,??_islower+2
 10587  00C5E4  C002  F006         	movff	islower@c+1,??_islower+3
 10588  00C5E8  5003               	movf	??_islower,w,c
 10589  00C5EA  2605               	addwf	??_islower+2,f,c
 10590  00C5EC  5004               	movf	??_islower+1,w,c
 10591  00C5EE  2206               	addwfc	??_islower+3,f,c
 10592  00C5F0  5006               	movf	??_islower+3,w,c
 10593  00C5F2  E106               	bnz	u3150
 10594  00C5F4  0E1A               	movlw	26
 10595  00C5F6  5C05               	subwf	??_islower+2,w,c
 10596  00C5F8  B0D8               	btfsc	status,0,c
 10597  00C5FA  D002               	goto	u3150
 10598  00C5FC  0E01               	movlw	1
 10599  00C5FE  D001               	goto	u3160
 10600  00C600                     u3150:
 10601  00C600  0E00               	movlw	0
 10602  00C602                     u3160:
 10603  00C602  6E01               	movwf	?_islower,c
 10604  00C604  6A02               	clrf	?_islower+1,c
 10605  00C606  0012               	return		;funcret
 10606  00C608                     __end_of_islower:
 10607                           	opt callstack 0
 10608                           
 10609 ;; *************** function _isupper *****************
 10610 ;; Defined at:
 10611 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isupper.c"
 10612 ;; Parameters:    Size  Location     Type
 10613 ;;  c               2    0[COMRAM] int 
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;		None
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  2    0[COMRAM] int 
 10618 ;; Registers used:
 10619 ;;		wreg, status,2, status,0
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10625 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;Total ram usage:        6 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; This function calls:
 10632 ;;		Nothing
 10633 ;; This function is called by:
 10634 ;;		_xtoa
 10635 ;; This function uses a non-reentrant model
 10636 ;;
 10637                           
 10638                           	psect	text30
 10639  00C5A8                     __ptext30:
 10640                           	opt callstack 0
 10641  00C5A8                     _isupper:
 10642                           	opt callstack 25
 10643                           
 10644                           ;incstack = 0
 10645  00C5A8  0EBF               	movlw	191
 10646  00C5AA  6E03               	movwf	??_isupper& (0+255),c
 10647  00C5AC  0EFF               	movlw	255
 10648  00C5AE  6E04               	movwf	(??_isupper+1)& (0+255),c
 10649  00C5B0  C001  F005         	movff	isupper@c,??_isupper+2
 10650  00C5B4  C002  F006         	movff	isupper@c+1,??_isupper+3
 10651  00C5B8  5003               	movf	??_isupper,w,c
 10652  00C5BA  2605               	addwf	??_isupper+2,f,c
 10653  00C5BC  5004               	movf	??_isupper+1,w,c
 10654  00C5BE  2206               	addwfc	??_isupper+3,f,c
 10655  00C5C0  5006               	movf	??_isupper+3,w,c
 10656  00C5C2  E106               	bnz	u3210
 10657  00C5C4  0E1A               	movlw	26
 10658  00C5C6  5C05               	subwf	??_isupper+2,w,c
 10659  00C5C8  B0D8               	btfsc	status,0,c
 10660  00C5CA  D002               	goto	u3210
 10661  00C5CC  0E01               	movlw	1
 10662  00C5CE  D001               	goto	u3220
 10663  00C5D0                     u3210:
 10664  00C5D0  0E00               	movlw	0
 10665  00C5D2                     u3220:
 10666  00C5D2  6E01               	movwf	?_isupper,c
 10667  00C5D4  6A02               	clrf	?_isupper+1,c
 10668  00C5D6  0012               	return		;funcret
 10669  00C5D8                     __end_of_isupper:
 10670                           	opt callstack 0
 10671                           
 10672 ;; *************** function _isalpha *****************
 10673 ;; Defined at:
 10674 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isalpha.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;  c               2    0[COMRAM] int 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;		None
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  2    0[COMRAM] int 
 10681 ;; Registers used:
 10682 ;;		wreg, status,2, status,0
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10688 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;Total ram usage:        6 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; This function calls:
 10695 ;;		Nothing
 10696 ;; This function is called by:
 10697 ;;		_xtoa
 10698 ;; This function uses a non-reentrant model
 10699 ;;
 10700                           
 10701                           	psect	text31
 10702  00C608                     __ptext31:
 10703                           	opt callstack 0
 10704  00C608                     _isalpha:
 10705                           	opt callstack 25
 10706                           
 10707                           ;incstack = 0
 10708  00C608  0E9F               	movlw	159
 10709  00C60A  6E03               	movwf	??_isalpha& (0+255),c
 10710  00C60C  0EFF               	movlw	255
 10711  00C60E  6E04               	movwf	(??_isalpha+1)& (0+255),c
 10712  00C610  0E20               	movlw	32
 10713  00C612  1001               	iorwf	isalpha@c,w,c
 10714  00C614  6E05               	movwf	(??_isalpha+2)& (0+255),c
 10715  00C616  0E00               	movlw	0
 10716  00C618  1002               	iorwf	isalpha@c+1,w,c
 10717  00C61A  6E06               	movwf	(??_isalpha+3)& (0+255),c
 10718  00C61C  5003               	movf	??_isalpha,w,c
 10719  00C61E  2605               	addwf	??_isalpha+2,f,c
 10720  00C620  5004               	movf	??_isalpha+1,w,c
 10721  00C622  2206               	addwfc	??_isalpha+3,f,c
 10722  00C624  5006               	movf	??_isalpha+3,w,c
 10723  00C626  E106               	bnz	u3230
 10724  00C628  0E1A               	movlw	26
 10725  00C62A  5C05               	subwf	??_isalpha+2,w,c
 10726  00C62C  B0D8               	btfsc	status,0,c
 10727  00C62E  D002               	goto	u3230
 10728  00C630  0E01               	movlw	1
 10729  00C632  D001               	goto	u3240
 10730  00C634                     u3230:
 10731  00C634  0E00               	movlw	0
 10732  00C636                     u3240:
 10733  00C636  6E01               	movwf	?_isalpha,c
 10734  00C638  6A02               	clrf	?_isalpha+1,c
 10735  00C63A  0012               	return		;funcret
 10736  00C63C                     __end_of_isalpha:
 10737                           	opt callstack 0
 10738                           
 10739 ;; *************** function _utoa *****************
 10740 ;; Defined at:
 10741 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10742 ;; Parameters:    Size  Location     Type
 10743 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
 10744 ;;		 -> NULL(0), 
 10745 ;;  d               8   33[COMRAM] unsigned long long 
 10746 ;; Auto vars:     Size  Location     Type
 10747 ;;  n               8   53[COMRAM] unsigned long long 
 10748 ;;  i               2   61[COMRAM] int 
 10749 ;;  w               2   51[COMRAM] int 
 10750 ;;  p               2   49[COMRAM] int 
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  2   31[COMRAM] int 
 10753 ;; Registers used:
 10754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10760 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10761 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10763 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10764 ;;Total ram usage:       32 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; Hardware stack levels required when called:    7
 10767 ;; This function calls:
 10768 ;;		___lodiv
 10769 ;;		___lomod
 10770 ;;		_pad
 10771 ;; This function is called by:
 10772 ;;		_vfpfcnvrt
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text32
 10777  00D9A2                     __ptext32:
 10778                           	opt callstack 0
 10779  00D9A2                     _utoa:
 10780                           	opt callstack 19
 10781                           
 10782                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
 10783                           
 10784                           ;incstack = 0
 10785  00D9A2  0100               	movlb	0	; () banked
 10786  00D9A4  AFFA               	btfss	(_prec+1)& (0+255),7,b
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
 10790  00D9A6  93FB               	bcf	_flags& (0+255),1,b
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
 10794  00D9A8  BFFA               	btfsc	(_prec+1)& (0+255),7,b
 10795  00D9AA  D005               	goto	u3400
 10796  00D9AC  51FA               	movf	(_prec+1)& (0+255),w,b
 10797  00D9AE  E108               	bnz	l608
 10798  00D9B0  05F9               	decf	_prec& (0+255),w,b
 10799  00D9B2  B0D8               	btfsc	status,0,c
 10800  00D9B4  D005               	goto	l608
 10801  00D9B6                     u3400:
 10802                           
 10803                           ; BSR set to: 0
 10804  00D9B6  0E00               	movlw	0
 10805  00D9B8  6E33               	movwf	utoa@p+1,c
 10806  00D9BA  0E01               	movlw	1
 10807  00D9BC  6E32               	movwf	utoa@p,c
 10808  00D9BE  D004               	goto	l610
 10809  00D9C0                     l608:
 10810                           
 10811                           ; BSR set to: 0
 10812  00D9C0  C0F9  F032         	movff	_prec,utoa@p
 10813  00D9C4  C0FA  F033         	movff	_prec+1,utoa@p+1
 10814  00D9C8                     l610:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
 10818  00D9C8  C0F7  F034         	movff	_width,utoa@w
 10819  00D9CC  C0F8  F035         	movff	_width+1,utoa@w+1
 10820                           
 10821                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
 10822  00D9D0  C022  F036         	movff	utoa@d,utoa@n
 10823  00D9D4  C023  F037         	movff	utoa@d+1,utoa@n+1
 10824  00D9D8  C024  F038         	movff	utoa@d+2,utoa@n+2
 10825  00D9DC  C025  F039         	movff	utoa@d+3,utoa@n+3
 10826  00D9E0  C026  F03A         	movff	utoa@d+4,utoa@n+4
 10827  00D9E4  C027  F03B         	movff	utoa@d+5,utoa@n+5
 10828  00D9E8  C028  F03C         	movff	utoa@d+6,utoa@n+6
 10829  00D9EC  C029  F03D         	movff	utoa@d+7,utoa@n+7
 10830                           
 10831                           ; BSR set to: 0
 10832                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
 10833  00D9F0  0E00               	movlw	0
 10834  00D9F2  6E3F               	movwf	utoa@i+1,c
 10835  00D9F4  0E1F               	movlw	31
 10836  00D9F6  6E3E               	movwf	utoa@i,c
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
 10840  00D9F8  0E00               	movlw	0
 10841  00D9FA  0101               	movlb	1	; () banked
 10842  00D9FC  6F3B               	movwf	(_dbuf+31)& (0+255),b
 10843                           
 10844                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10845  00D9FE  D076               	goto	l4395
 10846  00DA00                     l4385:
 10847                           
 10848                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
 10849  00DA00  063E               	decf	utoa@i,f,c
 10850  00DA02  A0D8               	btfss	status,0,c
 10851  00DA04  063F               	decf	utoa@i+1,f,c
 10852                           
 10853                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
 10854  00DA06  0E1C               	movlw	low _dbuf
 10855  00DA08  243E               	addwf	utoa@i,w,c
 10856  00DA0A  6ED9               	movwf	fsr2l,c
 10857  00DA0C  0E01               	movlw	high _dbuf
 10858  00DA0E  203F               	addwfc	utoa@i+1,w,c
 10859  00DA10  6EDA               	movwf	fsr2h,c
 10860  00DA12  C036  F001         	movff	utoa@n,___lomod@dividend
 10861  00DA16  C037  F002         	movff	utoa@n+1,___lomod@dividend+1
 10862  00DA1A  C038  F003         	movff	utoa@n+2,___lomod@dividend+2
 10863  00DA1E  C039  F004         	movff	utoa@n+3,___lomod@dividend+3
 10864  00DA22  C03A  F005         	movff	utoa@n+4,___lomod@dividend+4
 10865  00DA26  C03B  F006         	movff	utoa@n+5,___lomod@dividend+5
 10866  00DA2A  C03C  F007         	movff	utoa@n+6,___lomod@dividend+6
 10867  00DA2E  C03D  F008         	movff	utoa@n+7,___lomod@dividend+7
 10868  00DA32  0E0A               	movlw	10
 10869  00DA34  6E09               	movwf	___lomod@divisor,c
 10870  00DA36  0E00               	movlw	0
 10871  00DA38  6E0A               	movwf	___lomod@divisor+1,c
 10872  00DA3A  0E00               	movlw	0
 10873  00DA3C  6E0B               	movwf	___lomod@divisor+2,c
 10874  00DA3E  0E00               	movlw	0
 10875  00DA40  6E0C               	movwf	___lomod@divisor+3,c
 10876  00DA42  0E00               	movlw	0
 10877  00DA44  6E0D               	movwf	___lomod@divisor+4,c
 10878  00DA46  0E00               	movlw	0
 10879  00DA48  6E0E               	movwf	___lomod@divisor+5,c
 10880  00DA4A  0E00               	movlw	0
 10881  00DA4C  6E0F               	movwf	___lomod@divisor+6,c
 10882  00DA4E  0E00               	movlw	0
 10883  00DA50  6E10               	movwf	___lomod@divisor+7,c
 10884  00DA52  EC06  F066         	call	___lomod	;wreg free
 10885  00DA56  C001  F02A         	movff	?___lomod,??_utoa
 10886  00DA5A  C002  F02B         	movff	?___lomod+1,??_utoa+1
 10887  00DA5E  C003  F02C         	movff	?___lomod+2,??_utoa+2
 10888  00DA62  C004  F02D         	movff	?___lomod+3,??_utoa+3
 10889  00DA66  C005  F02E         	movff	?___lomod+4,??_utoa+4
 10890  00DA6A  C006  F02F         	movff	?___lomod+5,??_utoa+5
 10891  00DA6E  C007  F030         	movff	?___lomod+6,??_utoa+6
 10892  00DA72  C008  F031         	movff	?___lomod+7,??_utoa+7
 10893  00DA76  502A               	movf	??_utoa,w,c
 10894  00DA78  0F30               	addlw	48
 10895  00DA7A  6EDF               	movwf	indf2,c
 10896                           
 10897                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
 10898  00DA7C  0632               	decf	utoa@p,f,c
 10899  00DA7E  A0D8               	btfss	status,0,c
 10900  00DA80  0633               	decf	utoa@p+1,f,c
 10901                           
 10902                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
 10903  00DA82  0634               	decf	utoa@w,f,c
 10904  00DA84  A0D8               	btfss	status,0,c
 10905  00DA86  0635               	decf	utoa@w+1,f,c
 10906                           
 10907                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
 10908  00DA88  C036  F001         	movff	utoa@n,___lodiv@dividend
 10909  00DA8C  C037  F002         	movff	utoa@n+1,___lodiv@dividend+1
 10910  00DA90  C038  F003         	movff	utoa@n+2,___lodiv@dividend+2
 10911  00DA94  C039  F004         	movff	utoa@n+3,___lodiv@dividend+3
 10912  00DA98  C03A  F005         	movff	utoa@n+4,___lodiv@dividend+4
 10913  00DA9C  C03B  F006         	movff	utoa@n+5,___lodiv@dividend+5
 10914  00DAA0  C03C  F007         	movff	utoa@n+6,___lodiv@dividend+6
 10915  00DAA4  C03D  F008         	movff	utoa@n+7,___lodiv@dividend+7
 10916  00DAA8  0E0A               	movlw	10
 10917  00DAAA  6E09               	movwf	___lodiv@divisor,c
 10918  00DAAC  0E00               	movlw	0
 10919  00DAAE  6E0A               	movwf	___lodiv@divisor+1,c
 10920  00DAB0  0E00               	movlw	0
 10921  00DAB2  6E0B               	movwf	___lodiv@divisor+2,c
 10922  00DAB4  0E00               	movlw	0
 10923  00DAB6  6E0C               	movwf	___lodiv@divisor+3,c
 10924  00DAB8  0E00               	movlw	0
 10925  00DABA  6E0D               	movwf	___lodiv@divisor+4,c
 10926  00DABC  0E00               	movlw	0
 10927  00DABE  6E0E               	movwf	___lodiv@divisor+5,c
 10928  00DAC0  0E00               	movlw	0
 10929  00DAC2  6E0F               	movwf	___lodiv@divisor+6,c
 10930  00DAC4  0E00               	movlw	0
 10931  00DAC6  6E10               	movwf	___lodiv@divisor+7,c
 10932  00DAC8  EC1E  F067         	call	___lodiv	;wreg free
 10933  00DACC  C001  F036         	movff	?___lodiv,utoa@n
 10934  00DAD0  C002  F037         	movff	?___lodiv+1,utoa@n+1
 10935  00DAD4  C003  F038         	movff	?___lodiv+2,utoa@n+2
 10936  00DAD8  C004  F039         	movff	?___lodiv+3,utoa@n+3
 10937  00DADC  C005  F03A         	movff	?___lodiv+4,utoa@n+4
 10938  00DAE0  C006  F03B         	movff	?___lodiv+5,utoa@n+5
 10939  00DAE4  C007  F03C         	movff	?___lodiv+6,utoa@n+6
 10940  00DAE8  C008  F03D         	movff	?___lodiv+7,utoa@n+7
 10941  00DAEC                     l4395:
 10942                           
 10943                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10944  00DAEC  503E               	movf	utoa@i,w,c
 10945  00DAEE  103F               	iorwf	utoa@i+1,w,c
 10946  00DAF0  B4D8               	btfsc	status,2,c
 10947  00DAF2  D01B               	goto	u3450
 10948  00DAF4  5036               	movf	utoa@n,w,c
 10949  00DAF6  1037               	iorwf	utoa@n+1,w,c
 10950  00DAF8  1038               	iorwf	utoa@n+2,w,c
 10951  00DAFA  1039               	iorwf	utoa@n+3,w,c
 10952  00DAFC  103A               	iorwf	utoa@n+4,w,c
 10953  00DAFE  103B               	iorwf	utoa@n+5,w,c
 10954  00DB00  103C               	iorwf	utoa@n+6,w,c
 10955  00DB02  103D               	iorwf	utoa@n+7,w,c
 10956  00DB04  A4D8               	btfss	status,2,c
 10957  00DB06  D77C               	goto	l4385
 10958  00DB08  BE33               	btfsc	utoa@p+1,7,c
 10959  00DB0A  D005               	goto	u3430
 10960  00DB0C  5033               	movf	utoa@p+1,w,c
 10961  00DB0E  E102               	bnz	u3431
 10962  00DB10  0432               	decf	utoa@p,w,c
 10963  00DB12  B0D8               	btfsc	status,0,c
 10964  00DB14                     u3431:
 10965  00DB14  D775               	goto	l4385
 10966  00DB16                     u3430:
 10967  00DB16  BE35               	btfsc	utoa@w+1,7,c
 10968  00DB18  D008               	goto	u3450
 10969  00DB1A  5035               	movf	utoa@w+1,w,c
 10970  00DB1C  E103               	bnz	u3440
 10971  00DB1E  0434               	decf	utoa@w,w,c
 10972  00DB20  A0D8               	btfss	status,0,c
 10973  00DB22  D003               	goto	u3450
 10974  00DB24                     u3440:
 10975  00DB24  0100               	movlb	0	; () banked
 10976  00DB26  B3FB               	btfsc	_flags& (0+255),1,b
 10977  00DB28  D76B               	goto	l4385
 10978  00DB2A                     u3450:
 10979                           
 10980                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
 10981  00DB2A  C020  F015         	movff	utoa@fp,pad@fp
 10982  00DB2E  C021  F016         	movff	utoa@fp+1,pad@fp+1
 10983  00DB32  0E1C               	movlw	low _dbuf
 10984  00DB34  243E               	addwf	utoa@i,w,c
 10985  00DB36  6E17               	movwf	pad@buf,c
 10986  00DB38  0E01               	movlw	high _dbuf
 10987  00DB3A  203F               	addwfc	utoa@i+1,w,c
 10988  00DB3C  6E18               	movwf	pad@buf+1,c
 10989  00DB3E  C034  F019         	movff	utoa@w,pad@p
 10990  00DB42  C035  F01A         	movff	utoa@w+1,pad@p+1
 10991  00DB46  EC64  F065         	call	_pad	;wreg free
 10992  00DB4A  C015  F020         	movff	?_pad,?_utoa
 10993  00DB4E  C016  F021         	movff	?_pad+1,?_utoa+1
 10994  00DB52  0012               	return		;funcret
 10995  00DB54                     __end_of_utoa:
 10996                           	opt callstack 0
 10997                           
 10998 ;; *************** function _pad *****************
 10999 ;; Defined at:
 11000 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
 11003 ;;		 -> NULL(0), 
 11004 ;;  buf             2   22[COMRAM] PTR unsigned char 
 11005 ;;		 -> dbuf(32), 
 11006 ;;  p               2   24[COMRAM] int 
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;  w               2   29[COMRAM] int 
 11009 ;;  i               2   27[COMRAM] int 
 11010 ;; Return value:  Size  Location     Type
 11011 ;;                  2   20[COMRAM] int 
 11012 ;; Registers used:
 11013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11019 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11022 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;Total ram usage:       11 bytes
 11024 ;; Hardware stack levels used:    1
 11025 ;; Hardware stack levels required when called:    6
 11026 ;; This function calls:
 11027 ;;		_fputc
 11028 ;;		_fputs
 11029 ;;		_strlen
 11030 ;; This function is called by:
 11031 ;;		_utoa
 11032 ;;		_xtoa
 11033 ;; This function uses a non-reentrant model
 11034 ;;
 11035                           
 11036                           	psect	text33
 11037  00CAC8                     __ptext33:
 11038                           	opt callstack 0
 11039  00CAC8                     _pad:
 11040                           	opt callstack 19
 11041                           
 11042                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 11043                           
 11044                           ;incstack = 0
 11045  00CAC8  0100               	movlb	0	; () banked
 11046  00CACA  A1FB               	btfss	_flags& (0+255),0,b
 11047  00CACC  D00A               	goto	l4277
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 11051  00CACE  C017  F00E         	movff	pad@buf,fputs@s
 11052  00CAD2  C018  F00F         	movff	pad@buf+1,fputs@s+1
 11053  00CAD6  C015  F010         	movff	pad@fp,fputs@fp
 11054  00CADA  C016  F011         	movff	pad@fp+1,fputs@fp+1
 11055  00CADE  EC1E  F063         	call	_fputs	;wreg free
 11056  00CAE2                     l4277:
 11057                           
 11058                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 11059  00CAE2  BE1A               	btfsc	pad@p+1,7,c
 11060  00CAE4  D005               	goto	l4281
 11061  00CAE6  C019  F01E         	movff	pad@p,pad@w
 11062  00CAEA  C01A  F01F         	movff	pad@p+1,pad@w+1
 11063  00CAEE  D004               	goto	l598
 11064  00CAF0                     l4281:
 11065  00CAF0  0E00               	movlw	0
 11066  00CAF2  6E1F               	movwf	pad@w+1,c
 11067  00CAF4  0E00               	movlw	0
 11068  00CAF6  6E1E               	movwf	pad@w,c
 11069  00CAF8                     l598:
 11070                           
 11071                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 11072  00CAF8  0E00               	movlw	0
 11073  00CAFA  6E1D               	movwf	pad@i+1,c
 11074  00CAFC  0E00               	movlw	0
 11075  00CAFE  6E1C               	movwf	pad@i,c
 11076                           
 11077                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 11078  00CB00  D00C               	goto	l4287
 11079  00CB02                     l4283:
 11080                           
 11081                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 11082  00CB02  0E00               	movlw	0
 11083  00CB04  6E06               	movwf	fputc@c+1,c
 11084  00CB06  0E20               	movlw	32
 11085  00CB08  6E05               	movwf	fputc@c,c
 11086  00CB0A  C015  F007         	movff	pad@fp,fputc@fp
 11087  00CB0E  C016  F008         	movff	pad@fp+1,fputc@fp+1
 11088  00CB12  EC73  F064         	call	_fputc	;wreg free
 11089                           
 11090                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 11091  00CB16  4A1C               	infsnz	pad@i,f,c
 11092  00CB18  2A1D               	incf	pad@i+1,f,c
 11093  00CB1A                     l4287:
 11094                           
 11095                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 11096  00CB1A  501E               	movf	pad@w,w,c
 11097  00CB1C  5C1C               	subwf	pad@i,w,c
 11098  00CB1E  501D               	movf	pad@i+1,w,c
 11099  00CB20  0A80               	xorlw	128
 11100  00CB22  6E1B               	movwf	??_pad& (0+255),c
 11101  00CB24  501F               	movf	pad@w+1,w,c
 11102  00CB26  0A80               	xorlw	128
 11103  00CB28  581B               	subwfb	??_pad& (0+255),w,c
 11104  00CB2A  A0D8               	btfss	status,0,c
 11105  00CB2C  D7EA               	goto	l4283
 11106                           
 11107                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 11108  00CB2E  0100               	movlb	0	; () banked
 11109  00CB30  B1FB               	btfsc	_flags& (0+255),0,b
 11110  00CB32  D00A               	goto	l4291
 11111                           
 11112                           ; BSR set to: 0
 11113                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 11114  00CB34  C017  F00E         	movff	pad@buf,fputs@s
 11115  00CB38  C018  F00F         	movff	pad@buf+1,fputs@s+1
 11116  00CB3C  C015  F010         	movff	pad@fp,fputs@fp
 11117  00CB40  C016  F011         	movff	pad@fp+1,fputs@fp+1
 11118  00CB44  EC1E  F063         	call	_fputs	;wreg free
 11119  00CB48                     l4291:
 11120                           
 11121                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 11122  00CB48  C017  F001         	movff	pad@buf,strlen@s
 11123  00CB4C  C018  F002         	movff	pad@buf+1,strlen@s+1
 11124  00CB50  EC90  F062         	call	_strlen	;wreg free
 11125  00CB54  501E               	movf	pad@w,w,c
 11126  00CB56  2401               	addwf	?_strlen,w,c
 11127  00CB58  6E15               	movwf	?_pad,c
 11128  00CB5A  501F               	movf	pad@w+1,w,c
 11129  00CB5C  2002               	addwfc	?_strlen+1,w,c
 11130  00CB5E  6E16               	movwf	?_pad+1,c
 11131  00CB60  0012               	return		;funcret
 11132  00CB62                     __end_of_pad:
 11133                           	opt callstack 0
 11134                           
 11135 ;; *************** function _strlen *****************
 11136 ;; Defined at:
 11137 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;  s               2    0[COMRAM] PTR const unsigned char 
 11140 ;;		 -> dbuf(32), 
 11141 ;; Auto vars:     Size  Location     Type
 11142 ;;  a               2    2[COMRAM] PTR const unsigned char 
 11143 ;;		 -> dbuf(32), 
 11144 ;; Return value:  Size  Location     Type
 11145 ;;                  2    0[COMRAM] unsigned int 
 11146 ;; Registers used:
 11147 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11148 ;; Tracked objects:
 11149 ;;		On entry : 0/0
 11150 ;;		On exit  : 0/0
 11151 ;;		Unchanged: 0/0
 11152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11153 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11156 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11157 ;;Total ram usage:        4 bytes
 11158 ;; Hardware stack levels used:    1
 11159 ;; This function calls:
 11160 ;;		Nothing
 11161 ;; This function is called by:
 11162 ;;		_pad
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text34
 11167  00C520                     __ptext34:
 11168                           	opt callstack 0
 11169  00C520                     _strlen:
 11170                           	opt callstack 24
 11171                           
 11172                           ;incstack = 0
 11173  00C520  C001  F003         	movff	strlen@s,strlen@a
 11174  00C524  C002  F004         	movff	strlen@s+1,strlen@a+1
 11175  00C528  D002               	goto	l4263
 11176  00C52A                     l4261:
 11177  00C52A  4A01               	infsnz	strlen@s,f,c
 11178  00C52C  2A02               	incf	strlen@s+1,f,c
 11179  00C52E                     l4263:
 11180  00C52E  C001  FFD9         	movff	strlen@s,fsr2l
 11181  00C532  C002  FFDA         	movff	strlen@s+1,fsr2h
 11182  00C536  50DF               	movf	indf2,w,c
 11183  00C538  A4D8               	btfss	status,2,c
 11184  00C53A  D7F7               	goto	l4261
 11185  00C53C  5003               	movf	strlen@a,w,c
 11186  00C53E  5C01               	subwf	strlen@s,w,c
 11187  00C540  6E01               	movwf	?_strlen,c
 11188  00C542  5004               	movf	strlen@a+1,w,c
 11189  00C544  5802               	subwfb	strlen@s+1,w,c
 11190  00C546  6E02               	movwf	?_strlen+1,c
 11191  00C548  0012               	return		;funcret
 11192  00C54A                     __end_of_strlen:
 11193                           	opt callstack 0
 11194                           
 11195 ;; *************** function _fputs *****************
 11196 ;; Defined at:
 11197 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;  s               2   13[COMRAM] PTR const unsigned char 
 11200 ;;		 -> dbuf(32), 
 11201 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
 11202 ;;		 -> NULL(0), 
 11203 ;; Auto vars:     Size  Location     Type
 11204 ;;  i               2   18[COMRAM] int 
 11205 ;;  c               1   17[COMRAM] unsigned char 
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  2   13[COMRAM] int 
 11208 ;; Registers used:
 11209 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11215 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11218 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11219 ;;Total ram usage:        7 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    5
 11222 ;; This function calls:
 11223 ;;		_fputc
 11224 ;; This function is called by:
 11225 ;;		_pad
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           	psect	text35
 11230  00C63C                     __ptext35:
 11231                           	opt callstack 0
 11232  00C63C                     _fputs:
 11233                           	opt callstack 19
 11234                           
 11235                           ;incstack = 0
 11236  00C63C  0E00               	movlw	0
 11237  00C63E  6E14               	movwf	fputs@i+1,c
 11238  00C640  0E00               	movlw	0
 11239  00C642  6E13               	movwf	fputs@i,c
 11240  00C644  D00B               	goto	l4257
 11241  00C646                     l4253:
 11242  00C646  C012  F005         	movff	fputs@c,fputc@c
 11243  00C64A  6A06               	clrf	fputc@c+1,c
 11244  00C64C  C010  F007         	movff	fputs@fp,fputc@fp
 11245  00C650  C011  F008         	movff	fputs@fp+1,fputc@fp+1
 11246  00C654  EC73  F064         	call	_fputc	;wreg free
 11247  00C658  4A13               	infsnz	fputs@i,f,c
 11248  00C65A  2A14               	incf	fputs@i+1,f,c
 11249  00C65C                     l4257:
 11250  00C65C  5013               	movf	fputs@i,w,c
 11251  00C65E  240E               	addwf	fputs@s,w,c
 11252  00C660  6ED9               	movwf	fsr2l,c
 11253  00C662  5014               	movf	fputs@i+1,w,c
 11254  00C664  200F               	addwfc	fputs@s+1,w,c
 11255  00C666  6EDA               	movwf	fsr2h,c
 11256  00C668  50DF               	movf	indf2,w,c
 11257  00C66A  6E12               	movwf	fputs@c,c
 11258  00C66C  5012               	movf	fputs@c,w,c
 11259  00C66E  B4D8               	btfsc	status,2,c
 11260  00C670  0012               	return	
 11261  00C672  D7E9               	goto	l4253
 11262  00C674                     __end_of_fputs:
 11263                           	opt callstack 0
 11264                           
 11265 ;; *************** function _fputc *****************
 11266 ;; Defined at:
 11267 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;  c               2    4[COMRAM] int 
 11270 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
 11271 ;;		 -> NULL(0), 
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;		None
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  2    4[COMRAM] int 
 11276 ;; Registers used:
 11277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11285 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11286 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11287 ;;Total ram usage:        9 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    4
 11290 ;; This function calls:
 11291 ;;		_putch
 11292 ;; This function is called by:
 11293 ;;		_pad
 11294 ;;		_vfpfcnvrt
 11295 ;;		_fputs
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299                           	psect	text36
 11300  00C8E6                     __ptext36:
 11301                           	opt callstack 0
 11302  00C8E6                     _fputc:
 11303                           	opt callstack 19
 11304                           
 11305                           ;incstack = 0
 11306  00C8E6  5007               	movf	fputc@fp,w,c
 11307  00C8E8  1008               	iorwf	fputc@fp+1,w,c
 11308  00C8EA  B4D8               	btfsc	status,2,c
 11309  00C8EC  D004               	goto	u3100
 11310  00C8EE  5007               	movf	fputc@fp,w,c
 11311  00C8F0  1008               	iorwf	fputc@fp+1,w,c
 11312  00C8F2  A4D8               	btfss	status,2,c
 11313  00C8F4  D004               	goto	l4243
 11314  00C8F6                     u3100:
 11315  00C8F6  5005               	movf	fputc@c,w,c
 11316  00C8F8  ECF0  F061         	call	_putch
 11317  00C8FC  0012               	return	
 11318  00C8FE                     l4243:
 11319  00C8FE  EE20 F004          	lfsr	2,4
 11320  00C902  5007               	movf	fputc@fp,w,c
 11321  00C904  26D9               	addwf	fsr2l,f,c
 11322  00C906  5008               	movf	fputc@fp+1,w,c
 11323  00C908  22DA               	addwfc	fsr2h,f,c
 11324  00C90A  50DE               	movf	postinc2,w,c
 11325  00C90C  10DE               	iorwf	postinc2,w,c
 11326  00C90E  B4D8               	btfsc	status,2,c
 11327  00C910  D016               	goto	u3120
 11328  00C912  EE20 F004          	lfsr	2,4
 11329  00C916  5007               	movf	fputc@fp,w,c
 11330  00C918  26D9               	addwf	fsr2l,f,c
 11331  00C91A  5008               	movf	fputc@fp+1,w,c
 11332  00C91C  22DA               	addwfc	fsr2h,f,c
 11333  00C91E  EE10 F002          	lfsr	1,2
 11334  00C922  5007               	movf	fputc@fp,w,c
 11335  00C924  26E1               	addwf	fsr1l,f,c
 11336  00C926  5008               	movf	fputc@fp+1,w,c
 11337  00C928  22E2               	addwfc	fsr1h,f,c
 11338  00C92A  50DE               	movf	postinc2,w,c
 11339  00C92C  5CE6               	subwf	postinc1,w,c
 11340  00C92E  50E6               	movf	postinc1,w,c
 11341  00C930  0A80               	xorlw	128
 11342  00C932  6E0D               	movwf	(??_fputc+4)& (0+255),c
 11343  00C934  50DE               	movf	postinc2,w,c
 11344  00C936  0A80               	xorlw	128
 11345  00C938  580D               	subwfb	(??_fputc+4)& (0+255),w,c
 11346  00C93A  B0D8               	btfsc	status,0,c
 11347  00C93C  0012               	return	
 11348  00C93E                     u3120:
 11349  00C93E  EE20 F002          	lfsr	2,2
 11350  00C942  5007               	movf	fputc@fp,w,c
 11351  00C944  26D9               	addwf	fsr2l,f,c
 11352  00C946  5008               	movf	fputc@fp+1,w,c
 11353  00C948  22DA               	addwfc	fsr2h,f,c
 11354  00C94A  2ADE               	incf	postinc2,f,c
 11355  00C94C  0E00               	movlw	0
 11356  00C94E  22DD               	addwfc	postdec2,f,c
 11357  00C950  0012               	return		;funcret
 11358  00C952                     __end_of_fputc:
 11359                           	opt callstack 0
 11360                           
 11361 ;; *************** function _putch *****************
 11362 ;; Defined at:
 11363 ;;		line 102 in file "lcd.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;  data            1    wreg     unsigned char 
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;  data            1    3[COMRAM] unsigned char 
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      void 
 11370 ;; Registers used:
 11371 ;;		wreg, status,2, status,0, cstack
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;Total ram usage:        1 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    3
 11384 ;; This function calls:
 11385 ;;		_send_byte
 11386 ;; This function is called by:
 11387 ;;		_fputc
 11388 ;; This function uses a non-reentrant model
 11389 ;;
 11390                           
 11391                           	psect	text37
 11392  00C3E0                     __ptext37:
 11393                           	opt callstack 0
 11394  00C3E0                     _putch:
 11395                           	opt callstack 19
 11396                           
 11397                           ;incstack = 0
 11398                           ;putch@data stored from wreg
 11399  00C3E0  6E04               	movwf	putch@data,c
 11400                           
 11401                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
 11402  00C3E2  848C               	bsf	3980,2,c	;volatile
 11403                           
 11404                           ;lcd.c: 104:     send_byte((unsigned char)data);
 11405  00C3E4  5004               	movf	putch@data,w,c
 11406  00C3E6  ECF6  F061         	call	_send_byte
 11407  00C3EA  0012               	return		;funcret
 11408  00C3EC                     __end_of_putch:
 11409                           	opt callstack 0
 11410                           
 11411 ;; *************** function ___lomod *****************
 11412 ;; Defined at:
 11413 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
 11414 ;; Parameters:    Size  Location     Type
 11415 ;;  dividend        8    0[COMRAM] unsigned long long 
 11416 ;;  divisor         8    8[COMRAM] unsigned long long 
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;  counter         1   16[COMRAM] unsigned char 
 11419 ;; Return value:  Size  Location     Type
 11420 ;;                  8    0[COMRAM] unsigned long long 
 11421 ;; Registers used:
 11422 ;;		wreg, status,2, status,0
 11423 ;; Tracked objects:
 11424 ;;		On entry : 0/0
 11425 ;;		On exit  : 0/0
 11426 ;;		Unchanged: 0/0
 11427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11428 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11431 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11432 ;;Total ram usage:       17 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; This function calls:
 11435 ;;		Nothing
 11436 ;; This function is called by:
 11437 ;;		_utoa
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           	psect	text38
 11442  00CC0C                     __ptext38:
 11443                           	opt callstack 0
 11444  00CC0C                     ___lomod:
 11445                           	opt callstack 25
 11446                           
 11447                           ;incstack = 0
 11448  00CC0C  5009               	movf	___lomod@divisor,w,c
 11449  00CC0E  100A               	iorwf	___lomod@divisor+1,w,c
 11450  00CC10  100B               	iorwf	___lomod@divisor+2,w,c
 11451  00CC12  100C               	iorwf	___lomod@divisor+3,w,c
 11452  00CC14  100D               	iorwf	___lomod@divisor+4,w,c
 11453  00CC16  100E               	iorwf	___lomod@divisor+5,w,c
 11454  00CC18  100F               	iorwf	___lomod@divisor+6,w,c
 11455  00CC1A  1010               	iorwf	___lomod@divisor+7,w,c
 11456  00CC1C  B4D8               	btfsc	status,2,c
 11457  00CC1E  D03C               	goto	l1140
 11458  00CC20  0E01               	movlw	1
 11459  00CC22  6E11               	movwf	___lomod@counter,c
 11460  00CC24  D00A               	goto	l4351
 11461  00CC26                     l4349:
 11462  00CC26  90D8               	bcf	status,0,c
 11463  00CC28  3609               	rlcf	___lomod@divisor,f,c
 11464  00CC2A  360A               	rlcf	___lomod@divisor+1,f,c
 11465  00CC2C  360B               	rlcf	___lomod@divisor+2,f,c
 11466  00CC2E  360C               	rlcf	___lomod@divisor+3,f,c
 11467  00CC30  360D               	rlcf	___lomod@divisor+4,f,c
 11468  00CC32  360E               	rlcf	___lomod@divisor+5,f,c
 11469  00CC34  360F               	rlcf	___lomod@divisor+6,f,c
 11470  00CC36  3610               	rlcf	___lomod@divisor+7,f,c
 11471  00CC38  2A11               	incf	___lomod@counter,f,c
 11472  00CC3A                     l4351:
 11473  00CC3A  AE10               	btfss	___lomod@divisor+7,7,c
 11474  00CC3C  D7F4               	goto	l4349
 11475  00CC3E                     u3350:
 11476  00CC3E  5009               	movf	___lomod@divisor,w,c
 11477  00CC40  5C01               	subwf	___lomod@dividend,w,c
 11478  00CC42  500A               	movf	___lomod@divisor+1,w,c
 11479  00CC44  5802               	subwfb	___lomod@dividend+1,w,c
 11480  00CC46  500B               	movf	___lomod@divisor+2,w,c
 11481  00CC48  5803               	subwfb	___lomod@dividend+2,w,c
 11482  00CC4A  500C               	movf	___lomod@divisor+3,w,c
 11483  00CC4C  5804               	subwfb	___lomod@dividend+3,w,c
 11484  00CC4E  500D               	movf	___lomod@divisor+4,w,c
 11485  00CC50  5805               	subwfb	___lomod@dividend+4,w,c
 11486  00CC52  500E               	movf	___lomod@divisor+5,w,c
 11487  00CC54  5806               	subwfb	___lomod@dividend+5,w,c
 11488  00CC56  500F               	movf	___lomod@divisor+6,w,c
 11489  00CC58  5807               	subwfb	___lomod@dividend+6,w,c
 11490  00CC5A  5010               	movf	___lomod@divisor+7,w,c
 11491  00CC5C  5808               	subwfb	___lomod@dividend+7,w,c
 11492  00CC5E  A0D8               	btfss	status,0,c
 11493  00CC60  D010               	goto	l4357
 11494  00CC62  5009               	movf	___lomod@divisor,w,c
 11495  00CC64  5E01               	subwf	___lomod@dividend,f,c
 11496  00CC66  500A               	movf	___lomod@divisor+1,w,c
 11497  00CC68  5A02               	subwfb	___lomod@dividend+1,f,c
 11498  00CC6A  500B               	movf	___lomod@divisor+2,w,c
 11499  00CC6C  5A03               	subwfb	___lomod@dividend+2,f,c
 11500  00CC6E  500C               	movf	___lomod@divisor+3,w,c
 11501  00CC70  5A04               	subwfb	___lomod@dividend+3,f,c
 11502  00CC72  500D               	movf	___lomod@divisor+4,w,c
 11503  00CC74  5A05               	subwfb	___lomod@dividend+4,f,c
 11504  00CC76  500E               	movf	___lomod@divisor+5,w,c
 11505  00CC78  5A06               	subwfb	___lomod@dividend+5,f,c
 11506  00CC7A  500F               	movf	___lomod@divisor+6,w,c
 11507  00CC7C  5A07               	subwfb	___lomod@dividend+6,f,c
 11508  00CC7E  5010               	movf	___lomod@divisor+7,w,c
 11509  00CC80  5A08               	subwfb	___lomod@dividend+7,f,c
 11510  00CC82                     l4357:
 11511  00CC82  90D8               	bcf	status,0,c
 11512  00CC84  3210               	rrcf	___lomod@divisor+7,f,c
 11513  00CC86  320F               	rrcf	___lomod@divisor+6,f,c
 11514  00CC88  320E               	rrcf	___lomod@divisor+5,f,c
 11515  00CC8A  320D               	rrcf	___lomod@divisor+4,f,c
 11516  00CC8C  320C               	rrcf	___lomod@divisor+3,f,c
 11517  00CC8E  320B               	rrcf	___lomod@divisor+2,f,c
 11518  00CC90  320A               	rrcf	___lomod@divisor+1,f,c
 11519  00CC92  3209               	rrcf	___lomod@divisor,f,c
 11520  00CC94  2E11               	decfsz	___lomod@counter,f,c
 11521  00CC96  D7D3               	goto	u3350
 11522  00CC98                     l1140:
 11523  00CC98  C001  F001         	movff	___lomod@dividend,?___lomod
 11524  00CC9C  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
 11525  00CCA0  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
 11526  00CCA4  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
 11527  00CCA8  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
 11528  00CCAC  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
 11529  00CCB0  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
 11530  00CCB4  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
 11531  00CCB8  0012               	return		;funcret
 11532  00CCBA                     __end_of___lomod:
 11533                           	opt callstack 0
 11534                           
 11535 ;; *************** function ___lodiv *****************
 11536 ;; Defined at:
 11537 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;  dividend        8    0[COMRAM] unsigned long long 
 11540 ;;  divisor         8    8[COMRAM] unsigned long long 
 11541 ;; Auto vars:     Size  Location     Type
 11542 ;;  quotient        8   16[COMRAM] unsigned long long 
 11543 ;;  counter         1   24[COMRAM] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  8    0[COMRAM] unsigned long long 
 11546 ;; Registers used:
 11547 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11553 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;Total ram usage:       25 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; This function calls:
 11560 ;;		Nothing
 11561 ;; This function is called by:
 11562 ;;		_utoa
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           	psect	text39
 11567  00CE3C                     __ptext39:
 11568                           	opt callstack 0
 11569  00CE3C                     ___lodiv:
 11570                           	opt callstack 25
 11571                           
 11572                           ;incstack = 0
 11573  00CE3C  EE20  F011         	lfsr	2,___lodiv@quotient
 11574  00CE40  0E07               	movlw	7
 11575  00CE42                     u3301:
 11576  00CE42  6ADE               	clrf	postinc2,c
 11577  00CE44  06E8               	decf	wreg,f,c
 11578  00CE46  E2FD               	bc	u3301
 11579  00CE48  5009               	movf	___lodiv@divisor,w,c
 11580  00CE4A  100A               	iorwf	___lodiv@divisor+1,w,c
 11581  00CE4C  100B               	iorwf	___lodiv@divisor+2,w,c
 11582  00CE4E  100C               	iorwf	___lodiv@divisor+3,w,c
 11583  00CE50  100D               	iorwf	___lodiv@divisor+4,w,c
 11584  00CE52  100E               	iorwf	___lodiv@divisor+5,w,c
 11585  00CE54  100F               	iorwf	___lodiv@divisor+6,w,c
 11586  00CE56  1010               	iorwf	___lodiv@divisor+7,w,c
 11587  00CE58  B4D8               	btfsc	status,2,c
 11588  00CE5A  D046               	goto	l1130
 11589  00CE5C  0E01               	movlw	1
 11590  00CE5E  6E19               	movwf	___lodiv@counter,c
 11591  00CE60  D00A               	goto	l4331
 11592  00CE62                     l4329:
 11593  00CE62  90D8               	bcf	status,0,c
 11594  00CE64  3609               	rlcf	___lodiv@divisor,f,c
 11595  00CE66  360A               	rlcf	___lodiv@divisor+1,f,c
 11596  00CE68  360B               	rlcf	___lodiv@divisor+2,f,c
 11597  00CE6A  360C               	rlcf	___lodiv@divisor+3,f,c
 11598  00CE6C  360D               	rlcf	___lodiv@divisor+4,f,c
 11599  00CE6E  360E               	rlcf	___lodiv@divisor+5,f,c
 11600  00CE70  360F               	rlcf	___lodiv@divisor+6,f,c
 11601  00CE72  3610               	rlcf	___lodiv@divisor+7,f,c
 11602  00CE74  2A19               	incf	___lodiv@counter,f,c
 11603  00CE76                     l4331:
 11604  00CE76  AE10               	btfss	___lodiv@divisor+7,7,c
 11605  00CE78  D7F4               	goto	l4329
 11606  00CE7A                     u3320:
 11607  00CE7A  90D8               	bcf	status,0,c
 11608  00CE7C  3611               	rlcf	___lodiv@quotient,f,c
 11609  00CE7E  3612               	rlcf	___lodiv@quotient+1,f,c
 11610  00CE80  3613               	rlcf	___lodiv@quotient+2,f,c
 11611  00CE82  3614               	rlcf	___lodiv@quotient+3,f,c
 11612  00CE84  3615               	rlcf	___lodiv@quotient+4,f,c
 11613  00CE86  3616               	rlcf	___lodiv@quotient+5,f,c
 11614  00CE88  3617               	rlcf	___lodiv@quotient+6,f,c
 11615  00CE8A  3618               	rlcf	___lodiv@quotient+7,f,c
 11616  00CE8C  5009               	movf	___lodiv@divisor,w,c
 11617  00CE8E  5C01               	subwf	___lodiv@dividend,w,c
 11618  00CE90  500A               	movf	___lodiv@divisor+1,w,c
 11619  00CE92  5802               	subwfb	___lodiv@dividend+1,w,c
 11620  00CE94  500B               	movf	___lodiv@divisor+2,w,c
 11621  00CE96  5803               	subwfb	___lodiv@dividend+2,w,c
 11622  00CE98  500C               	movf	___lodiv@divisor+3,w,c
 11623  00CE9A  5804               	subwfb	___lodiv@dividend+3,w,c
 11624  00CE9C  500D               	movf	___lodiv@divisor+4,w,c
 11625  00CE9E  5805               	subwfb	___lodiv@dividend+4,w,c
 11626  00CEA0  500E               	movf	___lodiv@divisor+5,w,c
 11627  00CEA2  5806               	subwfb	___lodiv@dividend+5,w,c
 11628  00CEA4  500F               	movf	___lodiv@divisor+6,w,c
 11629  00CEA6  5807               	subwfb	___lodiv@dividend+6,w,c
 11630  00CEA8  5010               	movf	___lodiv@divisor+7,w,c
 11631  00CEAA  5808               	subwfb	___lodiv@dividend+7,w,c
 11632  00CEAC  A0D8               	btfss	status,0,c
 11633  00CEAE  D011               	goto	l4341
 11634  00CEB0  5009               	movf	___lodiv@divisor,w,c
 11635  00CEB2  5E01               	subwf	___lodiv@dividend,f,c
 11636  00CEB4  500A               	movf	___lodiv@divisor+1,w,c
 11637  00CEB6  5A02               	subwfb	___lodiv@dividend+1,f,c
 11638  00CEB8  500B               	movf	___lodiv@divisor+2,w,c
 11639  00CEBA  5A03               	subwfb	___lodiv@dividend+2,f,c
 11640  00CEBC  500C               	movf	___lodiv@divisor+3,w,c
 11641  00CEBE  5A04               	subwfb	___lodiv@dividend+3,f,c
 11642  00CEC0  500D               	movf	___lodiv@divisor+4,w,c
 11643  00CEC2  5A05               	subwfb	___lodiv@dividend+4,f,c
 11644  00CEC4  500E               	movf	___lodiv@divisor+5,w,c
 11645  00CEC6  5A06               	subwfb	___lodiv@dividend+5,f,c
 11646  00CEC8  500F               	movf	___lodiv@divisor+6,w,c
 11647  00CECA  5A07               	subwfb	___lodiv@dividend+6,f,c
 11648  00CECC  5010               	movf	___lodiv@divisor+7,w,c
 11649  00CECE  5A08               	subwfb	___lodiv@dividend+7,f,c
 11650  00CED0  8011               	bsf	___lodiv@quotient,0,c
 11651  00CED2                     l4341:
 11652  00CED2  90D8               	bcf	status,0,c
 11653  00CED4  3210               	rrcf	___lodiv@divisor+7,f,c
 11654  00CED6  320F               	rrcf	___lodiv@divisor+6,f,c
 11655  00CED8  320E               	rrcf	___lodiv@divisor+5,f,c
 11656  00CEDA  320D               	rrcf	___lodiv@divisor+4,f,c
 11657  00CEDC  320C               	rrcf	___lodiv@divisor+3,f,c
 11658  00CEDE  320B               	rrcf	___lodiv@divisor+2,f,c
 11659  00CEE0  320A               	rrcf	___lodiv@divisor+1,f,c
 11660  00CEE2  3209               	rrcf	___lodiv@divisor,f,c
 11661  00CEE4  2E19               	decfsz	___lodiv@counter,f,c
 11662  00CEE6  D7C9               	goto	u3320
 11663  00CEE8                     l1130:
 11664  00CEE8  C011  F001         	movff	___lodiv@quotient,?___lodiv
 11665  00CEEC  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
 11666  00CEF0  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
 11667  00CEF4  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
 11668  00CEF8  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
 11669  00CEFC  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
 11670  00CF00  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
 11671  00CF04  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
 11672  00CF08  0012               	return		;funcret
 11673  00CF0A                     __end_of___lodiv:
 11674                           	opt callstack 0
 11675                           
 11676 ;; *************** function _strncmp *****************
 11677 ;; Defined at:
 11678 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strncmp.c"
 11679 ;; Parameters:    Size  Location     Type
 11680 ;;  _l              2    0[COMRAM] PTR const unsigned char 
 11681 ;;		 -> STR_56(14), STR_55(15), STR_54(8), STR_53(13), 
 11682 ;;		 -> STR_52(15), STR_51(3), STR_50(17), STR_49(15), 
 11683 ;;		 -> STR_48(11), STR_47(13), STR_46(12), STR_45(13), 
 11684 ;;		 -> STR_44(16), STR_43(14), STR_42(15), STR_41(8), 
 11685 ;;		 -> STR_40(13), STR_39(15), STR_38(3), STR_37(17), 
 11686 ;;		 -> STR_36(15), STR_35(11), STR_34(13), STR_33(12), 
 11687 ;;		 -> STR_32(13), STR_31(16), STR_30(14), STR_29(16), 
 11688 ;;		 -> STR_28(6), STR_27(14), STR_26(9), STR_25(16), 
 11689 ;;		 -> STR_24(11), STR_23(14), STR_22(17), STR_21(19), 
 11690 ;;		 -> STR_20(19), STR_19(9), STR_18(8), STR_17(10), 
 11691 ;;		 -> STR_16(14), STR_15(14), STR_14(3), STR_13(2), 
 11692 ;;		 -> STR_12(12), STR_11(14), STR_10(13), STR_9(13), 
 11693 ;;		 -> STR_8(15), STR_7(9), STR_6(11), STR_5(20), 
 11694 ;;		 -> STR_4(15), STR_3(17), STR_2(17), STR_1(9), 
 11695 ;;  _r              2    2[COMRAM] PTR const unsigned char 
 11696 ;;		 -> STR_68(3), STR_64(3), STR_59(3), 
 11697 ;;  n               2    4[COMRAM] unsigned int 
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;  r               2    9[COMRAM] PTR const unsigned char 
 11700 ;;		 -> STR_68(3), STR_64(3), STR_59(3), 
 11701 ;;  l               2    7[COMRAM] PTR const unsigned char 
 11702 ;;		 -> STR_56(14), STR_55(15), STR_54(8), STR_53(13), 
 11703 ;;		 -> STR_52(15), STR_51(3), STR_50(17), STR_49(15), 
 11704 ;;		 -> STR_48(11), STR_47(13), STR_46(12), STR_45(13), 
 11705 ;;		 -> STR_44(16), STR_43(14), STR_42(15), STR_41(8), 
 11706 ;;		 -> STR_40(13), STR_39(15), STR_38(3), STR_37(17), 
 11707 ;;		 -> STR_36(15), STR_35(11), STR_34(13), STR_33(12), 
 11708 ;;		 -> STR_32(13), STR_31(16), STR_30(14), STR_29(16), 
 11709 ;;		 -> STR_28(6), STR_27(14), STR_26(9), STR_25(16), 
 11710 ;;		 -> STR_24(11), STR_23(14), STR_22(17), STR_21(19), 
 11711 ;;		 -> STR_20(19), STR_19(9), STR_18(8), STR_17(10), 
 11712 ;;		 -> STR_16(14), STR_15(14), STR_14(3), STR_13(2), 
 11713 ;;		 -> STR_12(12), STR_11(14), STR_10(13), STR_9(13), 
 11714 ;;		 -> STR_8(15), STR_7(9), STR_6(11), STR_5(20), 
 11715 ;;		 -> STR_4(15), STR_3(17), STR_2(17), STR_1(9), 
 11716 ;; Return value:  Size  Location     Type
 11717 ;;                  2    0[COMRAM] int 
 11718 ;; Registers used:
 11719 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11725 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11726 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11727 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11728 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11729 ;;Total ram usage:       11 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; This function calls:
 11732 ;;		Nothing
 11733 ;; This function is called by:
 11734 ;;		_vfpfcnvrt
 11735 ;; This function uses a non-reentrant model
 11736 ;;
 11737                           
 11738                           	psect	text40
 11739  00CB62                     __ptext40:
 11740                           	opt callstack 0
 11741  00CB62                     _strncmp:
 11742                           	opt callstack 26
 11743                           
 11744                           ;incstack = 0
 11745  00CB62  C001  F008         	movff	strncmp@_l,strncmp@l
 11746  00CB66  C002  F009         	movff	strncmp@_l+1,strncmp@l+1
 11747  00CB6A  C003  F00A         	movff	strncmp@_r,strncmp@r
 11748  00CB6E  C004  F00B         	movff	strncmp@_r+1,strncmp@r+1
 11749  00CB72  0605               	decf	strncmp@n,f,c
 11750  00CB74  A0D8               	btfss	status,0,c
 11751  00CB76  0606               	decf	strncmp@n+1,f,c
 11752  00CB78  2805               	incf	strncmp@n,w,c
 11753  00CB7A  E10F               	bnz	l4525
 11754  00CB7C  2806               	incf	strncmp@n+1,w,c
 11755  00CB7E  A4D8               	btfss	status,2,c
 11756  00CB80  D00C               	goto	l4525
 11757  00CB82  0E00               	movlw	0
 11758  00CB84  6E02               	movwf	?_strncmp+1,c
 11759  00CB86  0E00               	movlw	0
 11760  00CB88  6E01               	movwf	?_strncmp,c
 11761  00CB8A  0012               	return	
 11762  00CB8C                     l4523:
 11763  00CB8C  4A08               	infsnz	strncmp@l,f,c
 11764  00CB8E  2A09               	incf	strncmp@l+1,f,c
 11765  00CB90  4A0A               	infsnz	strncmp@r,f,c
 11766  00CB92  2A0B               	incf	strncmp@r+1,f,c
 11767  00CB94  0605               	decf	strncmp@n,f,c
 11768  00CB96  A0D8               	btfss	status,0,c
 11769  00CB98  0606               	decf	strncmp@n+1,f,c
 11770  00CB9A                     l4525:
 11771  00CB9A  C008  FFF6         	movff	strncmp@l,tblptrl
 11772  00CB9E  C009  FFF7         	movff	strncmp@l+1,tblptrh
 11773  00CBA2                     	if	0	;tblptru may be non-zero
 11774  00CBA2                     	endif
 11775  00CBA2                     	if	0	;tblptru may be non-zero
 11776  00CBA2                     	endif
 11777  00CBA2  0008               	tblrd		*
 11778  00CBA4  50F5               	movf	tablat,w,c
 11779  00CBA6  0900               	iorlw	0
 11780  00CBA8  B4D8               	btfsc	status,2,c
 11781  00CBAA  D01D               	goto	u3740
 11782  00CBAC  C00A  FFF6         	movff	strncmp@r,tblptrl
 11783  00CBB0  C00B  FFF7         	movff	strncmp@r+1,tblptrh
 11784  00CBB4                     	if	0	;tblptru may be non-zero
 11785  00CBB4                     	endif
 11786  00CBB4                     	if	0	;tblptru may be non-zero
 11787  00CBB4                     	endif
 11788  00CBB4  0008               	tblrd		*
 11789  00CBB6  50F5               	movf	tablat,w,c
 11790  00CBB8  0900               	iorlw	0
 11791  00CBBA  B4D8               	btfsc	status,2,c
 11792  00CBBC  D014               	goto	u3740
 11793  00CBBE  5005               	movf	strncmp@n,w,c
 11794  00CBC0  1006               	iorwf	strncmp@n+1,w,c
 11795  00CBC2  B4D8               	btfsc	status,2,c
 11796  00CBC4  D010               	goto	u3740
 11797  00CBC6  C008  FFF6         	movff	strncmp@l,tblptrl
 11798  00CBCA  C009  FFF7         	movff	strncmp@l+1,tblptrh
 11799  00CBCE                     	if	0	;tblptru may be non-zero
 11800  00CBCE                     	endif
 11801  00CBCE                     	if	0	;tblptru may be non-zero
 11802  00CBCE                     	endif
 11803  00CBCE  0008               	tblrd		*
 11804  00CBD0  CFF5 F007          	movff	tablat,??_strncmp
 11805  00CBD4  C00A  FFF6         	movff	strncmp@r,tblptrl
 11806  00CBD8  C00B  FFF7         	movff	strncmp@r+1,tblptrh
 11807  00CBDC                     	if	0	;tblptru may be non-zero
 11808  00CBDC                     	endif
 11809  00CBDC                     	if	0	;tblptru may be non-zero
 11810  00CBDC                     	endif
 11811  00CBDC  0008               	tblrd		*
 11812  00CBDE  50F5               	movf	tablat,w,c
 11813  00CBE0  1807               	xorwf	??_strncmp,w,c
 11814  00CBE2  B4D8               	btfsc	status,2,c
 11815  00CBE4  D7D3               	goto	l4523
 11816  00CBE6                     u3740:
 11817  00CBE6  C008  FFF6         	movff	strncmp@l,tblptrl
 11818  00CBEA  C009  FFF7         	movff	strncmp@l+1,tblptrh
 11819  00CBEE                     	if	0	;tblptru may be non-zero
 11820  00CBEE                     	endif
 11821  00CBEE                     	if	0	;tblptru may be non-zero
 11822  00CBEE                     	endif
 11823  00CBEE  0008               	tblrd		*
 11824  00CBF0  CFF5 F007          	movff	tablat,??_strncmp
 11825  00CBF4  C00A  FFF6         	movff	strncmp@r,tblptrl
 11826  00CBF8  C00B  FFF7         	movff	strncmp@r+1,tblptrh
 11827  00CBFC                     	if	0	;tblptru may be non-zero
 11828  00CBFC                     	endif
 11829  00CBFC                     	if	0	;tblptru may be non-zero
 11830  00CBFC                     	endif
 11831  00CBFC  0008               	tblrd		*
 11832  00CBFE  50F5               	movf	tablat,w,c
 11833  00CC00  5C07               	subwf	??_strncmp,w,c
 11834  00CC02  6E01               	movwf	?_strncmp,c
 11835  00CC04  6A02               	clrf	?_strncmp+1,c
 11836  00CC06  A0D8               	btfss	status,0,c
 11837  00CC08  0602               	decf	?_strncmp+1,f,c
 11838  00CC0A  0012               	return		;funcret
 11839  00CC0C                     __end_of_strncmp:
 11840                           	opt callstack 0
 11841                           
 11842 ;; *************** function _atoi *****************
 11843 ;; Defined at:
 11844 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
 11845 ;; Parameters:    Size  Location     Type
 11846 ;;  s               2   16[COMRAM] PTR const unsigned char 
 11847 ;;		 -> STR_56(14), STR_55(15), STR_54(8), STR_53(13), 
 11848 ;;		 -> STR_52(15), STR_51(3), STR_50(17), STR_49(15), 
 11849 ;;		 -> STR_48(11), STR_47(13), STR_46(12), STR_45(13), 
 11850 ;;		 -> STR_44(16), STR_43(14), STR_42(15), STR_41(8), 
 11851 ;;		 -> STR_40(13), STR_39(15), STR_38(3), STR_37(17), 
 11852 ;;		 -> STR_36(15), STR_35(11), STR_34(13), STR_33(12), 
 11853 ;;		 -> STR_32(13), STR_31(16), STR_30(14), STR_29(16), 
 11854 ;;		 -> STR_28(6), STR_27(14), STR_26(9), STR_25(16), 
 11855 ;;		 -> STR_24(11), STR_23(14), STR_22(17), STR_21(19), 
 11856 ;;		 -> STR_20(19), STR_19(9), STR_18(8), STR_17(10), 
 11857 ;;		 -> STR_16(14), STR_15(14), STR_14(3), STR_13(2), 
 11858 ;;		 -> STR_12(12), STR_11(14), STR_10(13), STR_9(13), 
 11859 ;;		 -> STR_8(15), STR_7(9), STR_6(11), STR_5(20), 
 11860 ;;		 -> STR_4(15), STR_3(17), STR_2(17), STR_1(9), 
 11861 ;; Auto vars:     Size  Location     Type
 11862 ;;  n               2   29[COMRAM] int 
 11863 ;;  neg             2   22[COMRAM] int 
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  2   16[COMRAM] int 
 11866 ;; Registers used:
 11867 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11873 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11874 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11875 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11877 ;;Total ram usage:       15 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    1
 11880 ;; This function calls:
 11881 ;;		___wmul
 11882 ;;		_isdigit
 11883 ;;		_isspace
 11884 ;; This function is called by:
 11885 ;;		_vfpfcnvrt
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           	psect	text41
 11890  00D0D6                     __ptext41:
 11891                           	opt callstack 0
 11892  00D0D6                     _atoi:
 11893                           	opt callstack 25
 11894                           
 11895                           ;incstack = 0
 11896  00D0D6  0E00               	movlw	0
 11897  00D0D8  6E1F               	movwf	atoi@n+1,c
 11898  00D0DA  0E00               	movlw	0
 11899  00D0DC  6E1E               	movwf	atoi@n,c
 11900  00D0DE  0E00               	movlw	0
 11901  00D0E0  6E18               	movwf	atoi@neg+1,c
 11902  00D0E2  0E00               	movlw	0
 11903  00D0E4  6E17               	movwf	atoi@neg,c
 11904  00D0E6  D002               	goto	l4479
 11905  00D0E8                     l4477:
 11906  00D0E8  4A11               	infsnz	atoi@s,f,c
 11907  00D0EA  2A12               	incf	atoi@s+1,f,c
 11908  00D0EC                     l4479:
 11909  00D0EC  0E01               	movlw	1
 11910  00D0EE  6E1D               	movwf	_atoi$1802,c
 11911  00D0F0  C011  FFF6         	movff	atoi@s,tblptrl
 11912  00D0F4  C012  FFF7         	movff	atoi@s+1,tblptrh
 11913  00D0F8                     	if	0	;tblptru may be non-zero
 11914  00D0F8                     	endif
 11915  00D0F8                     	if	0	;tblptru may be non-zero
 11916  00D0F8                     	endif
 11917  00D0F8  0008               	tblrd		*
 11918  00D0FA  50F5               	movf	tablat,w,c
 11919  00D0FC  0A20               	xorlw	32
 11920  00D0FE  B4D8               	btfsc	status,2,c
 11921  00D100  D018               	goto	l4487
 11922  00D102  0EF7               	movlw	247
 11923  00D104  6E13               	movwf	??_atoi& (0+255),c
 11924  00D106  0EFF               	movlw	255
 11925  00D108  6E14               	movwf	(??_atoi+1)& (0+255),c
 11926  00D10A  C011  FFF6         	movff	atoi@s,tblptrl
 11927  00D10E  C012  FFF7         	movff	atoi@s+1,tblptrh
 11928  00D112                     	if	0	;tblptru may be non-zero
 11929  00D112                     	endif
 11930  00D112                     	if	0	;tblptru may be non-zero
 11931  00D112                     	endif
 11932  00D112  0008               	tblrd		*
 11933  00D114  50F5               	movf	tablat,w,c
 11934  00D116  6E15               	movwf	(??_atoi+2)& (0+255),c
 11935  00D118  6A16               	clrf	(??_atoi+3)& (0+255),c
 11936  00D11A  5013               	movf	??_atoi,w,c
 11937  00D11C  2615               	addwf	??_atoi+2,f,c
 11938  00D11E  5014               	movf	??_atoi+1,w,c
 11939  00D120  2216               	addwfc	??_atoi+3,f,c
 11940  00D122  5016               	movf	??_atoi+3,w,c
 11941  00D124  E104               	bnz	u3640
 11942  00D126  0E05               	movlw	5
 11943  00D128  5C15               	subwf	??_atoi+2,w,c
 11944  00D12A  A0D8               	btfss	status,0,c
 11945  00D12C  D002               	goto	l4487
 11946  00D12E                     u3640:
 11947  00D12E  0E00               	movlw	0
 11948  00D130  6E1D               	movwf	_atoi$1802,c
 11949  00D132                     l4487:
 11950  00D132  C01D  F019         	movff	_atoi$1802,_atoi$1801
 11951  00D136  6A1A               	clrf	_atoi$1801+1,c
 11952  00D138  5019               	movf	_atoi$1801,w,c
 11953  00D13A  101A               	iorwf	_atoi$1801+1,w,c
 11954  00D13C  B4D8               	btfsc	status,2,c
 11955  00D13E  D008               	goto	l4497
 11956  00D140  D7D3               	goto	l4477
 11957  00D142                     l4493:
 11958  00D142  0E00               	movlw	0
 11959  00D144  6E18               	movwf	atoi@neg+1,c
 11960  00D146  0E01               	movlw	1
 11961  00D148  6E17               	movwf	atoi@neg,c
 11962  00D14A                     l4495:
 11963  00D14A  4A11               	infsnz	atoi@s,f,c
 11964  00D14C  2A12               	incf	atoi@s+1,f,c
 11965  00D14E  D02E               	goto	l4503
 11966  00D150                     l4497:
 11967  00D150  C011  FFF6         	movff	atoi@s,tblptrl
 11968  00D154  C012  FFF7         	movff	atoi@s+1,tblptrh
 11969  00D158                     	if	0	;tblptru may be non-zero
 11970  00D158                     	endif
 11971  00D158                     	if	0	;tblptru may be non-zero
 11972  00D158                     	endif
 11973  00D158  0008               	tblrd		*
 11974  00D15A  50F5               	movf	tablat,w,c
 11975  00D15C  6E13               	movwf	??_atoi& (0+255),c
 11976  00D15E  6A14               	clrf	(??_atoi+1)& (0+255),c
 11977                           
 11978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11979                           ; Switch size 1, requested type "simple"
 11980                           ; Number of cases is 1, Range of values is 0 to 0
 11981                           ; switch strategies available:
 11982                           ; Name         Instructions Cycles
 11983                           ; simple_byte            4     3 (average)
 11984                           ;	Chosen strategy is simple_byte
 11985  00D160  5014               	movf	??_atoi+1,w,c
 11986  00D162  0A00               	xorlw	0	; case 0
 11987  00D164  A4D8               	btfss	status,2,c
 11988  00D166  D022               	goto	l4503
 11989                           
 11990                           ; Switch size 1, requested type "simple"
 11991                           ; Number of cases is 2, Range of values is 43 to 45
 11992                           ; switch strategies available:
 11993                           ; Name         Instructions Cycles
 11994                           ; simple_byte            7     4 (average)
 11995                           ;	Chosen strategy is simple_byte
 11996  00D168  5013               	movf	??_atoi,w,c
 11997  00D16A  0A2B               	xorlw	43	; case 43
 11998  00D16C  B4D8               	btfsc	status,2,c
 11999  00D16E  D7ED               	goto	l4495
 12000  00D170  0A06               	xorlw	6	; case 45
 12001  00D172  B4D8               	btfsc	status,2,c
 12002  00D174  D7E6               	goto	l4493
 12003  00D176  D01A               	goto	l4503
 12004  00D178                     l4499:
 12005  00D178  C01E  F00B         	movff	atoi@n,___wmul@multiplier
 12006  00D17C  C01F  F00C         	movff	atoi@n+1,___wmul@multiplier+1
 12007  00D180  0E00               	movlw	0
 12008  00D182  6E0E               	movwf	___wmul@multiplicand+1,c
 12009  00D184  0E0A               	movlw	10
 12010  00D186  6E0D               	movwf	___wmul@multiplicand,c
 12011  00D188  EC42  F062         	call	___wmul	;wreg free
 12012  00D18C  C011  FFF6         	movff	atoi@s,tblptrl
 12013  00D190  C012  FFF7         	movff	atoi@s+1,tblptrh
 12014  00D194                     	if	0	;tblptru may be non-zero
 12015  00D194                     	endif
 12016  00D194                     	if	0	;tblptru may be non-zero
 12017  00D194                     	endif
 12018  00D194  0008               	tblrd		*
 12019  00D196  50F5               	movf	tablat,w,c
 12020  00D198  5E0B               	subwf	?___wmul,f,c
 12021  00D19A  0E00               	movlw	0
 12022  00D19C  5A0C               	subwfb	?___wmul+1,f,c
 12023  00D19E  0E30               	movlw	48
 12024  00D1A0  240B               	addwf	?___wmul,w,c
 12025  00D1A2  6E1E               	movwf	atoi@n,c
 12026  00D1A4  0E00               	movlw	0
 12027  00D1A6  200C               	addwfc	?___wmul+1,w,c
 12028  00D1A8  6E1F               	movwf	atoi@n+1,c
 12029  00D1AA  D7CF               	goto	l4495
 12030  00D1AC                     l4503:
 12031  00D1AC  0ED0               	movlw	208
 12032  00D1AE  6E13               	movwf	??_atoi& (0+255),c
 12033  00D1B0  0EFF               	movlw	255
 12034  00D1B2  6E14               	movwf	(??_atoi+1)& (0+255),c
 12035  00D1B4  C011  FFF6         	movff	atoi@s,tblptrl
 12036  00D1B8  C012  FFF7         	movff	atoi@s+1,tblptrh
 12037  00D1BC                     	if	0	;tblptru may be non-zero
 12038  00D1BC                     	endif
 12039  00D1BC                     	if	0	;tblptru may be non-zero
 12040  00D1BC                     	endif
 12041  00D1BC  0008               	tblrd		*
 12042  00D1BE  50F5               	movf	tablat,w,c
 12043  00D1C0  6E15               	movwf	(??_atoi+2)& (0+255),c
 12044  00D1C2  6A16               	clrf	(??_atoi+3)& (0+255),c
 12045  00D1C4  5013               	movf	??_atoi,w,c
 12046  00D1C6  2615               	addwf	??_atoi+2,f,c
 12047  00D1C8  5014               	movf	??_atoi+1,w,c
 12048  00D1CA  2216               	addwfc	??_atoi+3,f,c
 12049  00D1CC  5016               	movf	??_atoi+3,w,c
 12050  00D1CE  E106               	bnz	u3660
 12051  00D1D0  0E0A               	movlw	10
 12052  00D1D2  5C15               	subwf	??_atoi+2,w,c
 12053  00D1D4  B0D8               	btfsc	status,0,c
 12054  00D1D6  D002               	goto	u3660
 12055  00D1D8  0E01               	movlw	1
 12056  00D1DA  D001               	goto	u3670
 12057  00D1DC                     u3660:
 12058  00D1DC  0E00               	movlw	0
 12059  00D1DE                     u3670:
 12060  00D1DE  6E1B               	movwf	_atoi$1803,c
 12061  00D1E0  6A1C               	clrf	_atoi$1803+1,c
 12062  00D1E2  501B               	movf	_atoi$1803,w,c
 12063  00D1E4  101C               	iorwf	_atoi$1803+1,w,c
 12064  00D1E6  A4D8               	btfss	status,2,c
 12065  00D1E8  D7C7               	goto	l4499
 12066  00D1EA  5017               	movf	atoi@neg,w,c
 12067  00D1EC  1018               	iorwf	atoi@neg+1,w,c
 12068  00D1EE  A4D8               	btfss	status,2,c
 12069  00D1F0  D00D               	goto	l1391
 12070  00D1F2  C01E  F013         	movff	atoi@n,??_atoi
 12071  00D1F6  C01F  F014         	movff	atoi@n+1,??_atoi+1
 12072  00D1FA  1E13               	comf	??_atoi,f,c
 12073  00D1FC  1E14               	comf	??_atoi+1,f,c
 12074  00D1FE  4A13               	infsnz	??_atoi,f,c
 12075  00D200  2A14               	incf	??_atoi+1,f,c
 12076  00D202  C013  F011         	movff	??_atoi,?_atoi
 12077  00D206  C014  F012         	movff	??_atoi+1,?_atoi+1
 12078  00D20A  0012               	return	
 12079  00D20C                     l1391:
 12080  00D20C  C01E  F011         	movff	atoi@n,?_atoi
 12081  00D210  C01F  F012         	movff	atoi@n+1,?_atoi+1
 12082  00D214  0012               	return		;funcret
 12083  00D216                     __end_of_atoi:
 12084                           	opt callstack 0
 12085                           
 12086 ;; *************** function _isspace *****************
 12087 ;; Defined at:
 12088 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
 12089 ;; Parameters:    Size  Location     Type
 12090 ;;  c               2    0[COMRAM] int 
 12091 ;; Auto vars:     Size  Location     Type
 12092 ;;		None
 12093 ;; Return value:  Size  Location     Type
 12094 ;;                  2    0[COMRAM] int 
 12095 ;; Registers used:
 12096 ;;		wreg, status,2, status,0
 12097 ;; Tracked objects:
 12098 ;;		On entry : 0/0
 12099 ;;		On exit  : 0/0
 12100 ;;		Unchanged: 0/0
 12101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12102 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12104 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12105 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12106 ;;Total ram usage:        7 bytes
 12107 ;; Hardware stack levels used:    1
 12108 ;; This function calls:
 12109 ;;		Nothing
 12110 ;; This function is called by:
 12111 ;;		_atoi
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           	psect	text42
 12116  00C6AE                     __ptext42:
 12117                           	opt callstack 0
 12118  00C6AE                     _isspace:
 12119                           	opt callstack 25
 12120                           
 12121                           ;incstack = 0
 12122  00C6AE  0E01               	movlw	1
 12123  00C6B0  6E07               	movwf	_isspace$1828,c
 12124  00C6B2  0E20               	movlw	32
 12125  00C6B4  1801               	xorwf	isspace@c,w,c
 12126  00C6B6  1002               	iorwf	isspace@c+1,w,c
 12127  00C6B8  B4D8               	btfsc	status,2,c
 12128  00C6BA  D014               	goto	l4369
 12129  00C6BC  0EF7               	movlw	247
 12130  00C6BE  6E03               	movwf	??_isspace& (0+255),c
 12131  00C6C0  0EFF               	movlw	255
 12132  00C6C2  6E04               	movwf	(??_isspace+1)& (0+255),c
 12133  00C6C4  C001  F005         	movff	isspace@c,??_isspace+2
 12134  00C6C8  C002  F006         	movff	isspace@c+1,??_isspace+3
 12135  00C6CC  5003               	movf	??_isspace,w,c
 12136  00C6CE  2605               	addwf	??_isspace+2,f,c
 12137  00C6D0  5004               	movf	??_isspace+1,w,c
 12138  00C6D2  2206               	addwfc	??_isspace+3,f,c
 12139  00C6D4  5006               	movf	??_isspace+3,w,c
 12140  00C6D6  E104               	bnz	u3380
 12141  00C6D8  0E05               	movlw	5
 12142  00C6DA  5C05               	subwf	??_isspace+2,w,c
 12143  00C6DC  A0D8               	btfss	status,0,c
 12144  00C6DE  D002               	goto	l4369
 12145  00C6E0                     u3380:
 12146  00C6E0  0E00               	movlw	0
 12147  00C6E2  6E07               	movwf	_isspace$1828,c
 12148  00C6E4                     l4369:
 12149  00C6E4  C007  F001         	movff	_isspace$1828,?_isspace
 12150  00C6E8  6A02               	clrf	?_isspace+1,c
 12151  00C6EA  0012               	return		;funcret
 12152  00C6EC                     __end_of_isspace:
 12153                           	opt callstack 0
 12154                           
 12155 ;; *************** function _isdigit *****************
 12156 ;; Defined at:
 12157 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
 12158 ;; Parameters:    Size  Location     Type
 12159 ;;  c               2    0[COMRAM] int 
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;		None
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  2    0[COMRAM] int 
 12164 ;; Registers used:
 12165 ;;		wreg, status,2, status,0
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12171 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12173 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12174 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12175 ;;Total ram usage:        6 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; This function calls:
 12178 ;;		Nothing
 12179 ;; This function is called by:
 12180 ;;		_vfpfcnvrt
 12181 ;;		_atoi
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           	psect	text43
 12186  00C578                     __ptext43:
 12187                           	opt callstack 0
 12188  00C578                     _isdigit:
 12189                           	opt callstack 26
 12190                           
 12191                           ;incstack = 0
 12192  00C578  0ED0               	movlw	208
 12193  00C57A  6E03               	movwf	??_isdigit& (0+255),c
 12194  00C57C  0EFF               	movlw	255
 12195  00C57E  6E04               	movwf	(??_isdigit+1)& (0+255),c
 12196  00C580  C001  F005         	movff	isdigit@c,??_isdigit+2
 12197  00C584  C002  F006         	movff	isdigit@c+1,??_isdigit+3
 12198  00C588  5003               	movf	??_isdigit,w,c
 12199  00C58A  2605               	addwf	??_isdigit+2,f,c
 12200  00C58C  5004               	movf	??_isdigit+1,w,c
 12201  00C58E  2206               	addwfc	??_isdigit+3,f,c
 12202  00C590  5006               	movf	??_isdigit+3,w,c
 12203  00C592  E106               	bnz	u3280
 12204  00C594  0E0A               	movlw	10
 12205  00C596  5C05               	subwf	??_isdigit+2,w,c
 12206  00C598  B0D8               	btfsc	status,0,c
 12207  00C59A  D002               	goto	u3280
 12208  00C59C  0E01               	movlw	1
 12209  00C59E  D001               	goto	u3290
 12210  00C5A0                     u3280:
 12211  00C5A0  0E00               	movlw	0
 12212  00C5A2                     u3290:
 12213  00C5A2  6E01               	movwf	?_isdigit,c
 12214  00C5A4  6A02               	clrf	?_isdigit+1,c
 12215  00C5A6  0012               	return		;funcret
 12216  00C5A8                     __end_of_isdigit:
 12217                           	opt callstack 0
 12218                           
 12219 ;; *************** function ___wmul *****************
 12220 ;; Defined at:
 12221 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;  multiplier      2   10[COMRAM] unsigned int 
 12224 ;;  multiplicand    2   12[COMRAM] unsigned int 
 12225 ;; Auto vars:     Size  Location     Type
 12226 ;;  product         2   14[COMRAM] unsigned int 
 12227 ;; Return value:  Size  Location     Type
 12228 ;;                  2   10[COMRAM] unsigned int 
 12229 ;; Registers used:
 12230 ;;		wreg, status,2, status,0, prodl, prodh
 12231 ;; Tracked objects:
 12232 ;;		On entry : 0/0
 12233 ;;		On exit  : 0/0
 12234 ;;		Unchanged: 0/0
 12235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12237 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12239 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12240 ;;Total ram usage:        6 bytes
 12241 ;; Hardware stack levels used:    1
 12242 ;; This function calls:
 12243 ;;		Nothing
 12244 ;; This function is called by:
 12245 ;;		_runFinished
 12246 ;;		_options
 12247 ;;		_atoi
 12248 ;; This function uses a non-reentrant model
 12249 ;;
 12250                           
 12251                           	psect	text44
 12252  00C484                     __ptext44:
 12253                           	opt callstack 0
 12254  00C484                     ___wmul:
 12255                           	opt callstack 25
 12256                           
 12257                           ;incstack = 0
 12258  00C484  500B               	movf	___wmul@multiplier,w,c
 12259  00C486  020D               	mulwf	___wmul@multiplicand,c
 12260  00C488  CFF3 F00F          	movff	prodl,___wmul@product
 12261  00C48C  CFF4 F010          	movff	prodh,___wmul@product+1
 12262  00C490  500B               	movf	___wmul@multiplier,w,c
 12263  00C492  020E               	mulwf	___wmul@multiplicand+1,c
 12264  00C494  50F3               	movf	prodl,w,c
 12265  00C496  2610               	addwf	___wmul@product+1,f,c
 12266  00C498  500C               	movf	___wmul@multiplier+1,w,c
 12267  00C49A  020D               	mulwf	___wmul@multiplicand,c
 12268  00C49C  50F3               	movf	prodl,w,c
 12269  00C49E  2610               	addwf	___wmul@product+1,f,c
 12270  00C4A0  C00F  F00B         	movff	___wmul@product,?___wmul
 12271  00C4A4  C010  F00C         	movff	___wmul@product+1,?___wmul+1
 12272  00C4A8  0012               	return		;funcret
 12273  00C4AA                     __end_of___wmul:
 12274                           	opt callstack 0
 12275                           
 12276 ;; *************** function _I2C_Master_Write *****************
 12277 ;; Defined at:
 12278 ;;		line 70 in file "./I2C.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;		None
 12283 ;; Return value:  Size  Location     Type
 12284 ;;                  1    wreg      void 
 12285 ;; Registers used:
 12286 ;;		wreg, status,2, status,0, cstack
 12287 ;; Tracked objects:
 12288 ;;		On entry : 0/0
 12289 ;;		On exit  : 0/0
 12290 ;;		Unchanged: 0/0
 12291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12296 ;;Total ram usage:        2 bytes
 12297 ;; Hardware stack levels used:    1
 12298 ;; Hardware stack levels required when called:    1
 12299 ;; This function calls:
 12300 ;;		_I2C_Master_Wait
 12301 ;; This function is called by:
 12302 ;;		_writeByteToDriveArduino
 12303 ;;		_mainMenu
 12304 ;;		_start
 12305 ;;		_runFinished
 12306 ;;		_setTime
 12307 ;; This function uses a non-reentrant model
 12308 ;;
 12309                           
 12310                           	psect	text45
 12311  00C3CA                     __ptext45:
 12312                           	opt callstack 0
 12313  00C3CA                     _I2C_Master_Write:
 12314                           	opt callstack 27
 12315                           
 12316                           ;./I2C.c: 71:     I2C_Master_Wait();
 12317                           
 12318                           ;incstack = 0
 12319  00C3CA  ECFF  F061         	call	_I2C_Master_Wait	;wreg free
 12320                           
 12321                           ;./I2C.c: 74:     SSPBUF = byteToWrite;
 12322  00C3CE  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 12323  00C3D2  0012               	return		;funcret
 12324  00C3D4                     __end_of_I2C_Master_Write:
 12325                           	opt callstack 0
 12326                           
 12327 ;; *************** function _I2C_Master_Stop *****************
 12328 ;; Defined at:
 12329 ;;		line 65 in file "./I2C.c"
 12330 ;; Parameters:    Size  Location     Type
 12331 ;;		None
 12332 ;; Auto vars:     Size  Location     Type
 12333 ;;		None
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      void 
 12336 ;; Registers used:
 12337 ;;		wreg, status,2, status,0, cstack
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12347 ;;Total ram usage:        0 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; Hardware stack levels required when called:    1
 12350 ;; This function calls:
 12351 ;;		_I2C_Master_Wait
 12352 ;; This function is called by:
 12353 ;;		_writeByteToDriveArduino
 12354 ;;		_mainMenu
 12355 ;;		_start
 12356 ;;		_runFinished
 12357 ;;		_setTime
 12358 ;; This function uses a non-reentrant model
 12359 ;;
 12360                           
 12361                           	psect	text46
 12362  00C3C2                     __ptext46:
 12363                           	opt callstack 0
 12364  00C3C2                     _I2C_Master_Stop:
 12365                           	opt callstack 27
 12366                           
 12367                           ;./I2C.c: 66:     I2C_Master_Wait();
 12368                           
 12369                           ;incstack = 0
 12370  00C3C2  ECFF  F061         	call	_I2C_Master_Wait	;wreg free
 12371                           
 12372                           ;./I2C.c: 67:     SSPCON2bits.PEN = 1;
 12373  00C3C6  84C5               	bsf	4037,2,c	;volatile
 12374  00C3C8  0012               	return		;funcret
 12375  00C3CA                     __end_of_I2C_Master_Stop:
 12376                           	opt callstack 0
 12377                           
 12378 ;; *************** function _I2C_Master_Start *****************
 12379 ;; Defined at:
 12380 ;;		line 55 in file "./I2C.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;		None
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;		None
 12385 ;; Return value:  Size  Location     Type
 12386 ;;                  1    wreg      void 
 12387 ;; Registers used:
 12388 ;;		wreg, status,2, status,0, cstack
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;Total ram usage:        0 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:    1
 12401 ;; This function calls:
 12402 ;;		_I2C_Master_Wait
 12403 ;; This function is called by:
 12404 ;;		_writeByteToDriveArduino
 12405 ;;		_mainMenu
 12406 ;;		_start
 12407 ;;		_runFinished
 12408 ;;		_setTime
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           	psect	text47
 12413  00C3BA                     __ptext47:
 12414                           	opt callstack 0
 12415  00C3BA                     _I2C_Master_Start:
 12416                           	opt callstack 27
 12417                           
 12418                           ;./I2C.c: 56:     I2C_Master_Wait();
 12419                           
 12420                           ;incstack = 0
 12421  00C3BA  ECFF  F061         	call	_I2C_Master_Wait	;wreg free
 12422                           
 12423                           ;./I2C.c: 57:     SSPCON2bits.SEN = 1;
 12424  00C3BE  80C5               	bsf	4037,0,c	;volatile
 12425  00C3C0  0012               	return		;funcret
 12426  00C3C2                     __end_of_I2C_Master_Start:
 12427                           	opt callstack 0
 12428                           
 12429 ;; *************** function _I2C_Master_Read *****************
 12430 ;; Defined at:
 12431 ;;		line 77 in file "./I2C.c"
 12432 ;; Parameters:    Size  Location     Type
 12433 ;;  ackBit          1    wreg     unsigned char 
 12434 ;; Auto vars:     Size  Location     Type
 12435 ;;  ackBit          1    1[COMRAM] unsigned char 
 12436 ;;  receivedByte    1    2[COMRAM] unsigned char 
 12437 ;; Return value:  Size  Location     Type
 12438 ;;                  1    wreg      unsigned char 
 12439 ;; Registers used:
 12440 ;;		wreg, status,2, status,0, cstack
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12447 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12450 ;;Total ram usage:        2 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    1
 12453 ;; This function calls:
 12454 ;;		_I2C_Master_Wait
 12455 ;; This function is called by:
 12456 ;;		_mainMenu
 12457 ;;		_start
 12458 ;;		_runFinished
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           	psect	text48
 12463  00C460                     __ptext48:
 12464                           	opt callstack 0
 12465  00C460                     _I2C_Master_Read:
 12466                           	opt callstack 28
 12467                           
 12468                           ;incstack = 0
 12469                           ;I2C_Master_Read@ackBit stored from wreg
 12470  00C460  6E02               	movwf	I2C_Master_Read@ackBit,c
 12471                           
 12472                           ;./I2C.c: 78:     I2C_Master_Wait();
 12473  00C462  ECFF  F061         	call	_I2C_Master_Wait	;wreg free
 12474                           
 12475                           ;./I2C.c: 79:     SSPCON2bits.RCEN = 1;
 12476  00C466  86C5               	bsf	4037,3,c	;volatile
 12477                           
 12478                           ;./I2C.c: 81:     I2C_Master_Wait();
 12479  00C468  ECFF  F061         	call	_I2C_Master_Wait	;wreg free
 12480                           
 12481                           ;./I2C.c: 84:     unsigned char receivedByte = SSPBUF;
 12482  00C46C  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 12483                           
 12484                           ;./I2C.c: 86:     I2C_Master_Wait();
 12485  00C470  ECFF  F061         	call	_I2C_Master_Wait	;wreg free
 12486                           
 12487                           ;./I2C.c: 87:     SSPCON2bits.ACKDT = ackBit;
 12488  00C474  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 12489  00C476  D002               	bra	u3995
 12490  00C478  9AC5               	bcf	4037,5,c	;volatile
 12491  00C47A  D001               	bra	u3996
 12492  00C47C                     u3995:
 12493  00C47C  8AC5               	bsf	4037,5,c	;volatile
 12494  00C47E                     u3996:
 12495                           
 12496                           ;./I2C.c: 88:     SSPCON2bits.ACKEN = 1;
 12497  00C47E  88C5               	bsf	4037,4,c	;volatile
 12498                           
 12499                           ;./I2C.c: 90:     return receivedByte;
 12500  00C480  5003               	movf	I2C_Master_Read@receivedByte,w,c
 12501  00C482  0012               	return		;funcret
 12502  00C484                     __end_of_I2C_Master_Read:
 12503                           	opt callstack 0
 12504                           
 12505 ;; *************** function _I2C_Master_Wait *****************
 12506 ;; Defined at:
 12507 ;;		line 21 in file "./I2C.c"
 12508 ;; Parameters:    Size  Location     Type
 12509 ;;		None
 12510 ;; Auto vars:     Size  Location     Type
 12511 ;;		None
 12512 ;; Return value:  Size  Location     Type
 12513 ;;                  1    wreg      void 
 12514 ;; Registers used:
 12515 ;;		wreg, status,2, status,0
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12525 ;;Total ram usage:        1 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; This function calls:
 12528 ;;		Nothing
 12529 ;; This function is called by:
 12530 ;;		_I2C_Master_Start
 12531 ;;		_I2C_Master_Stop
 12532 ;;		_I2C_Master_Write
 12533 ;;		_I2C_Master_Read
 12534 ;;		_I2C_Master_RepeatedStart
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           	psect	text49
 12539  00C3FE                     __ptext49:
 12540                           	opt callstack 0
 12541  00C3FE                     _I2C_Master_Wait:
 12542                           	opt callstack 27
 12543                           
 12544                           ;./I2C.c: 26:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F)){
 12545                           
 12546                           ;./I2C.c: 28:     }
 12547                           
 12548                           ;incstack = 0
 12549  00C3FE  B4C7               	btfsc	4039,2,c	;volatile
 12550  00C400  D7FE               	goto	_I2C_Master_Wait
 12551  00C402  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 12552  00C406  0E1F               	movlw	31
 12553  00C408  1601               	andwf	??_I2C_Master_Wait,f,c
 12554  00C40A  B4D8               	btfsc	status,2,c
 12555  00C40C  0012               	return	
 12556  00C40E  D7F7               	goto	_I2C_Master_Wait
 12557  00C410                     __end_of_I2C_Master_Wait:
 12558                           	opt callstack 0
 12559                           
 12560 ;; *************** function _initLCD *****************
 12561 ;; Defined at:
 12562 ;;		line 69 in file "lcd.c"
 12563 ;; Parameters:    Size  Location     Type
 12564 ;;		None
 12565 ;; Auto vars:     Size  Location     Type
 12566 ;;		None
 12567 ;; Return value:  Size  Location     Type
 12568 ;;                  1    wreg      void 
 12569 ;; Registers used:
 12570 ;;		wreg, status,2, status,0, cstack
 12571 ;; Tracked objects:
 12572 ;;		On entry : 0/0
 12573 ;;		On exit  : 0/0
 12574 ;;		Unchanged: 0/0
 12575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12580 ;;Total ram usage:        1 bytes
 12581 ;; Hardware stack levels used:    1
 12582 ;; Hardware stack levels required when called:    4
 12583 ;; This function calls:
 12584 ;;		_lcdInst
 12585 ;;		_send_byte
 12586 ;;		_send_nibble
 12587 ;; This function is called by:
 12588 ;;		_main
 12589 ;; This function uses a non-reentrant model
 12590 ;;
 12591                           
 12592                           	psect	text50
 12593  00C87C                     __ptext50:
 12594                           	opt callstack 0
 12595  00C87C                     _initLCD:
 12596                           	opt callstack 26
 12597                           
 12598                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
 12599                           
 12600                           ;incstack = 0
 12601  00C87C  0E31               	movlw	49
 12602  00C87E  6E05               	movwf	??_initLCD& (0+255),c
 12603  00C880  0EB2               	movlw	178
 12604  00C882                     u6607:
 12605  00C882  2EE8               	decfsz	wreg,f,c
 12606  00C884  D7FE               	bra	u6607
 12607  00C886  2E05               	decfsz	??_initLCD& (0+255),f,c
 12608  00C888  D7FC               	bra	u6607
 12609  00C88A  D000               	nop2	
 12610                           
 12611                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
 12612  00C88C  948C               	bcf	3980,2,c	;volatile
 12613                           
 12614                           ;lcd.c: 74:     send_nibble(0b0011);
 12615  00C88E  0E03               	movlw	3
 12616  00C890  EC08  F062         	call	_send_nibble
 12617                           
 12618                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
 12619  00C894  0E11               	movlw	17
 12620  00C896  6E05               	movwf	??_initLCD& (0+255),c
 12621  00C898  0E3A               	movlw	58
 12622  00C89A                     u6617:
 12623  00C89A  2EE8               	decfsz	wreg,f,c
 12624  00C89C  D7FE               	bra	u6617
 12625  00C89E  2E05               	decfsz	??_initLCD& (0+255),f,c
 12626  00C8A0  D7FC               	bra	u6617
 12627  00C8A2  D000               	nop2	
 12628                           
 12629                           ;lcd.c: 76:     send_nibble(0b0011);
 12630  00C8A4  0E03               	movlw	3
 12631  00C8A6  EC08  F062         	call	_send_nibble
 12632                           
 12633                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
 12634  00C8AA  0E7D               	movlw	125
 12635  00C8AC                     u6627:
 12636  00C8AC  2EE8               	decfsz	wreg,f,c
 12637  00C8AE  D7FE               	bra	u6627
 12638                           
 12639                           ;lcd.c: 78:     send_byte(0b00110010);
 12640  00C8B0  0E32               	movlw	50
 12641  00C8B2  ECF6  F061         	call	_send_byte
 12642                           
 12643                           ;lcd.c: 80:     send_byte(0b00101000);
 12644  00C8B6  0E28               	movlw	40
 12645  00C8B8  ECF6  F061         	call	_send_byte
 12646                           
 12647                           ;lcd.c: 81:     send_byte(0b00001000);
 12648  00C8BC  0E08               	movlw	8
 12649  00C8BE  ECF6  F061         	call	_send_byte
 12650                           
 12651                           ;lcd.c: 82:     send_byte(0b00000001);
 12652  00C8C2  0E01               	movlw	1
 12653  00C8C4  ECF6  F061         	call	_send_byte
 12654                           
 12655                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
 12656  00C8C8  0E11               	movlw	17
 12657  00C8CA  6E05               	movwf	??_initLCD& (0+255),c
 12658  00C8CC  0E3A               	movlw	58
 12659  00C8CE                     u6637:
 12660  00C8CE  2EE8               	decfsz	wreg,f,c
 12661  00C8D0  D7FE               	bra	u6637
 12662  00C8D2  2E05               	decfsz	??_initLCD& (0+255),f,c
 12663  00C8D4  D7FC               	bra	u6637
 12664  00C8D6  D000               	nop2	
 12665                           
 12666                           ;lcd.c: 84:     send_byte(0b00000110);
 12667  00C8D8  0E06               	movlw	6
 12668  00C8DA  ECF6  F061         	call	_send_byte
 12669                           
 12670                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
 12671  00C8DE  0E0F               	movlw	15
 12672  00C8E0  ECEA  F061         	call	_lcdInst
 12673  00C8E4  0012               	return		;funcret
 12674  00C8E6                     __end_of_initLCD:
 12675                           	opt callstack 0
 12676                           
 12677 ;; *************** function _lcdInst *****************
 12678 ;; Defined at:
 12679 ;;		line 64 in file "lcd.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;  data            1    wreg     unsigned char 
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;  data            1    3[COMRAM] unsigned char 
 12684 ;; Return value:  Size  Location     Type
 12685 ;;                  1    wreg      void 
 12686 ;; Registers used:
 12687 ;;		wreg, status,2, status,0, cstack
 12688 ;; Tracked objects:
 12689 ;;		On entry : 0/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;Total ram usage:        1 bytes
 12698 ;; Hardware stack levels used:    1
 12699 ;; Hardware stack levels required when called:    3
 12700 ;; This function calls:
 12701 ;;		_send_byte
 12702 ;; This function is called by:
 12703 ;;		_mainMenu
 12704 ;;		_start
 12705 ;;		_runFinished
 12706 ;;		_runFinishedMenu
 12707 ;;		_runInfoMenu
 12708 ;;		_poleInfo
 12709 ;;		_saveRun
 12710 ;;		_selectLog
 12711 ;;		_options
 12712 ;;		_main
 12713 ;;		_initLCD
 12714 ;;		_lcd_shift_cursor
 12715 ;;		_lcd_shift_display
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           	psect	text51
 12720  00C3D4                     __ptext51:
 12721                           	opt callstack 0
 12722  00C3D4                     _lcdInst:
 12723                           	opt callstack 26
 12724                           
 12725                           ;incstack = 0
 12726                           ;lcdInst@data stored from wreg
 12727  00C3D4  6E04               	movwf	lcdInst@data,c
 12728                           
 12729                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
 12730  00C3D6  948C               	bcf	3980,2,c	;volatile
 12731                           
 12732                           ;lcd.c: 66:     send_byte(data);
 12733  00C3D8  5004               	movf	lcdInst@data,w,c
 12734  00C3DA  ECF6  F061         	call	_send_byte
 12735  00C3DE  0012               	return		;funcret
 12736  00C3E0                     __end_of_lcdInst:
 12737                           	opt callstack 0
 12738                           
 12739 ;; *************** function _send_byte *****************
 12740 ;; Defined at:
 12741 ;;		line 55 in file "lcd.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;  data            1    wreg     unsigned char 
 12744 ;; Auto vars:     Size  Location     Type
 12745 ;;  data            1    2[COMRAM] unsigned char 
 12746 ;; Return value:  Size  Location     Type
 12747 ;;                  1    wreg      void 
 12748 ;; Registers used:
 12749 ;;		wreg, status,2, status,0, cstack
 12750 ;; Tracked objects:
 12751 ;;		On entry : 0/0
 12752 ;;		On exit  : 0/0
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12756 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12759 ;;Total ram usage:        1 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; Hardware stack levels required when called:    2
 12762 ;; This function calls:
 12763 ;;		_send_nibble
 12764 ;; This function is called by:
 12765 ;;		_lcdInst
 12766 ;;		_initLCD
 12767 ;;		_putch
 12768 ;; This function uses a non-reentrant model
 12769 ;;
 12770                           
 12771                           	psect	text52
 12772  00C3EC                     __ptext52:
 12773                           	opt callstack 0
 12774  00C3EC                     _send_byte:
 12775                           	opt callstack 19
 12776                           
 12777                           ;incstack = 0
 12778                           ;send_byte@data stored from wreg
 12779  00C3EC  6E03               	movwf	send_byte@data,c
 12780                           
 12781                           ;lcd.c: 57:     send_nibble(data >> 4);
 12782  00C3EE  3803               	swapf	send_byte@data,w,c
 12783  00C3F0  0B0F               	andlw	15
 12784  00C3F2  EC08  F062         	call	_send_nibble
 12785                           
 12786                           ;lcd.c: 60:     send_nibble(data);
 12787  00C3F6  5003               	movf	send_byte@data,w,c
 12788  00C3F8  EC08  F062         	call	_send_nibble
 12789  00C3FC  0012               	return		;funcret
 12790  00C3FE                     __end_of_send_byte:
 12791                           	opt callstack 0
 12792                           
 12793 ;; *************** function _send_nibble *****************
 12794 ;; Defined at:
 12795 ;;		line 44 in file "lcd.c"
 12796 ;; Parameters:    Size  Location     Type
 12797 ;;  data            1    wreg     unsigned char 
 12798 ;; Auto vars:     Size  Location     Type
 12799 ;;  data            1    1[COMRAM] unsigned char 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;                  1    wreg      void 
 12802 ;; Registers used:
 12803 ;;		wreg, status,2, status,0, cstack
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;Total ram usage:        1 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:    1
 12816 ;; This function calls:
 12817 ;;		_pulse_e
 12818 ;; This function is called by:
 12819 ;;		_send_byte
 12820 ;;		_initLCD
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           	psect	text53
 12825  00C410                     __ptext53:
 12826                           	opt callstack 0
 12827  00C410                     _send_nibble:
 12828                           	opt callstack 19
 12829                           
 12830                           ;incstack = 0
 12831                           ;send_nibble@data stored from wreg
 12832  00C410  6E02               	movwf	send_nibble@data,c
 12833                           
 12834                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
 12835  00C412  508C               	movf	3980,w,c	;volatile
 12836  00C414  0B0F               	andlw	15
 12837  00C416  6E8C               	movwf	3980,c	;volatile
 12838                           
 12839                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
 12840  00C418  3802               	swapf	send_nibble@data,w,c
 12841  00C41A  0BF0               	andlw	240
 12842  00C41C  108C               	iorwf	3980,w,c	;volatile
 12843  00C41E  6E8C               	movwf	3980,c	;volatile
 12844                           
 12845                           ;lcd.c: 48:     pulse_e();
 12846  00C420  EC7B  F062         	call	_pulse_e	;wreg free
 12847  00C424  0012               	return		;funcret
 12848  00C426                     __end_of_send_nibble:
 12849                           	opt callstack 0
 12850                           
 12851 ;; *************** function _pulse_e *****************
 12852 ;; Defined at:
 12853 ;;		line 28 in file "lcd.c"
 12854 ;; Parameters:    Size  Location     Type
 12855 ;;		None
 12856 ;; Auto vars:     Size  Location     Type
 12857 ;;  interruptSta    1    0[COMRAM] unsigned char 
 12858 ;; Return value:  Size  Location     Type
 12859 ;;                  1    wreg      void 
 12860 ;; Registers used:
 12861 ;;		wreg
 12862 ;; Tracked objects:
 12863 ;;		On entry : 0/0
 12864 ;;		On exit  : 0/0
 12865 ;;		Unchanged: 0/0
 12866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12868 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12870 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12871 ;;Total ram usage:        1 bytes
 12872 ;; Hardware stack levels used:    1
 12873 ;; This function calls:
 12874 ;;		Nothing
 12875 ;; This function is called by:
 12876 ;;		_send_nibble
 12877 ;; This function uses a non-reentrant model
 12878 ;;
 12879                           
 12880                           	psect	text54
 12881  00C4F6                     __ptext54:
 12882                           	opt callstack 0
 12883  00C4F6                     _pulse_e:
 12884                           	opt callstack 19
 12885                           
 12886                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
 12887                           
 12888                           ;incstack = 0
 12889  00C4F6  0E00               	movlw	0
 12890  00C4F8  BEF2               	btfsc	4082,7,c	;volatile
 12891  00C4FA  0E01               	movlw	1
 12892  00C4FC  6E01               	movwf	pulse_e@interruptState,c
 12893                           
 12894                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
 12895  00C4FE  9EF2               	bcf	4082,7,c	;volatile
 12896                           
 12897                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
 12898  00C500  868C               	bsf	3980,3,c	;volatile
 12899                           
 12900                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
 12901  00C502  0E14               	movlw	20
 12902  00C504                     u6647:
 12903  00C504  2EE8               	decfsz	wreg,f,c
 12904  00C506  D7FE               	bra	u6647
 12905  00C508  D000               	nop2	
 12906                           
 12907                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
 12908  00C50A  968C               	bcf	3980,3,c	;volatile
 12909                           
 12910                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
 12911  00C50C  0E53               	movlw	83
 12912  00C50E                     u6657:
 12913  00C50E  2EE8               	decfsz	wreg,f,c
 12914  00C510  D7FE               	bra	u6657
 12915  00C512  F000               	nop	
 12916                           
 12917                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
 12918  00C514  B001               	btfsc	pulse_e@interruptState,0,c
 12919  00C516  D002               	bra	u3085
 12920  00C518  9EF2               	bcf	4082,7,c	;volatile
 12921  00C51A  D001               	bra	u3086
 12922  00C51C                     u3085:
 12923  00C51C  8EF2               	bsf	4082,7,c	;volatile
 12924  00C51E                     u3086:
 12925  00C51E  0012               	return		;funcret
 12926  00C520                     __end_of_pulse_e:
 12927                           	opt callstack 0
 12928                           
 12929 ;; *************** function _I2C_Master_Init *****************
 12930 ;; Defined at:
 12931 ;;		line 32 in file "./I2C.c"
 12932 ;; Parameters:    Size  Location     Type
 12933 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 12934 ;; Auto vars:     Size  Location     Type
 12935 ;;		None
 12936 ;; Return value:  Size  Location     Type
 12937 ;;                  1    wreg      void 
 12938 ;; Registers used:
 12939 ;;		wreg, status,2, status,0, cstack
 12940 ;; Tracked objects:
 12941 ;;		On entry : 0/0
 12942 ;;		On exit  : 0/0
 12943 ;;		Unchanged: 0/0
 12944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12947 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12948 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12949 ;;Total ram usage:        8 bytes
 12950 ;; Hardware stack levels used:    1
 12951 ;; Hardware stack levels required when called:    1
 12952 ;; This function calls:
 12953 ;;		___lldiv
 12954 ;; This function is called by:
 12955 ;;		_main
 12956 ;; This function uses a non-reentrant model
 12957 ;;
 12958                           
 12959                           	psect	text55
 12960  00C820                     __ptext55:
 12961                           	opt callstack 0
 12962  00C820                     _I2C_Master_Init:
 12963                           	opt callstack 29
 12964                           
 12965                           ;./I2C.c: 34:     SSPCON1bits.SSPEN = 0;
 12966                           
 12967                           ;incstack = 0
 12968  00C820  9AC6               	bcf	4038,5,c	;volatile
 12969                           
 12970                           ;./I2C.c: 37:     TRISCbits.TRISC3 = 1;
 12971  00C822  8694               	bsf	3988,3,c	;volatile
 12972                           
 12973                           ;./I2C.c: 38:     TRISCbits.TRISC4 = 1;
 12974  00C824  8894               	bsf	3988,4,c	;volatile
 12975                           
 12976                           ;./I2C.c: 43:     SSPADD = (10000000 / (4 * clockFreq)) - 1;
 12977  00C826  0E80               	movlw	128
 12978  00C828  6E01               	movwf	___lldiv@dividend,c
 12979  00C82A  0E96               	movlw	150
 12980  00C82C  6E02               	movwf	___lldiv@dividend+1,c
 12981  00C82E  0E98               	movlw	152
 12982  00C830  6E03               	movwf	___lldiv@dividend+2,c
 12983  00C832  0E00               	movlw	0
 12984  00C834  6E04               	movwf	___lldiv@dividend+3,c
 12985  00C836  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12986  00C83A  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12987  00C83E  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12988  00C842  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12989  00C846  0E02               	movlw	2
 12990  00C848                     u5195:
 12991  00C848  90D8               	bcf	status,0,c
 12992  00C84A  3612               	rlcf	??_I2C_Master_Init,f,c
 12993  00C84C  3613               	rlcf	??_I2C_Master_Init+1,f,c
 12994  00C84E  3614               	rlcf	??_I2C_Master_Init+2,f,c
 12995  00C850  3615               	rlcf	??_I2C_Master_Init+3,f,c
 12996  00C852  2EE8               	decfsz	wreg,f,c
 12997  00C854  D7F9               	goto	u5195
 12998  00C856  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 12999  00C85A  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 13000  00C85E  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 13001  00C862  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 13002  00C866  ECE1  F064         	call	___lldiv	;wreg free
 13003  00C86A  0401               	decf	?___lldiv,w,c
 13004  00C86C  6EC8               	movwf	4040,c	;volatile
 13005                           
 13006                           ;./I2C.c: 46:     SSPSTAT = 0b10000000;
 13007  00C86E  0E80               	movlw	128
 13008  00C870  6EC7               	movwf	4039,c	;volatile
 13009                           
 13010                           ;./I2C.c: 49:     SSPCON1 = 0b00101000;
 13011  00C872  0E28               	movlw	40
 13012  00C874  6EC6               	movwf	4038,c	;volatile
 13013                           
 13014                           ;./I2C.c: 52:     SSPCON2 = 0b00000000;
 13015  00C876  0E00               	movlw	0
 13016  00C878  6EC5               	movwf	4037,c	;volatile
 13017  00C87A  0012               	return		;funcret
 13018  00C87C                     __end_of_I2C_Master_Init:
 13019                           	opt callstack 0
 13020                           
 13021 ;; *************** function ___lldiv *****************
 13022 ;; Defined at:
 13023 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  dividend        4    0[COMRAM] unsigned long 
 13026 ;;  divisor         4    4[COMRAM] unsigned long 
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;  quotient        4    8[COMRAM] unsigned long 
 13029 ;;  counter         1   12[COMRAM] unsigned char 
 13030 ;; Return value:  Size  Location     Type
 13031 ;;                  4    0[COMRAM] unsigned long 
 13032 ;; Registers used:
 13033 ;;		wreg, status,2, status,0
 13034 ;; Tracked objects:
 13035 ;;		On entry : 0/0
 13036 ;;		On exit  : 0/0
 13037 ;;		Unchanged: 0/0
 13038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13039 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13040 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13042 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13043 ;;Total ram usage:       13 bytes
 13044 ;; Hardware stack levels used:    1
 13045 ;; This function calls:
 13046 ;;		Nothing
 13047 ;; This function is called by:
 13048 ;;		_I2C_Master_Init
 13049 ;; This function uses a non-reentrant model
 13050 ;;
 13051                           
 13052                           	psect	text56
 13053  00C9C2                     __ptext56:
 13054                           	opt callstack 0
 13055  00C9C2                     ___lldiv:
 13056                           	opt callstack 29
 13057                           
 13058                           ;incstack = 0
 13059  00C9C2  0E00               	movlw	0
 13060  00C9C4  6E09               	movwf	___lldiv@quotient,c
 13061  00C9C6  0E00               	movlw	0
 13062  00C9C8  6E0A               	movwf	___lldiv@quotient+1,c
 13063  00C9CA  0E00               	movlw	0
 13064  00C9CC  6E0B               	movwf	___lldiv@quotient+2,c
 13065  00C9CE  0E00               	movlw	0
 13066  00C9D0  6E0C               	movwf	___lldiv@quotient+3,c
 13067  00C9D2  5005               	movf	___lldiv@divisor,w,c
 13068  00C9D4  1006               	iorwf	___lldiv@divisor+1,w,c
 13069  00C9D6  1007               	iorwf	___lldiv@divisor+2,w,c
 13070  00C9D8  1008               	iorwf	___lldiv@divisor+3,w,c
 13071  00C9DA  B4D8               	btfsc	status,2,c
 13072  00C9DC  D02A               	goto	l719
 13073  00C9DE  0E01               	movlw	1
 13074  00C9E0  6E0D               	movwf	___lldiv@counter,c
 13075  00C9E2  D006               	goto	l4929
 13076  00C9E4                     l4927:
 13077  00C9E4  90D8               	bcf	status,0,c
 13078  00C9E6  3605               	rlcf	___lldiv@divisor,f,c
 13079  00C9E8  3606               	rlcf	___lldiv@divisor+1,f,c
 13080  00C9EA  3607               	rlcf	___lldiv@divisor+2,f,c
 13081  00C9EC  3608               	rlcf	___lldiv@divisor+3,f,c
 13082  00C9EE  2A0D               	incf	___lldiv@counter,f,c
 13083  00C9F0                     l4929:
 13084  00C9F0  AE08               	btfss	___lldiv@divisor+3,7,c
 13085  00C9F2  D7F8               	goto	l4927
 13086  00C9F4                     u4300:
 13087  00C9F4  90D8               	bcf	status,0,c
 13088  00C9F6  3609               	rlcf	___lldiv@quotient,f,c
 13089  00C9F8  360A               	rlcf	___lldiv@quotient+1,f,c
 13090  00C9FA  360B               	rlcf	___lldiv@quotient+2,f,c
 13091  00C9FC  360C               	rlcf	___lldiv@quotient+3,f,c
 13092  00C9FE  5005               	movf	___lldiv@divisor,w,c
 13093  00CA00  5C01               	subwf	___lldiv@dividend,w,c
 13094  00CA02  5006               	movf	___lldiv@divisor+1,w,c
 13095  00CA04  5802               	subwfb	___lldiv@dividend+1,w,c
 13096  00CA06  5007               	movf	___lldiv@divisor+2,w,c
 13097  00CA08  5803               	subwfb	___lldiv@dividend+2,w,c
 13098  00CA0A  5008               	movf	___lldiv@divisor+3,w,c
 13099  00CA0C  5804               	subwfb	___lldiv@dividend+3,w,c
 13100  00CA0E  A0D8               	btfss	status,0,c
 13101  00CA10  D009               	goto	l4939
 13102  00CA12  5005               	movf	___lldiv@divisor,w,c
 13103  00CA14  5E01               	subwf	___lldiv@dividend,f,c
 13104  00CA16  5006               	movf	___lldiv@divisor+1,w,c
 13105  00CA18  5A02               	subwfb	___lldiv@dividend+1,f,c
 13106  00CA1A  5007               	movf	___lldiv@divisor+2,w,c
 13107  00CA1C  5A03               	subwfb	___lldiv@dividend+2,f,c
 13108  00CA1E  5008               	movf	___lldiv@divisor+3,w,c
 13109  00CA20  5A04               	subwfb	___lldiv@dividend+3,f,c
 13110  00CA22  8009               	bsf	___lldiv@quotient,0,c
 13111  00CA24                     l4939:
 13112  00CA24  90D8               	bcf	status,0,c
 13113  00CA26  3208               	rrcf	___lldiv@divisor+3,f,c
 13114  00CA28  3207               	rrcf	___lldiv@divisor+2,f,c
 13115  00CA2A  3206               	rrcf	___lldiv@divisor+1,f,c
 13116  00CA2C  3205               	rrcf	___lldiv@divisor,f,c
 13117  00CA2E  2E0D               	decfsz	___lldiv@counter,f,c
 13118  00CA30  D7E1               	goto	u4300
 13119  00CA32                     l719:
 13120  00CA32  C009  F001         	movff	___lldiv@quotient,?___lldiv
 13121  00CA36  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 13122  00CA3A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 13123  00CA3E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 13124  00CA42  0012               	return		;funcret
 13125  00CA44                     __end_of___lldiv:
 13126                           	opt callstack 0
 13127                           
 13128                           	psect	rparam
 13129  0000                     tosu	equ	0xFFF
 13130                           tosh	equ	0xFFE
 13131                           tosl	equ	0xFFD
 13132                           stkptr	equ	0xFFC
 13133                           pclatu	equ	0xFFB
 13134                           pclath	equ	0xFFA
 13135                           pcl	equ	0xFF9
 13136                           tblptru	equ	0xFF8
 13137                           tblptrh	equ	0xFF7
 13138                           tblptrl	equ	0xFF6
 13139                           tablat	equ	0xFF5
 13140                           prodh	equ	0xFF4
 13141                           prodl	equ	0xFF3
 13142                           indf0	equ	0xFEF
 13143                           postinc0	equ	0xFEE
 13144                           postdec0	equ	0xFED
 13145                           preinc0	equ	0xFEC
 13146                           plusw0	equ	0xFEB
 13147                           fsr0h	equ	0xFEA
 13148                           fsr0l	equ	0xFE9
 13149                           wreg	equ	0xFE8
 13150                           indf1	equ	0xFE7
 13151                           postinc1	equ	0xFE6
 13152                           postdec1	equ	0xFE5
 13153                           preinc1	equ	0xFE4
 13154                           plusw1	equ	0xFE3
 13155                           fsr1h	equ	0xFE2
 13156                           fsr1l	equ	0xFE1
 13157                           bsr	equ	0xFE0
 13158                           indf2	equ	0xFDF
 13159                           postinc2	equ	0xFDE
 13160                           postdec2	equ	0xFDD
 13161                           preinc2	equ	0xFDC
 13162                           plusw2	equ	0xFDB
 13163                           fsr2h	equ	0xFDA
 13164                           fsr2l	equ	0xFD9
 13165                           status	equ	0xFD8


Data Sizes:
    Strings     545
    Constant    18
    Data        0
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    127     127
    BANK0           128    117     127
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_68(CODE[3]), STR_64(CODE[3]), STR_59(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_68(CODE[3]), STR_64(CODE[3]), STR_59(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[14]), STR_55(CODE[15]), STR_54(CODE[8]), STR_53(CODE[13]), 
		 -> STR_52(CODE[15]), STR_51(CODE[3]), STR_50(CODE[17]), STR_49(CODE[15]), 
		 -> STR_48(CODE[11]), STR_47(CODE[13]), STR_46(CODE[12]), STR_45(CODE[13]), 
		 -> STR_44(CODE[16]), STR_43(CODE[14]), STR_42(CODE[15]), STR_41(CODE[8]), 
		 -> STR_40(CODE[13]), STR_39(CODE[15]), STR_38(CODE[3]), STR_37(CODE[17]), 
		 -> STR_36(CODE[15]), STR_35(CODE[11]), STR_34(CODE[13]), STR_33(CODE[12]), 
		 -> STR_32(CODE[13]), STR_31(CODE[16]), STR_30(CODE[14]), STR_29(CODE[16]), 
		 -> STR_28(CODE[6]), STR_27(CODE[14]), STR_26(CODE[9]), STR_25(CODE[16]), 
		 -> STR_24(CODE[11]), STR_23(CODE[14]), STR_22(CODE[17]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[9]), STR_18(CODE[8]), STR_17(CODE[10]), 
		 -> STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[3]), STR_13(CODE[2]), 
		 -> STR_12(CODE[12]), STR_11(CODE[14]), STR_10(CODE[13]), STR_9(CODE[13]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[20]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[9]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[14]), STR_55(CODE[15]), STR_54(CODE[8]), STR_53(CODE[13]), 
		 -> STR_52(CODE[15]), STR_51(CODE[3]), STR_50(CODE[17]), STR_49(CODE[15]), 
		 -> STR_48(CODE[11]), STR_47(CODE[13]), STR_46(CODE[12]), STR_45(CODE[13]), 
		 -> STR_44(CODE[16]), STR_43(CODE[14]), STR_42(CODE[15]), STR_41(CODE[8]), 
		 -> STR_40(CODE[13]), STR_39(CODE[15]), STR_38(CODE[3]), STR_37(CODE[17]), 
		 -> STR_36(CODE[15]), STR_35(CODE[11]), STR_34(CODE[13]), STR_33(CODE[12]), 
		 -> STR_32(CODE[13]), STR_31(CODE[16]), STR_30(CODE[14]), STR_29(CODE[16]), 
		 -> STR_28(CODE[6]), STR_27(CODE[14]), STR_26(CODE[9]), STR_25(CODE[16]), 
		 -> STR_24(CODE[11]), STR_23(CODE[14]), STR_22(CODE[17]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[9]), STR_18(CODE[8]), STR_17(CODE[10]), 
		 -> STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[3]), STR_13(CODE[2]), 
		 -> STR_12(CODE[12]), STR_11(CODE[14]), STR_10(CODE[13]), STR_9(CODE[13]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[20]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[9]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[14]), STR_55(CODE[15]), STR_54(CODE[8]), STR_53(CODE[13]), 
		 -> STR_52(CODE[15]), STR_51(CODE[3]), STR_50(CODE[17]), STR_49(CODE[15]), 
		 -> STR_48(CODE[11]), STR_47(CODE[13]), STR_46(CODE[12]), STR_45(CODE[13]), 
		 -> STR_44(CODE[16]), STR_43(CODE[14]), STR_42(CODE[15]), STR_41(CODE[8]), 
		 -> STR_40(CODE[13]), STR_39(CODE[15]), STR_38(CODE[3]), STR_37(CODE[17]), 
		 -> STR_36(CODE[15]), STR_35(CODE[11]), STR_34(CODE[13]), STR_33(CODE[12]), 
		 -> STR_32(CODE[13]), STR_31(CODE[16]), STR_30(CODE[14]), STR_29(CODE[16]), 
		 -> STR_28(CODE[6]), STR_27(CODE[14]), STR_26(CODE[9]), STR_25(CODE[16]), 
		 -> STR_24(CODE[11]), STR_23(CODE[14]), STR_22(CODE[17]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[9]), STR_18(CODE[8]), STR_17(CODE[10]), 
		 -> STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[3]), STR_13(CODE[2]), 
		 -> STR_12(CODE[12]), STR_11(CODE[14]), STR_10(CODE[13]), STR_9(CODE[13]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[20]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1841_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[14]), STR_55(CODE[15]), STR_54(CODE[8]), STR_53(CODE[13]), 
		 -> STR_52(CODE[15]), STR_51(CODE[3]), STR_50(CODE[17]), STR_49(CODE[15]), 
		 -> STR_48(CODE[11]), STR_47(CODE[13]), STR_46(CODE[12]), STR_45(CODE[13]), 
		 -> STR_44(CODE[16]), STR_43(CODE[14]), STR_42(CODE[15]), STR_41(CODE[8]), 
		 -> STR_40(CODE[13]), STR_39(CODE[15]), STR_38(CODE[3]), STR_37(CODE[17]), 
		 -> STR_36(CODE[15]), STR_35(CODE[11]), STR_34(CODE[13]), STR_33(CODE[12]), 
		 -> STR_32(CODE[13]), STR_31(CODE[16]), STR_30(CODE[14]), STR_29(CODE[16]), 
		 -> STR_28(CODE[6]), STR_27(CODE[14]), STR_26(CODE[9]), STR_25(CODE[16]), 
		 -> STR_24(CODE[11]), STR_23(CODE[14]), STR_22(CODE[17]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[9]), STR_18(CODE[8]), STR_17(CODE[10]), 
		 -> STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[3]), STR_13(CODE[2]), 
		 -> STR_12(CODE[12]), STR_11(CODE[14]), STR_10(CODE[13]), STR_9(CODE[13]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[20]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[9]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[14]), STR_55(CODE[15]), STR_54(CODE[8]), STR_53(CODE[13]), 
		 -> STR_52(CODE[15]), STR_51(CODE[3]), STR_50(CODE[17]), STR_49(CODE[15]), 
		 -> STR_48(CODE[11]), STR_47(CODE[13]), STR_46(CODE[12]), STR_45(CODE[13]), 
		 -> STR_44(CODE[16]), STR_43(CODE[14]), STR_42(CODE[15]), STR_41(CODE[8]), 
		 -> STR_40(CODE[13]), STR_39(CODE[15]), STR_38(CODE[3]), STR_37(CODE[17]), 
		 -> STR_36(CODE[15]), STR_35(CODE[11]), STR_34(CODE[13]), STR_33(CODE[12]), 
		 -> STR_32(CODE[13]), STR_31(CODE[16]), STR_30(CODE[14]), STR_29(CODE[16]), 
		 -> STR_28(CODE[6]), STR_27(CODE[14]), STR_26(CODE[9]), STR_25(CODE[16]), 
		 -> STR_24(CODE[11]), STR_23(CODE[14]), STR_22(CODE[17]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[9]), STR_18(CODE[8]), STR_17(CODE[10]), 
		 -> STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[3]), STR_13(CODE[2]), 
		 -> STR_12(CODE[12]), STR_11(CODE[14]), STR_10(CODE[13]), STR_9(CODE[13]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[20]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[14]), STR_55(CODE[15]), STR_54(CODE[8]), STR_53(CODE[13]), 
		 -> STR_52(CODE[15]), STR_51(CODE[3]), STR_50(CODE[17]), STR_49(CODE[15]), 
		 -> STR_48(CODE[11]), STR_47(CODE[13]), STR_46(CODE[12]), STR_45(CODE[13]), 
		 -> STR_44(CODE[16]), STR_43(CODE[14]), STR_42(CODE[15]), STR_41(CODE[8]), 
		 -> STR_40(CODE[13]), STR_39(CODE[15]), STR_38(CODE[3]), STR_37(CODE[17]), 
		 -> STR_36(CODE[15]), STR_35(CODE[11]), STR_34(CODE[13]), STR_33(CODE[12]), 
		 -> STR_32(CODE[13]), STR_31(CODE[16]), STR_30(CODE[14]), STR_29(CODE[16]), 
		 -> STR_28(CODE[6]), STR_27(CODE[14]), STR_26(CODE[9]), STR_25(CODE[16]), 
		 -> STR_24(CODE[11]), STR_23(CODE[14]), STR_22(CODE[17]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[9]), STR_18(CODE[8]), STR_17(CODE[10]), 
		 -> STR_16(CODE[14]), STR_15(CODE[14]), STR_14(CODE[3]), STR_13(CODE[2]), 
		 -> STR_12(CODE[12]), STR_11(CODE[14]), STR_10(CODE[13]), STR_9(CODE[13]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[20]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    options@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 

    options@bottomMagTires	PTR unsigned char  size(2) Largest target is 1
		 -> main@bottomMagTires(BANK0[1]), 

    options@topMagTires	PTR unsigned char  size(2) Largest target is 1
		 -> main@topMagTires(BANK0[1]), 

    selectLog@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 

    selectLog@displayRun	PTR struct . size(2) Largest target is 43
		 -> main@displayRun(BANK0[43]), 

    saveRun@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 

    saveRun@currentRun	PTR struct . size(2) Largest target is 43
		 -> main@currentRun(BANK0[43]), 

    poleInfo@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 

    poleInfo@displayRun	PTR struct . size(2) Largest target is 43
		 -> main@displayRun(BANK0[43]), 

    poleInfo@polePage	PTR unsigned char  size(2) Largest target is 1
		 -> main@polePage(BANK0[1]), 

    runInfoMenu@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 

    runInfoMenu@displayRun	PTR struct . size(2) Largest target is 43
		 -> main@displayRun(BANK0[43]), 

    runFinishedMenu@logs	PTR _Bool  size(2) Largest target is 1
		 -> main@logs(BANK0[1]), 

    runFinishedMenu@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 

    runFinished@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 

    runFinished@displayRun	PTR struct . size(2) Largest target is 43
		 -> main@displayRun(BANK0[43]), 

    runFinished@logs	PTR _Bool  size(2) Largest target is 1
		 -> main@logs(BANK0[1]), 

    runFinished@polePage	PTR unsigned char  size(2) Largest target is 1
		 -> main@polePage(BANK0[1]), 

    runFinished@currentRun	PTR struct . size(2) Largest target is 43
		 -> main@currentRun(BANK0[43]), 

    start@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 

    start@bottomMagTires	PTR unsigned char  size(2) Largest target is 1
		 -> main@bottomMagTires(BANK0[1]), 

    start@topMagTires	PTR unsigned char  size(2) Largest target is 1
		 -> main@topMagTires(BANK0[1]), 

    start@currentRun	PTR struct . size(2) Largest target is 43
		 -> main@currentRun(BANK0[43]), 

    mainMenu@menu	PTR unsigned char  size(2) Largest target is 1
		 -> main@menu(BANK0[1]), 


Critical Paths under _main in COMRAM

    _main->_mainMenu
    _main->_poleInfo
    _start->_printf
    ___fltol->___flmul
    ___flmul->___xxtofl
    ___fladd->___flmul
    _selectLog->_printf
    _saveRun->_printf
    _runInfoMenu->_printf
    _runFinishedMenu->_printf
    _runFinished->_printf
    _writeByteToDriveArduino->_I2C_Master_Write
    _bcdToDec->___awdiv
    _poleInfo->_printf
    _options->_printf
    _topMagStepper->___wmul
    _bottomMagStepper->___wmul
    _mainMenu->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _atoi->___wmul
    ___wmul->_bcdToDec
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_start

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                93    93      0  202213
                                             24 BANK0     93    93      0
                    _I2C_Master_Init
                            _initLCD
                            _lcdInst
                           _mainMenu
                            _options
                           _poleInfo
                        _runFinished
                    _runFinishedMenu
                        _runInfoMenu
                            _saveRun
                          _selectLog
                              _start
 ---------------------------------------------------------------------------------
 (1) _start                                               32    24      8   31852
                                            113 COMRAM     8     0      8
                                              0 BANK0     24    24      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___fladd
                            ___flmul
                            ___fltol
                            ___lwdiv
                            ___lwmod
                           ___xxtofl
                   _bottomMagStepper
                            _lcdInst
                             _printf
                      _topMagStepper
            _writeByteToDriveArduino
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     398
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     305
                                             39 COMRAM    10     6      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    1896
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             16     8      8    2388
                                             39 COMRAM    16     8      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _selectLog                                            6     2      4   19811
                                            113 COMRAM     6     2      4
                           _Read_eep
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Read_eep                                             2     0      2     348
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _saveRun                                              6     2      4   20161
                                            113 COMRAM     6     2      4
                          _Write_eep
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Write_eep                                            4     1      3     698
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _runInfoMenu                                          7     2      5   20625
                                            113 COMRAM     7     2      5
                            ___awdiv
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     492
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _runFinishedMenu                                      6     2      4   19353
                                            113 COMRAM     6     2      4
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _runFinished                                         20    10     10   24349
                                            113 COMRAM    10     0     10
                                              0 BANK0     10    10      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                           _bcdToDec
                            _lcdInst
                             _printf
            _writeByteToDriveArduino
 ---------------------------------------------------------------------------------
 (2) _writeByteToDriveArduino                              1     1      0    1412
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _bcdToDec                                             2     2      0     594
                                              8 COMRAM     2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     550
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _poleInfo                                            14     8      6   20710
                                            113 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     463
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _options                                             15     9      6   22711
                                            113 COMRAM     8     2      6
                                              0 BANK0      7     7      0
                             ___wmul
                   _bottomMagStepper
                            _lcdInst
                             _printf
                      _topMagStepper
 ---------------------------------------------------------------------------------
 (2) _topMagStepper                                        7     4      3     797
                                             16 COMRAM     7     4      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _bottomMagStepper                                     7     4      3     797
                                             16 COMRAM     7     4      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                            14    12      2   21101
                                            113 COMRAM    14    12      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              12     4      8   19002
                                            101 COMRAM    12     4      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   14684
                                             93 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           46    40      6   14299
                                             70 COMRAM    23    17      6
                               _atoi
                              _fputc
                            _isdigit
                            _strncmp
                               _utoa
                               _xtoa
 ---------------------------------------------------------------------------------
 (5) _xtoa                                                39    28     11    4809
                                             31 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              8     6      2     412
                                              6 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (7) _islower                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _isupper                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _utoa                                                32    22     10    4229
                                             31 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    3027
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1280
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4     879
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (6) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (5) _strncmp                                             11     5      6     909
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (5) _atoi                                                15    13      2    1898
                                             16 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1057
                                             10 COMRAM     6     2      4
                           _bcdToDec (ARG)
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1390
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (10) _send_byte                                           1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (11) _send_nibble                                         1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (12) _pulse_e                                             1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _mainMenu
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _options
     ___wmul
       _bcdToDec (ARG)
         ___awdiv
     _bottomMagStepper
       ___wmul (ARG)
         _bcdToDec (ARG)
           ___awdiv
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
     _topMagStepper
       ___wmul (ARG)
         _bcdToDec (ARG)
           ___awdiv
   _poleInfo
     ___lwdiv
     ___lwmod
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _runFinished
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
       _bcdToDec (ARG)
         ___awdiv
     _bcdToDec
       ___awdiv
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
     _writeByteToDriveArduino
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _runFinishedMenu
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _runInfoMenu
     ___awdiv
     ___awmod
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _saveRun
     _Write_eep
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _selectLog
     _Read_eep
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _start
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         ___xxtofl (ARG)
     ___lwdiv
     ___lwmod
     ___xxtofl
     _bottomMagStepper
       ___wmul (ARG)
         _bcdToDec (ARG)
           ___awdiv
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
               _bcdToDec (ARG)
                 ___awdiv
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
     _topMagStepper
       ___wmul (ARG)
         _bcdToDec (ARG)
           ___awdiv
     _writeByteToDriveArduino
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      7F       5       99.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7F      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 09 13:08:30 2019

                                   _i 00FE                           __CFG_CPD$ON 000000  
                        ___awdiv@sign 0006                   ___wmul@multiplicand 000D  
                         __CFG_BORV$3 000000                          __CFG_CP0$OFF 000000  
                        __CFG_CP1$OFF 000000                          __CFG_CP2$OFF 000000  
                        __CFG_CP3$OFF 000000                           __CFG_OSC$HS 000000  
                                 l141 E11A                                   l310 D6DA  
                                 l135 C554                                   l311 D77C  
                                 l304 CE36                                   l312 D788  
                                 l216 F5B6                                   l233 F916  
                                 l217 F5EE                                   l162 D000  
                                 l410 F074                                   l322 D7EE  
                                 l234 F900                                   l226 F69C  
                                 l403 F03E                                   l243 F990  
                                 l420 F0FA                                   l340 E424  
                                 l157 E1E4                                   l413 F0C4  
                                 l261 FB52                                   l237 F97E  
                                 l238 F96E                                   l423 F116  
                                 l247 F9A4                                   l239 F97A  
                                 l328 E35C                                   l273 FDA8  
                                 l257 FAF0                                   l610 D9C8  
                                 l346 C69C                                   l355 D52A  
                                 l189 CF1A                                   l453 F324  
                                 l445 F290                                   l373 D644  
                                 l446 F2EE                                   l438 F19C  
                                 l623 DDA0                                   l463 F3AA  
                                 l608 D9C0                                   l456 F374  
                                 l296 CDD2                                   l625 DDA8  
                                 l481 F44C                                   l466 F3C6  
                                 l379 D3B4                                   l397 D4C6  
                                 l719 CA32                                   l598 CAF8  
                        __CFG_CPB$OFF 000000                                   _pad CAC8  
                        ___awmod@sign 0006               _writeByteToDriveArduino C54A  
                                 prod 000FF3                                   wreg 000FE8  
                        ___flmul@aexp 0020                          ___flmul@bexp 0021  
                        ___flmul@sign 001B                          ___flmul@temp 0026  
                        ___flmul@prod 0022                          runFinished@i 0089  
                        __CFG_LVP$OFF 000000                          ___fltol@exp1 0031  
                        __CFG_WDT$OFF 000000                                  l1130 CEE8  
                                l1140 CC98                                  l1221 E56C  
                                l1222 E54A                                  l1306 E7B6  
                                l1323 EA54                                  l1315 E9CE  
                                l1316 E9CA                                  l1237 E63E  
                                l1246 E6A4                                  l1183 C7C0  
                                l1247 E6A0                                  l1193 C724  
                                l1354 D2D2                                  l1347 D254  
                                l1391 D20C                                  l1467 C76E  
                                l5101 E682                                  l5021 E4FE  
                                l6001 D7C4                                  l5121 E6EA  
                                l5033 E558                                  l4331 CE76  
                                l4243 C8FE                                  l5035 E55C  
                                l4341 CED2                                  l4253 C646  
                                l4261 C52A                                  l6005 D7D2  
                                l6101 D57E                                  l5133 E718  
                                l4503 D1AC                                  l4351 CC3A  
                                l4263 C52E                                  l5303 C9AA  
                                l6111 D5A8                                  l5135 E71A  
                                l4329 CE62                                  l4257 C65C  
                                l4281 CAF0                                  l4433 DE0E  
                                l4425 DDEC                                  l6041 E394  
                                l6201 D42E                                  l5129 E710  
                                l5057 E5B2                                  l5049 E590  
                                l5233 E994                                  l5161 E776  
                                l4523 CB8C                                  l4291 CB48  
                                l4283 CB02                                  l4419 DDBC  
                                l6043 E3A4                                  l6035 E36C  
                                l6051 E402                                  l5307 C9B8  
                                l6123 D5D6                                  l6115 D5B0  
                                l5059 E5B6                                  l5067 E5C8  
                                l5227 E976                                  l5411 D2BA  
                                l4525 CB9A                                  l4357 CC82  
                                l4349 CC26                                  l4277 CAE2  
                                l6037 E378                                  l4701 CA58  
                                l6125 D5DA                                  l6109 D5A4  
                                l6141 D616                                  l6213 D45A  
                                l6205 D436                                  l5085 E662  
                                l5077 E62E                                  l5253 EA12  
                                l5157 E762                                  l5333 CD22  
                                l5317 CCD8                                  l5405 D282  
                                ?_pad 0015                                  l4287 CB1A  
                                l4471 DF8A                                  l4447 DE9C  
                                l4455 DF12                                  l4615 ED6E  
                                l4607 ECD4                                  l4551 EACE  
                                l6311 F136                                  l6303 F126  
                                l6047 E3EA                                  l6215 D45E  
                                l6231 D498                                  l5095 E678  
                                l5175 E7A2                                  l5159 E766  
                                l5351 CD62                                  l5343 CD3A  
                                l5407 D288                                  l4369 C6E4  
                                l4385 DA00                                  l4553 EAD2  
                                l4801 D07C                                  l6321 F14A  
                                l6313 F13A                                  l6305 F12A  
                                l5361 C78E                                  l4713 CA7E  
                                l6137 D608                                  l6129 D5E2  
                                l6081 D53A                                  l5257 EA30  
                                l5185 E7D4                                  l5177 E7A6  
                                l5345 CD46                                  l5337 CD32  
                                l5417 D2F8                                  l5409 D294  
                                l5601 F666                                  l4395 DAEC  
                                l4643 EF40                                  l4571 EAFA  
                                l4563 EAEE                                  l4555 EAE2  
                                l5515 E15E                                  l5507 E12A  
                                l5531 E1C2                                  l4811 D09C  
                                l6411 F308                                  l6315 F13E  
                                l6307 F12E                                  l5363 C796  
                                l4715 CA86                                  l4707 CA68  
                                l5291 C980                                  l5283 C966  
                                l6083 D53E                                  l6227 D48A  
                                l6219 D466                                  l6171 D3C4  
                                l5435 D344                                  l5419 D304  
                                l4493 D142                                  l4477 D0E8  
                                l4653 EF86                                  l4629 EE72  
                                l5525 E1A8                                  l4813 D0AC  
                                l6405 F2FE                                  l6333 F1C4  
                                l6317 F142                                  l6309 F132  
                                l6325 F150                                  l5373 C7B6  
                                l5381 C6FA                                  l4733 CABE  
                                l4725 CAA6                                  l5293 C988  
                                l6093 D566                                  l6173 D3C8  
                                l5269 EA72                                  l4495 D14A  
                                l4487 D132                                  l4479 D0EC  
                                l4591 EBD2                                  l4575 EB04  
                                l4567 EAF4                                  l4559 EAE8  
                                l5527 E1B4                                  l5471 E026  
                                l5463 DFF2                                  l6431 F384  
                                l6407 F302                                  l6319 F146  
                                l6263 F04E                                  l5383 C702  
                                l5287 C972                                  l6095 D572  
                                l6087 D546                                  l6191 D406  
                                l6183 D3EE                                  l4497 D150  
                                l4649 EF7C                                  l4593 EBE0  
                                l4577 EB46                                  l4833 CF4C  
                                l4825 CF24                                  l6433 F388  
                                l6265 F052                                  l4729 CAB0  
                                l6097 D576                                  l6185 D3FA  
                                l6177 D3D0                                  l5609 F694  
                                l4499 D178                                  l4659 EF9E  
                                l4691 C804                                  l4835 CF54  
                                l4771 D00A                                  l6451 F3E2  
                                l6291 F0D8                                  l5299 C9A0  
                                l6187 D3FE                                  l4589 EBB4  
                                l5493 E0CE                                  l4845 CF78  
                                l4781 D03A                                  l6461 F3F6  
                                l6453 F3E6                                  l6445 F3D6  
                                l6437 F38E                                  l6269 F058  
                                l5389 C71A                                  l5821 FCCA  
                                l5741 FAD6                                  l5733 F9EC  
                                l6621 D8C2                                  l4927 C9E4  
                                l4855 CF96                                  l4839 CF70  
                                l4791 D05E                                  l6527 F540  
                                l6463 F3FA                                  l6455 F3EA  
                                l6447 F3DA                                  l6295 F0DE  
                                l6199 D42A                                  l5399 D264  
                                l5719 F9AC                                  l6631 D93C  
                                l6623 D8DC                                  l6615 D860  
                                l4929 C9F0                                  l4689 C7DE  
                                l4865 CFB6                                  l4785 D056  
                                l6457 F3EE                                  l6449 F3DE  
                                l6289 F0D4                                  l5841 FD08  
                                l5809 FC8A                                  l5737 FA64  
                                l5681 F938                                  l6625 D8FA  
                                l6617 D86E                                  l4939 CA24  
                                l4867 CFC6                                  l4779 D032  
                                l6475 F474                                  l6459 F3F2  
                                l6467 F400                                  l5907 DC3E  
                                l4955 E456                                  l5667 F8E2  
                                l6627 D910                                  l6619 D894  
                                l6635 D958                                  l5853 FDA2  
                                l6629 D926                                  l5951 CDE2  
                                l4991 E4C2                                  l4983 E4A2  
                                l4959 E45A                                  l5953 CDEE  
                                l5849 FD58                                  l5777 FBA6  
                                l5955 CDFA                                  l4979 E49E  
                                l5893 DBB0                                  l5959 CE14  
                                l5799 FC4C                                  l5897 DBF4  
                                l5993 D798                                  l5997 D7B2  
                                STR_1 FFC3                                  STR_2 FE4A  
                                STR_3 FE5B                                  STR_4 FED8  
                                STR_5 FDDD                                  STR_6 FF9C  
                                STR_7 FFB1                                  STR_8 FE9C  
                                STR_9 FF61                                  u3100 C8F6  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  u3120 C93E  
                                _LATD 000F8C                                  _LATE 000F8D  
                                u3210 C5D0                                  u3220 C5D2  
                                u3301 CE42                                  u3230 C634  
                                u3150 C600                                  u4110 D0BE  
                                u4030 D02C                                  u3320 CE7A  
                                u3400 D9B6                                  u3240 C636  
                                u3160 C602                                  u3250 C756  
                                u4130 D0CC                                  u5010 CD4C  
                                u4300 C9F4                                  u3260 C758  
                                u3500 DE40                                  u3085 C51C  
                                u3086 C51E                                  u3350 CC3E  
                                u3430 DB16                                  u3510 DE42  
                                u3431 DB14                                  u3280 C5A0  
                                u3440 DB24                                  u3600 DF52  
                                u4240 CFD8                                  u4160 CF46  
                                u5040 C79A                                  u3290 C5A2  
                                u3450 DB2A                                  u3610 DF58  
                                u3530 DE7A                                  u4410 E520  
                                u3380 C6E0                                  u3540 DE7C  
                                u4260 CFE6                                  u4420 E530  
                                u3470 DD96                                  u5070 C706  
                                u4430 E532                                  u5150 D30E  
                                u3640 D12E                                  u3560 DEEE  
                                u3570 DF22                                  u3490 DE0A  
                                u4610 E69A                                  u3660 D1DC  
                                u3740 CBE6                                  u3900 EEA6  
                                u3820 EC18                                  u4460 E574  
                                u3565 DEDC                                  u4285 C6A8  
                                u3670 D1DE                                  u3590 DF44  
                                u3830 EC1A                                  u4286 C6AA  
                                u3591 DF42                                  u6207 F8F2  
                                u3840 EC26                                  u5600 FBC4  
                                u5520 F9E8                                  u6217 F90A  
                                u5610 FBE6                                  u5370 F698  
                                u5290 F5E0                                  u5195 C848  
                                u6307 FB76                                  u6227 F922  
                                u5460 F982                                  u6317 FB8E  
                                u6237 F93C                                  u6157 F5A4  
                                u4670 E6F6                                  u4590 E686  
                                u4830 E9C4                                  u5711 DD6C  
                                u6407 FD46                                  u6327 FBCE  
                                u6247 F958                                  u6167 F604  
                                u3880 EDC6                                  u3960 CA8A  
                                u6417 FDAE                                  u6337 FC3C  
                                u6257 F986                                  u6177 F61C  
                                u4930 C98C                                  u6507 F084  
                                u6427 D362                                  u6347 FC5E  
                                u6267 F9BE                                  u6187 F8AC  
                                u5740 D6CE                                  u4780 E7C2  
                                u6517 F1EA                                  u6437 D4D8  
                                u6357 FC76                                  u6277 FAD8  
                                u6197 F8CE                                  u4870 EA20  
                                u4790 E938                                  u6607 C882  
                                u6527 F282                                  u6447 D656  
                                u6367 FCBC                                  u6287 FAEA  
                                u5680 DC04                                  u4880 EA3E  
                                u4960 CCC6                                  u6617 C89A  
                                u6537 F29C                                  u6457 CD80  
                                u6377 FCFC                                  u6297 FAF6  
                                u4970 CCF6                                  u6627 C8AC  
                                u3995 C47C                                  u6547 F334  
                                u6467 DB72                                  u4795 E92E  
                                u6387 FD14                                  u3996 C47E  
                                u6637 C8CE                                  u6557 F49A  
                                u6477 C54E                                  u6397 FD2E  
                                u6647 C504                                  u6567 F532  
                                u6487 E1F6                                  u4975 CCEC  
                                u6657 C50E                                  u6577 D0A2  
                                u6497 EFEC                                  u6587 CFBC  
                                u6597 DFC0                       ??_topMagStepper 0014  
                                _dbuf 011C                                  _atoi D0D6  
                                _main D7F4                                  _prec 00F9  
                                _nout 00F5                                  pad@i 001C  
                                pad@p 0019                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                pad@w 001E                                  fsr2l 000FD9  
                                _utoa D9A2              options@bottomMagTireMove 0083  
                                _xtoa DD82                                  prodh 000FF4  
                                prodl 000FF3                                  start 0000  
                       __CFG_IESO$OFF 000000                         __CFG_MCLRE$ON 000000  
                        ___param_bank 000000                                 ??_pad 001B  
               I2C_Master_Read@ackBit 0002                      ?_I2C_Master_Init 000E  
                    ?_I2C_Master_Read 0001                      ?_I2C_Master_Wait 0001  
                    ?_I2C_Master_Stop 0001        topMagStepper@topMagCurrentStep 0016  
                       ___fltol@sign1 0030                                 ?_atoi 0011  
                     __end_of___fladd E736                                 ?_main 0001  
                     __end_of___awdiv CAC8                                 _EEADR 000FA9  
                               STR_10 FF54                                 STR_11 FF1F  
                               STR_12 FF6E                                 STR_20 FE04  
                               STR_13 FFFC                                 STR_21 FDF1  
                               STR_14 FFA4                                 STR_30 FF1F  
                               STR_22 FE39                                 STR_15 FF03  
                               STR_23 FEE7                                 STR_31 FE7C  
                               STR_24 FF86                                 STR_40 FF47  
                               STR_32 FF2D                                 STR_16 FF11  
                               STR_41 FFD5                                 STR_17 FFA7  
                               STR_33 FF7A                                 STR_25 FE6C  
                               STR_18 FFE5                                 STR_26 FFBA  
                               STR_34 FF3A                                 STR_42 FEC9  
                               STR_50 FE28                                 STR_27 FEE7  
                               STR_51 FFA4                                 STR_19 FFCC  
                               STR_35 FF91                                 STR_43 FEF5  
                               STR_52 FEBA                                 STR_28 FFED  
                               STR_36 FEAB                                 STR_44 FE8C  
                     __end_of___awmod C9C2                                 STR_29 FE6C  
                               STR_45 FF2D                                 STR_53 FF47  
                               STR_37 FE17                                 STR_46 FF7A  
                               STR_38 FFA4                                 STR_62 FFF9  
                               STR_54 FFDD                                 STR_47 FF3A  
                               STR_39 FEBA                                 STR_48 FF91  
                               STR_64 FFF9                                 STR_49 FEAB  
                               STR_57 FFF6                                 STR_66 FFF3  
                               STR_59 FFF6                                 STR_68 FFF3  
                     __end_of___flmul EA88                       __end_of___fltol CD74  
                     __end_of___lldiv CA44                                 ?_utoa 0020  
                     __end_of___lodiv CF0A                       ___awdiv@divisor 0003  
                               ?_xtoa 0020                       __end_of___lomod CCBA  
                     __end_of___lwdiv C7CA                       __end_of___lwmod C72E  
                     ___awdiv@counter 0005                          vfpfcnvrt@fmt 0049  
                        vfpfcnvrt@llu 0056                                 _PORTB 000F81  
                               _TRISA 000F92                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TRISD 000F95  
                               _TRISE 000F96                         __CFG_PWRT$OFF 000000  
                       __CFG_WRT0$OFF 000000                         __CFG_WRT1$OFF 000000  
                       __CFG_WRT2$OFF 000000                         __CFG_WRT3$OFF 000000  
                     __end_of_lcdInst C3E0                        __CFG_EBTR0$OFF 000000  
                      __CFG_FCMEN$OFF 000000                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
                       __CFG_WRTB$OFF 000000                         __CFG_WRTC$OFF 000000  
                       __CFG_WRTD$OFF 000000                       __end_of_initLCD C8E6  
                      __CFG_EBTRB$OFF 000000                                 _flags 00FB  
                        main@polePage 009D                                 _fputc C8E6  
                     __end_of_isalpha C63C                                 _fputs C63C  
                     __end_of_isdigit C5A8                                 atoi@n 001E  
                               pad@fp 0015                                 atoi@s 0011  
                               _width 00F7                                 _putch C3E0  
                               _start F54E                       __end_of_islower C608  
                     __end_of_isspace C6EC                       __end_of_saveRun D64A  
                     __end_of_isupper C5D8                                 tablat 000FF5  
                     send_nibble@data 0002                       __end_of_options F54E  
                               plusw1 000FE3                                 plusw2 000FDB  
                     __end_of_pulse_e C520                                 utoa@d 0022  
                               utoa@i 003E                                 utoa@n 0036  
                               utoa@p 0032                                 utoa@w 0034  
                               status 000FD8           I2C_Master_Read@receivedByte 0003  
                               xtoa@c 0045                                 xtoa@d 0022  
                               xtoa@i 0043                                 xtoa@n 003B  
                               xtoa@p 0037                                 xtoa@w 0039  
                               xtoa@x 002A                       __end_of_strncmp CC0C  
                     __end_of_toupper C778                      ___lodiv@dividend 0001  
                      __CFG_PBADEN$ON 000000                          _toupper$1899 000D  
                     __initialization C43E                          mainMenu@menu 0072  
                        mainMenu@time 0076                          __end_of_atoi D216  
                        __end_of_main D9A2                          __end_of_utoa DB54  
                        __end_of_xtoa DFB4                      __end_of_Read_eep C43E  
           ??_writeByteToDriveArduino 0004                                ??_atoi 0013  
                              ??_main 0098                                ??_utoa 002A  
                              ??_xtoa 002B                         __activetblptr 000002  
               options@topMagTireMove 0082                     ?_I2C_Master_Start 0001  
               bottomMagStepper@steps 0011                      ___lodiv@quotient 0011  
                   ?_I2C_Master_Write 0002                     runFinished@endSec 0087  
                  ??_I2C_Master_Start 0002                                _ADCON1 000FC1  
                  ??_I2C_Master_Write 0004                     saveRun@currentRun 0074  
                        ?_send_nibble 0001                                ?_fputc 0005  
                              ?_fputs 000E                                _EEADRH 000FAA  
                              _EEDATA 000FA8                                _EECON2 000FA7  
                    ___awdiv@dividend 0001                      __end_of_bcdToDec C4F6  
                              ?_putch 0001                                ?_start 0072  
                       vfpfcnvrt@done 0051                                _SSPADD 000FC8  
                              _SSPBUF 000FC9                      __end_of___xxtofl D356  
                      __CFG_XINST$OFF 000000                          vfprintf@cfmt 0064  
                    __end_of_mainMenu E1EA                             ??___fladd 0030  
                              ___wmul C484                             ??___awdiv 0005  
                      __CFG_STVREN$ON 000000                             ??___awmod 0005  
                           ??___flmul 0017                             ??___fltol 002C  
                           ??___lldiv 0009                             ??___lodiv 0011  
                    __end_of_maxPoles FDD7                             ??___lomod 0011  
                           ??___lwdiv 0005                             ??___lwmod 0005  
            __size_of_runFinishedMenu 00C8                                clear_0 C444  
                              clear_1 C450                      ___awdiv@quotient 0007  
                     ___awmod@divisor 0003                       ___awmod@counter 0005  
                           ??_lcdInst 0004                                _printf C4AA  
                              pad@buf 0017                                _strlen C520  
                           ??_initLCD 0005                     ?_bottomMagStepper 0011  
                    __end_of_poleInfo E42A                                fputc@c 0005  
                              fputs@c 0012                                fputs@i 0013  
                              fputs@s 000E                             ??_isalpha 0003  
                           ??_isdigit 0003                             ??_islower 0003  
                        __mediumconst FDCA                             ??_isspace 0003  
                           ??_saveRun 0076                    ??_bottomMagStepper 0014  
                              tblptrh 000FF7                  topMagStepper@forward 0013  
                           ??_isupper 0003                                tblptrl 000FF6  
                              tblptru 000FF8                             ??_options 0078  
                    __end_of_vfprintf C820                             ??_pulse_e 0001  
                              utoa@fp 0020                          ?_runFinished 0072  
                              xtoa@fp 0020                             ??_strncmp 0007  
                           ??_toupper 0009                          ?_runInfoMenu 0072  
                     _singleTireSteps FDD2                          ___xxtofl@arg 000B  
               pulse_e@interruptState 0001                          ___xxtofl@exp 000A  
                        ___xxtofl@val 0001       __end_of_writeByteToDriveArduino C578  
                          __accesstop 0080               __end_of__initialization C456  
                  __size_of_Write_eep 003A                         ___rparam_used 000001  
                          ___fltol@f1 0028                         mainMenu@i_885 007E  
                       mainMenu@i_894 007F                        __pcstackCOMRAM 0001  
bottomMagStepper@bottomMagCurrentStep 0016                         __end_of_fputc C952  
                       __end_of_fputs C674                         __end_of_putch C3EC  
                       __end_of_start FDCA                          Read_eep@badd 0001  
                     runFinished@menu 0072                       runFinished@logs 007A  
                      options@forward 0085                       start@armReached 0090  
                             ??_fputc 0009                               ??_fputs 0012  
                             ??_putch 0004                               ??_start 0080  
                          __pbssBANK0 00F5                            __pbssBANK1 0100  
              options@topMagTireCheck 0081                             ?_Read_eep 0001  
                      main@displayRun 009E                               ?___wmul 000B  
                  __size_of_selectLog 0176                  start@bottomMagPushed 0091  
                  __size_of_send_byte 0012                             ?_bcdToDec 0001  
                             ?_printf 0066                               ?_strlen 0001  
                   __end_of_Write_eep C6AE                             ?___xxtofl 0001  
                         saveRun@menu 0072               __end_of_singleTireSteps FDD4  
                   ??_runFinishedMenu 0076                    __size_of_vfpfcnvrt 054A  
                             _SSPCON1 000FC6                               _SSPCON2 000FC5  
                             _SSPSTAT 000FC7                      ___lomod@dividend 0001  
                           ?_mainMenu 0072                        main@currentRun 00C9  
                     start@currentRun 0074                  __size_of_send_nibble 0016  
                          ??_Read_eep 0003                 __end_of_topMagStepper D0D6  
                             __Hparam 0000                             ?_poleInfo 0072  
                             __Lparam 0000                               ___fladd E42A  
                             ___awdiv CA44                               ___awmod C952  
                             ___flmul E736                               ___fltol CCBA  
                             ___lldiv C9C2                       __size_of___wmul 0026  
                             ___lodiv CE3C                               ___lomod CC0C  
                             ___lwdiv C778                               ___lwmod C6EC  
                           ?_vfprintf 005E                            ??_bcdToDec 0009  
                             __pcinit C43E                               __ramtop 1000  
                             _endTime 0100                               _lcdInst C3D4  
                             __ptext0 D7F4                               __ptext1 F54E  
                             __ptext2 D216                               __ptext3 CCBA  
                             __ptext4 E736                               __ptext5 E42A  
                             __ptext6 D356                               __ptext7 C426  
                             __ptext8 D4CC                               __ptext9 C674  
                     __size_of_printf 0026                       __size_of_strlen 002A  
                             _initLCD C87C                          __size_of_pad 009A  
                             _isalpha C608                               _isdigit C578  
                          ??___xxtofl 0005                      ___awmod@dividend 0001  
                             _islower C5D8                               _isspace C6AE  
                             _saveRun D4CC                       runInfoMenu@menu 0072  
                     runInfoMenu@logs 0076                               _isupper C5A8  
            __size_of_I2C_Master_Init 005C              __size_of_I2C_Master_Read 0024  
            __size_of_I2C_Master_Wait 0012              __size_of_I2C_Master_Stop 0008  
                             _options EFD2                               atoi@neg 0017  
                   __end_of_inputTime FDD2                               _pulse_e C4F6  
                     start@tireInCell 0093                               _strncmp CB62  
                             _toupper C72E                  end_of_initialization C456  
                          ??_mainMenu 0074                     __end_of_selectLog D4CC  
               __end_of_LCD_SIZE_HORZ FDD6                     __end_of_send_byte C3FE  
               __end_of_LCD_SIZE_VERT FDD5                  __size_of_runFinished 022E  
                             fputc@fp 0007                         __Lmediumconst FDCA  
                             fputs@fp 0010                  __size_of_runInfoMenu 01AA  
                    poleInfo@polePage 0076             __size_of_I2C_Master_Start 0008  
           __size_of_I2C_Master_Write 000A                       ___lldiv@divisor 0005  
                     ___lldiv@counter 000D                            ??_poleInfo 0078  
                   __end_of_vfpfcnvrt EFD2                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                            ??_vfprintf 0064  
                             strlen@a 0003                               strlen@s 0001  
                       selectLog@menu 0072                             _PORTAbits 000F80  
               start@tireOnBottomRamp 0094                             _PORTBbits 000F81  
                           _PORTCbits 000F82                             _PORTEbits 000F84  
                         ___fladd@grs 0037                         ___xxtofl@sign 0009  
                           _TRISAbits 000F92                             _TRISCbits 000F94  
                           _TRISEbits 000F96                           ___flmul@grs 001C  
           __size_of_bottomMagStepper 00E6                         send_byte@data 0003  
                   start@currentTires 0095                           options@menu 0072  
                         options@ones 0086                           options@tens 0084  
            ?_writeByteToDriveArduino 0001                           vfpfcnvrt@ap 004B  
                         vfpfcnvrt@fp 0047                        __end_of___wmul C4AA  
                Write_eep@GIE_BIT_VAL 0004                        __end_of_printf C4D0  
                      __end_of_strlen C54A                    topMagStepper@steps 0011  
                 start_initialization C43E                       ___lodiv@divisor 0009  
                     ___lodiv@counter 0019                           __end_of_pad CB62  
             start@floatDistTravelled 008A                     ??_I2C_Master_Init 0012  
                   ??_I2C_Master_Read 0002                     ??_I2C_Master_Wait 0001  
                   ??_I2C_Master_Stop 0002                     __size_of_Read_eep 0018  
                         vfprintf@fmt 0060                           bcdToDec@val 000A  
                            ??___wmul 000F                       _runFinishedMenu CD74  
            I2C_Master_Init@clockFreq 000E                      __CFG_LPT1OSC$OFF 000000  
                            ??_printf 006E                              ??_strlen 0003  
                           ___fladd@a 002C                             ___fladd@b 0028  
                   __size_of_bcdToDec 0026                             ___flmul@a 0013  
                           ___flmul@b 000F                         __pcstackBANK0 0080  
               options@bottomMagTires 0076                     __size_of___xxtofl 0140  
               runInfoMenu@displayRun 0074                             _Write_eep C674  
             bottomMagStepper@forward 0013                    main@bottomMagTires 009C  
                   __size_of_mainMenu 0236          __end_of_magazineStepperDelay FDD9  
                           _atoi$1801 0019                             _atoi$1802 001D  
                           _atoi$1803 001B                      _I2C_Master_Start C3BA  
                    _I2C_Master_Write C3CA                      ___lwdiv@dividend 0001  
                   __CFG_CCP2MX$PORTC 000000                         __pmediumconst FDCA  
                 start@bottomMagTires 0078                              ?___fladd 0028  
                            ?___awdiv 0001                     __size_of_poleInfo 0240  
                            ?___awmod 0001                              ?___flmul 000F  
                            ?___fltol 0028                              ?___lldiv 0001  
                            ?___lodiv 0001                              ?___lomod 0001  
                            ?___lwdiv 0001                              ?___lwmod 0001  
                  start@distTravelled 008E                              ?_lcdInst 0001  
                   __size_of_vfprintf 0056                       ___lomod@divisor 0009  
                            ?_initLCD 0001                       ___lomod@counter 0011  
                            ?_isalpha 0001                              ?_isdigit 0001  
           options@bottomMagTireCheck 0080                              ?_islower 0001  
                            ?_isspace 0001                              ?_saveRun 0072  
                       Write_eep@badd 0001                         Write_eep@bdat 0003  
                            ?_isupper 0001                              ?_options 0072  
                 runFinished@polePage 0076                         ??_send_nibble 0002  
                    ___lwdiv@quotient 0005                              ?_pulse_e 0001  
                          ?_Write_eep 0001                        __size_of_fputc 006C  
                      __size_of_fputs 0038                              ?_strncmp 0001  
                            ?_toupper 0007                        __size_of_putch 000C  
                      __size_of_start 087C                             _inputTime FDCB  
                 runFinished@startSec 0085                      _bottomMagStepper CF0A  
                      ___wmul@product 000F                              _LATAbits 000F89  
                            _LATBbits 000F8A                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
             __end_of_runFinishedMenu CE3C                             _selectLog D356  
                           _send_byte C3EC                        _LCD_LINE1_ADDR FDDA  
                      _LCD_LINE2_ADDR FDD9                        _LCD_LINE3_ADDR FDDC  
                      _LCD_LINE4_ADDR FDDB                 runFinished@displayRun 0078  
                 runFinishedMenu@menu 0072                   runFinishedMenu@logs 0074  
                    __CFG_WDTPS$32768 000000                    poleInfo@displayRun 0074  
                           _vfpfcnvrt EA88                             _xtoa$1316 0033  
                           _xtoa$1317 0035                     ___wmul@multiplier 000B  
                           _startTime 010E                __size_of_topMagStepper 00E6  
                    start@currentPole 0097                             mainMenu@i 007D  
                        _isspace$1828 0007    writeByteToDriveArduino@byteToWrite 0004  
                          vfpfcnvrt@c 0055                         ??_runFinished 0080  
               runFinished@currentRun 0074                         ??_runInfoMenu 0077  
                        poleInfo@menu 0072                              _Read_eep C426  
              __end_of_LCD_LINE1_ADDR FDDB                __end_of_LCD_LINE2_ADDR FDDA  
              __end_of_LCD_LINE3_ADDR FDDD                __end_of_LCD_LINE4_ADDR FDDC  
                 __end_of_send_nibble C426                            _EECON1bits 000FA6  
                          ?_selectLog 0072                            ?_send_byte 0001  
                            __Hrparam 0000                            vfprintf@ap 0062  
                            __Lrparam 0000                            vfprintf@fp 005E  
                  __CFG_BOREN$SBORDIS 000000                      __size_of___fladd 030C  
                    __size_of___awdiv 0084                      __size_of___awmod 0070  
                    __size_of___flmul 0352                      __size_of___fltol 00BA  
                    __size_of___lldiv 0082                      __size_of___lodiv 00CE  
                    __size_of___lomod 00AE                            ?_vfpfcnvrt 0047  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                            _bcdToDec C4D0                      __size_of_lcdInst 000C  
                _magazineStepperDelay FDD7                       _I2C_Master_Init C820  
                     _I2C_Master_Read C460                      __size_of_initLCD 006A  
                            ___xxtofl D216                       _I2C_Master_Wait C3FE  
                     _I2C_Master_Stop C3C2                      __size_of_isalpha 0034  
                    __size_of_isdigit 0030                       ___lwdiv@divisor 0003  
    __size_of_writeByteToDriveArduino 002E                      __size_of_islower 0030  
                    __size_of_isspace 003E                       ___lwdiv@counter 0007  
                    __size_of_saveRun 017E                              __ptext10 D64A  
                            __ptext11 C952                              __ptext20 EFD2  
                            __ptext12 CD74                              __ptext21 CFF0  
                            __ptext13 DB54                              __ptext30 C5A8  
                            __ptext22 CF0A                              __ptext14 C54A  
                            __ptext31 C608                              __ptext23 DFB4  
                            __ptext15 C4D0                              __ptext40 CB62  
                            __ptext32 D9A2                              __ptext24 C4AA  
                            __ptext16 CA44                              __ptext41 D0D6  
                            __ptext33 CAC8                              __ptext25 C7CA  
                            __ptext17 E1EA                              __ptext50 C87C  
                            __ptext42 C6AE                              __ptext34 C520  
                            __ptext26 EA88                              __ptext18 C6EC  
                            __ptext51 C3D4                              __ptext43 C578  
                            __ptext35 C63C                              __ptext27 DD82  
                            __ptext19 C778                              __ptext52 C3EC  
                            __ptext44 C484                              __ptext36 C8E6  
                            __ptext28 C72E                              __ptext53 C410  
                            __ptext45 C3CA                              __ptext37 C3E0  
                            __ptext29 C5D8                              __ptext54 C4F6  
                            __ptext46 C3C2                              __ptext38 CC0C  
                            __ptext55 C820                              __ptext47 C3BA  
                            __ptext39 CE3C                              __ptext56 C9C2  
                            __ptext48 C460                              __ptext49 C3FE  
                    __size_of_isupper 0030                           ??_Write_eep 0004  
                    __size_of_options 057C                      __size_of_pulse_e 002A  
                            _mainMenu DFB4                      __size_of_strncmp 00AA  
                    __size_of_toupper 004A                              _maxPoles FDD6  
                       __size_of_atoi 0140                         __size_of_main 01AE  
                       __size_of_utoa 01B2                         __size_of_xtoa 0232  
                 __end_of_runFinished DD82                              _keypress 00FD  
                       _topMagStepper CFF0                      ?_runFinishedMenu 0072  
                 __end_of_runInfoMenu D7F4                              _poleInfo E1EA  
                            _vfprintf C7CA                             printf@fmt 0066  
                            main@menu 00F4                              main@logs 009A  
         I2C_Master_Write@byteToWrite 0002                             putch@data 0004  
                      _vfpfcnvrt$1331 0053              __end_of_I2C_Master_Start C3C2  
            __end_of_I2C_Master_Write C3D4                            _INTCONbits 000FF2  
                  options@topMagTires 0074                       main@topMagTires 009B  
                           start@menu 0072                      start@topMagTires 0076  
                            isalpha@c 0001                              isdigit@c 0001  
                         _send_nibble C410                      start@tiresBefore 0096  
                    start@tiresNeeded 0092                         _LCD_SIZE_HORZ FDD5  
                            islower@c 0001                      ___lwmod@dividend 0001  
                       _LCD_SIZE_VERT FDD4                              isspace@c 0001  
                    ___lldiv@dividend 0001                        ?_topMagStepper 0011  
                         ??_selectLog 0076                           ??_send_byte 0003  
                            isupper@c 0001                             strncmp@_l 0001  
                           strncmp@_r 0003                              printf@ap 0070  
             __end_of_I2C_Master_Init C87C               __end_of_I2C_Master_Read C484  
             __end_of_I2C_Master_Wait C410               __end_of_I2C_Master_Stop C3CA  
                         ??_vfpfcnvrt 004D                           lcdInst@data 0004  
            __end_of_bottomMagStepper CFF0                      ___lldiv@quotient 0009  
                     ___lwmod@divisor 0003                       ___lwmod@counter 0005  
                            strncmp@l 0008                              strncmp@n 0005  
                            strncmp@r 000A                              toupper@c 0007  
                         _SSPCON1bits 000FC6                           _SSPCON2bits 000FC5  
                       ___fladd@signs 0034                           _runFinished DB54  
                         _runInfoMenu D64A                          ___fladd@aexp 0035  
                        ___fladd@bexp 0036                   selectLog@displayRun 0074  
